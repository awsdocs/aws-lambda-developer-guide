diff --git a/doc_source/API_AccountLimit.md b/doc_source/API_AccountLimit.md
index e837a5d..0a00433 100644
--- a/doc_source/API_AccountLimit.md
+++ b/doc_source/API_AccountLimit.md
@@ -33,7 +33,11 @@ Required: No
 ## See Also<a name="API_AccountLimit_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/AccountLimit) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/AccountLimit) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/AccountLimit) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/AccountLimit) 
\ No newline at end of file
diff --git a/doc_source/API_AccountUsage.md b/doc_source/API_AccountUsage.md
index e4a7628..1b533d2 100644
--- a/doc_source/API_AccountUsage.md
+++ b/doc_source/API_AccountUsage.md
@@ -17,7 +17,11 @@ Required: No
 ## See Also<a name="API_AccountUsage_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/AccountUsage) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/AccountUsage) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/AccountUsage) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/AccountUsage) 
\ No newline at end of file
diff --git a/doc_source/API_AddPermission.md b/doc_source/API_AddPermission.md
index 1a8a66c..ce788eb 100644
--- a/doc_source/API_AddPermission.md
+++ b/doc_source/API_AddPermission.md
@@ -147,12 +147,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_AddPermission_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/AddPermission) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/AddPermission) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/AddPermission) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/AddPermission) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/AddPermission) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/AddPermission) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/AddPermission) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/AddPermission) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/AddPermission) 
\ No newline at end of file
diff --git a/doc_source/API_AliasConfiguration.md b/doc_source/API_AliasConfiguration.md
index 81bd6a1..225c35f 100644
--- a/doc_source/API_AliasConfiguration.md
+++ b/doc_source/API_AliasConfiguration.md
@@ -43,7 +43,11 @@ Required: No
 ## See Also<a name="API_AliasConfiguration_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/AliasConfiguration) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/AliasConfiguration) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/AliasConfiguration) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/AliasConfiguration) 
\ No newline at end of file
diff --git a/doc_source/API_AliasRoutingConfiguration.md b/doc_source/API_AliasRoutingConfiguration.md
index 455a301..f2c8be3 100644
--- a/doc_source/API_AliasRoutingConfiguration.md
+++ b/doc_source/API_AliasRoutingConfiguration.md
@@ -15,7 +15,11 @@ Required: No
 ## See Also<a name="API_AliasRoutingConfiguration_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/AliasRoutingConfiguration) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/AliasRoutingConfiguration) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/AliasRoutingConfiguration) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/AliasRoutingConfiguration) 
\ No newline at end of file
diff --git a/doc_source/API_Concurrency.md b/doc_source/API_Concurrency.md
index dc82f5e..7683b65 100644
--- a/doc_source/API_Concurrency.md
+++ b/doc_source/API_Concurrency.md
@@ -11,7 +11,11 @@ Required: No
 ## See Also<a name="API_Concurrency_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/Concurrency) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/Concurrency) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/Concurrency) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/Concurrency) 
\ No newline at end of file
diff --git a/doc_source/API_CreateAlias.md b/doc_source/API_CreateAlias.md
index a293d9e..97c39fd 100644
--- a/doc_source/API_CreateAlias.md
+++ b/doc_source/API_CreateAlias.md
@@ -141,12 +141,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_CreateAlias_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/CreateAlias) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/CreateAlias) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/CreateAlias) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/CreateAlias) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/CreateAlias) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/CreateAlias) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/CreateAlias) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/CreateAlias) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/CreateAlias) 
\ No newline at end of file
diff --git a/doc_source/API_CreateEventSourceMapping.md b/doc_source/API_CreateEventSourceMapping.md
index ee8362d..2d94860 100644
--- a/doc_source/API_CreateEventSourceMapping.md
+++ b/doc_source/API_CreateEventSourceMapping.md
@@ -159,12 +159,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_CreateEventSourceMapping_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/CreateEventSourceMapping) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/CreateEventSourceMapping) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/CreateEventSourceMapping) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/CreateEventSourceMapping) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/CreateEventSourceMapping) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/CreateEventSourceMapping) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/CreateEventSourceMapping) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/CreateEventSourceMapping) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/CreateEventSourceMapping) 
\ No newline at end of file
diff --git a/doc_source/API_CreateFunction.md b/doc_source/API_CreateFunction.md
index ade4c7c..fee2358 100644
--- a/doc_source/API_CreateFunction.md
+++ b/doc_source/API_CreateFunction.md
@@ -117,10 +117,10 @@ Required: Yes
 
  ** [Runtime](#API_CreateFunction_RequestSyntax) **   <a name="SSS-CreateFunction-request-Runtime"></a>
 The runtime environment for the Lambda function you are uploading\.  
-To use the Python runtime v3\.6, set the value to "python3\.6"\. To use the Python runtime v2\.7, set the value to "python2\.7"\. To use the Node\.js runtime v8\.10, set the value to "nodejs8\.10"\. To use Node\.js runtime version v6\.10, set the value to "nodejs6\.10"\. To use Node\.js runtime version v4\.3, set the value to "nodejs4\.3"\. To use the \.NET Core runtime v1\.0, set the value to "dotnetcore1\.0"\. To use the \.NET Core runtime v2\.0, set the value to "dotnetcore2\.0"\.  
-Node v0\.10\.42 is currently marked as deprecated\. You must migrate existing functions to the newer Node\.js runtime versions available on AWS Lambda \(nodejs8\.10, nodejs6\.10 or nodejs4\.3\) as soon as possible\. Failure to do so will result in an invalid parameter error being returned\. Note that you will have to follow this procedure for each region that contains functions written in the Node v0\.10\.42 runtime\.
+To use the Python runtime v3\.6, set the value to "python3\.6"\. To use the Python runtime v2\.7, set the value to "python2\.7"\. To use the Node\.js runtime v6\.10, set the value to "nodejs6\.10"\. To use the Node\.js runtime v4\.3, set the value to "nodejs4\.3"\. To use the \.NET Core runtime v1\.0, set the value to "dotnetcore1\.0"\. To use the \.NET Core runtime v2\.0, set the value to "dotnetcore2\.0"\.  
+Node v0\.10\.42 is currently marked as deprecated\. You must migrate existing functions to the newer Node\.js runtime versions available on AWS Lambda \(nodejs4\.3 or nodejs6\.10\) as soon as possible\. Failure to do so will result in an invalid parameter error being returned\. Note that you will have to follow this procedure for each region that contains functions written in the Node v0\.10\.42 runtime\.
 Type: String  
-Valid Values:` nodejs | nodejs4.3 | nodejs6.10 | nodejs8.10 | java8 | python2.7 | python3.6 | dotnetcore1.0 | dotnetcore2.0 | nodejs4.3-edge | go1.x`   
+Valid Values:` nodejs | nodejs4.3 | nodejs6.10 | java8 | python2.7 | python3.6 | dotnetcore1.0 | dotnetcore2.0 | nodejs4.3-edge | go1.x`   
 Required: Yes
 
  ** [Tags](#API_CreateFunction_RequestSyntax) **   <a name="SSS-CreateFunction-request-Tags"></a>
@@ -264,7 +264,7 @@ Pattern: `arn:aws:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+`
  ** [Runtime](#API_CreateFunction_ResponseSyntax) **   <a name="SSS-CreateFunction-response-Runtime"></a>
 The runtime environment for the Lambda function\.  
 Type: String  
-Valid Values:` nodejs | nodejs4.3 | nodejs6.10 | nodejs8.10 | java8 | python2.7 | python3.6 | dotnetcore1.0 | dotnetcore2.0 | nodejs4.3-edge | go1.x` 
+Valid Values:` nodejs | nodejs4.3 | nodejs6.10 | java8 | python2.7 | python3.6 | dotnetcore1.0 | dotnetcore2.0 | nodejs4.3-edge | go1.x` 
 
  ** [Timeout](#API_CreateFunction_ResponseSyntax) **   <a name="SSS-CreateFunction-response-Timeout"></a>
 The function execution time at which Lambda should terminate the function\. Because the execution time has cost implications, we recommend you set this value based on your expected execution time\. The default is 3 seconds\.  
@@ -314,12 +314,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_CreateFunction_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/CreateFunction) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/CreateFunction) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/CreateFunction) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/CreateFunction) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/CreateFunction) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/CreateFunction) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/CreateFunction) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/CreateFunction) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/CreateFunction) 
\ No newline at end of file
diff --git a/doc_source/API_DeadLetterConfig.md b/doc_source/API_DeadLetterConfig.md
index 613e888..cb76e37 100644
--- a/doc_source/API_DeadLetterConfig.md
+++ b/doc_source/API_DeadLetterConfig.md
@@ -13,7 +13,11 @@ Required: No
 ## See Also<a name="API_DeadLetterConfig_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/DeadLetterConfig) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/DeadLetterConfig) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/DeadLetterConfig) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/DeadLetterConfig) 
\ No newline at end of file
diff --git a/doc_source/API_DeleteAlias.md b/doc_source/API_DeleteAlias.md
index d8ce427..87a2e35 100644
--- a/doc_source/API_DeleteAlias.md
+++ b/doc_source/API_DeleteAlias.md
@@ -55,12 +55,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_DeleteAlias_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/DeleteAlias) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/DeleteAlias) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/DeleteAlias) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/DeleteAlias) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/DeleteAlias) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/DeleteAlias) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/DeleteAlias) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/DeleteAlias) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/DeleteAlias) 
\ No newline at end of file
diff --git a/doc_source/API_DeleteEventSourceMapping.md b/doc_source/API_DeleteEventSourceMapping.md
index ad1931b..172110b 100644
--- a/doc_source/API_DeleteEventSourceMapping.md
+++ b/doc_source/API_DeleteEventSourceMapping.md
@@ -101,12 +101,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_DeleteEventSourceMapping_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/DeleteEventSourceMapping) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/DeleteEventSourceMapping) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/DeleteEventSourceMapping) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/DeleteEventSourceMapping) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/DeleteEventSourceMapping) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/DeleteEventSourceMapping) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/DeleteEventSourceMapping) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/DeleteEventSourceMapping) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/DeleteEventSourceMapping) 
\ No newline at end of file
diff --git a/doc_source/API_DeleteFunction.md b/doc_source/API_DeleteFunction.md
index 56b2241..443d1f1 100644
--- a/doc_source/API_DeleteFunction.md
+++ b/doc_source/API_DeleteFunction.md
@@ -70,12 +70,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_DeleteFunction_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/DeleteFunction) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/DeleteFunction) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/DeleteFunction) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/DeleteFunction) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/DeleteFunction) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/DeleteFunction) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/DeleteFunction) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/DeleteFunction) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/DeleteFunction) 
\ No newline at end of file
diff --git a/doc_source/API_DeleteFunctionConcurrency.md b/doc_source/API_DeleteFunctionConcurrency.md
index 8e398b3..2681f53 100644
--- a/doc_source/API_DeleteFunctionConcurrency.md
+++ b/doc_source/API_DeleteFunctionConcurrency.md
@@ -52,12 +52,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_DeleteFunctionConcurrency_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/DeleteFunctionConcurrency) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/DeleteFunctionConcurrency) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/DeleteFunctionConcurrency) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/DeleteFunctionConcurrency) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/DeleteFunctionConcurrency) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/DeleteFunctionConcurrency) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/DeleteFunctionConcurrency) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/DeleteFunctionConcurrency) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/DeleteFunctionConcurrency) 
\ No newline at end of file
diff --git a/doc_source/API_Environment.md b/doc_source/API_Environment.md
index c52a0f1..9a579d7 100644
--- a/doc_source/API_Environment.md
+++ b/doc_source/API_Environment.md
@@ -13,7 +13,11 @@ Required: No
 ## See Also<a name="API_Environment_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/Environment) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/Environment) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/Environment) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/Environment) 
\ No newline at end of file
diff --git a/doc_source/API_EnvironmentError.md b/doc_source/API_EnvironmentError.md
index a9a68e3..39d7847 100644
--- a/doc_source/API_EnvironmentError.md
+++ b/doc_source/API_EnvironmentError.md
@@ -17,7 +17,11 @@ Required: No
 ## See Also<a name="API_EnvironmentError_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/EnvironmentError) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/EnvironmentError) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/EnvironmentError) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/EnvironmentError) 
\ No newline at end of file
diff --git a/doc_source/API_EnvironmentResponse.md b/doc_source/API_EnvironmentResponse.md
index 49581a5..d4d6189 100644
--- a/doc_source/API_EnvironmentResponse.md
+++ b/doc_source/API_EnvironmentResponse.md
@@ -18,7 +18,11 @@ Required: No
 ## See Also<a name="API_EnvironmentResponse_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/EnvironmentResponse) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/EnvironmentResponse) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/EnvironmentResponse) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/EnvironmentResponse) 
\ No newline at end of file
diff --git a/doc_source/API_EventSourceMappingConfiguration.md b/doc_source/API_EventSourceMappingConfiguration.md
index 34e65b4..44ea39d 100644
--- a/doc_source/API_EventSourceMappingConfiguration.md
+++ b/doc_source/API_EventSourceMappingConfiguration.md
@@ -50,7 +50,11 @@ Required: No
 ## See Also<a name="API_EventSourceMappingConfiguration_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/EventSourceMappingConfiguration) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/EventSourceMappingConfiguration) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/EventSourceMappingConfiguration) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/EventSourceMappingConfiguration) 
\ No newline at end of file
diff --git a/doc_source/API_FunctionCode.md b/doc_source/API_FunctionCode.md
index 7966768..57b06d7 100644
--- a/doc_source/API_FunctionCode.md
+++ b/doc_source/API_FunctionCode.md
@@ -31,7 +31,11 @@ Required: No
 ## See Also<a name="API_FunctionCode_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/FunctionCode) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/FunctionCode) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/FunctionCode) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/FunctionCode) 
\ No newline at end of file
diff --git a/doc_source/API_FunctionCodeLocation.md b/doc_source/API_FunctionCodeLocation.md
index 51a2a54..c2c66d0 100644
--- a/doc_source/API_FunctionCodeLocation.md
+++ b/doc_source/API_FunctionCodeLocation.md
@@ -17,7 +17,11 @@ Required: No
 ## See Also<a name="API_FunctionCodeLocation_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/FunctionCodeLocation) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/FunctionCodeLocation) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/FunctionCodeLocation) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/FunctionCodeLocation) 
\ No newline at end of file
diff --git a/doc_source/API_FunctionConfiguration.md b/doc_source/API_FunctionConfiguration.md
index 9577d02..af4fb1b 100644
--- a/doc_source/API_FunctionConfiguration.md
+++ b/doc_source/API_FunctionConfiguration.md
@@ -87,7 +87,7 @@ Required: No
  **Runtime**   <a name="SSS-Type-FunctionConfiguration-Runtime"></a>
 The runtime environment for the Lambda function\.  
 Type: String  
-Valid Values:` nodejs | nodejs4.3 | nodejs6.10 | nodejs8.10 | java8 | python2.7 | python3.6 | dotnetcore1.0 | dotnetcore2.0 | nodejs4.3-edge | go1.x`   
+Valid Values:` nodejs | nodejs4.3 | nodejs6.10 | java8 | python2.7 | python3.6 | dotnetcore1.0 | dotnetcore2.0 | nodejs4.3-edge | go1.x`   
 Required: No
 
  **Timeout**   <a name="SSS-Type-FunctionConfiguration-Timeout"></a>
@@ -116,7 +116,11 @@ Required: No
 ## See Also<a name="API_FunctionConfiguration_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/FunctionConfiguration) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/FunctionConfiguration) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/FunctionConfiguration) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/FunctionConfiguration) 
\ No newline at end of file
diff --git a/doc_source/API_GetAccountSettings.md b/doc_source/API_GetAccountSettings.md
index 17a20ea..f5186c3 100644
--- a/doc_source/API_GetAccountSettings.md
+++ b/doc_source/API_GetAccountSettings.md
@@ -66,12 +66,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_GetAccountSettings_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/GetAccountSettings) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/GetAccountSettings) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/GetAccountSettings) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/GetAccountSettings) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/GetAccountSettings) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/GetAccountSettings) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/GetAccountSettings) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/GetAccountSettings) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/GetAccountSettings) 
\ No newline at end of file
diff --git a/doc_source/API_GetAlias.md b/doc_source/API_GetAlias.md
index 598dce5..fb58e60 100644
--- a/doc_source/API_GetAlias.md
+++ b/doc_source/API_GetAlias.md
@@ -105,12 +105,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_GetAlias_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/GetAlias) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/GetAlias) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/GetAlias) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/GetAlias) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/GetAlias) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/GetAlias) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/GetAlias) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/GetAlias) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/GetAlias) 
\ No newline at end of file
diff --git a/doc_source/API_GetEventSourceMapping.md b/doc_source/API_GetEventSourceMapping.md
index 92dc135..23299e8 100644
--- a/doc_source/API_GetEventSourceMapping.md
+++ b/doc_source/API_GetEventSourceMapping.md
@@ -101,12 +101,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_GetEventSourceMapping_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/GetEventSourceMapping) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/GetEventSourceMapping) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/GetEventSourceMapping) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/GetEventSourceMapping) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/GetEventSourceMapping) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/GetEventSourceMapping) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/GetEventSourceMapping) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/GetEventSourceMapping) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/GetEventSourceMapping) 
\ No newline at end of file
diff --git a/doc_source/API_GetFunction.md b/doc_source/API_GetFunction.md
index 84225aa..f5d5c2f 100644
--- a/doc_source/API_GetFunction.md
+++ b/doc_source/API_GetFunction.md
@@ -131,12 +131,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_GetFunction_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/GetFunction) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/GetFunction) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/GetFunction) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/GetFunction) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/GetFunction) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/GetFunction) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/GetFunction) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/GetFunction) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/GetFunction) 
\ No newline at end of file
diff --git a/doc_source/API_GetFunctionConfiguration.md b/doc_source/API_GetFunctionConfiguration.md
index f986810..fdf05cd 100644
--- a/doc_source/API_GetFunctionConfiguration.md
+++ b/doc_source/API_GetFunctionConfiguration.md
@@ -152,7 +152,7 @@ Pattern: `arn:aws:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+`
  ** [Runtime](#API_GetFunctionConfiguration_ResponseSyntax) **   <a name="SSS-GetFunctionConfiguration-response-Runtime"></a>
 The runtime environment for the Lambda function\.  
 Type: String  
-Valid Values:` nodejs | nodejs4.3 | nodejs6.10 | nodejs8.10 | java8 | python2.7 | python3.6 | dotnetcore1.0 | dotnetcore2.0 | nodejs4.3-edge | go1.x` 
+Valid Values:` nodejs | nodejs4.3 | nodejs6.10 | java8 | python2.7 | python3.6 | dotnetcore1.0 | dotnetcore2.0 | nodejs4.3-edge | go1.x` 
 
  ** [Timeout](#API_GetFunctionConfiguration_ResponseSyntax) **   <a name="SSS-GetFunctionConfiguration-response-Timeout"></a>
 The function execution time at which Lambda should terminate the function\. Because the execution time has cost implications, we recommend you set this value based on your expected execution time\. The default is 3 seconds\.  
@@ -194,12 +194,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_GetFunctionConfiguration_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/GetFunctionConfiguration) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/GetFunctionConfiguration) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/GetFunctionConfiguration) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/GetFunctionConfiguration) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/GetFunctionConfiguration) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/GetFunctionConfiguration) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/GetFunctionConfiguration) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/GetFunctionConfiguration) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/GetFunctionConfiguration) 
\ No newline at end of file
diff --git a/doc_source/API_GetPolicy.md b/doc_source/API_GetPolicy.md
index b35ee54..a76fc7d 100644
--- a/doc_source/API_GetPolicy.md
+++ b/doc_source/API_GetPolicy.md
@@ -78,12 +78,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_GetPolicy_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/GetPolicy) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/GetPolicy) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/GetPolicy) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/GetPolicy) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/GetPolicy) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/GetPolicy) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/GetPolicy) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/GetPolicy) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/GetPolicy) 
\ No newline at end of file
diff --git a/doc_source/API_Invoke.md b/doc_source/API_Invoke.md
index 66fd0da..bd8a70d 100644
--- a/doc_source/API_Invoke.md
+++ b/doc_source/API_Invoke.md
@@ -177,12 +177,21 @@ HTTP Status Code: 415
 ## See Also<a name="API_Invoke_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/Invoke) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/Invoke) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/Invoke) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/Invoke) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/Invoke) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/Invoke) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/Invoke) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/Invoke) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/Invoke) 
\ No newline at end of file
diff --git a/doc_source/API_InvokeAsync.md b/doc_source/API_InvokeAsync.md
index b1eb699..9dadba0 100644
--- a/doc_source/API_InvokeAsync.md
+++ b/doc_source/API_InvokeAsync.md
@@ -90,12 +90,21 @@ content-type: application/json
 ## See Also<a name="API_InvokeAsync_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/InvokeAsync) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/InvokeAsync) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/InvokeAsync) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/InvokeAsync) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/InvokeAsync) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/InvokeAsync) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/InvokeAsync) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/InvokeAsync) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/InvokeAsync) 
\ No newline at end of file
diff --git a/doc_source/API_ListAliases.md b/doc_source/API_ListAliases.md
index cae776e..3a19d5a 100644
--- a/doc_source/API_ListAliases.md
+++ b/doc_source/API_ListAliases.md
@@ -95,12 +95,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_ListAliases_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/ListAliases) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/ListAliases) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/ListAliases) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/ListAliases) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/ListAliases) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/ListAliases) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/ListAliases) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/ListAliases) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/ListAliases) 
\ No newline at end of file
diff --git a/doc_source/API_ListEventSourceMappings.md b/doc_source/API_ListEventSourceMappings.md
index 8c8da82..049a2cc 100644
--- a/doc_source/API_ListEventSourceMappings.md
+++ b/doc_source/API_ListEventSourceMappings.md
@@ -97,12 +97,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_ListEventSourceMappings_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/ListEventSourceMappings) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/ListEventSourceMappings) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/ListEventSourceMappings) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/ListEventSourceMappings) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/ListEventSourceMappings) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/ListEventSourceMappings) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/ListEventSourceMappings) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/ListEventSourceMappings) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/ListEventSourceMappings) 
\ No newline at end of file
diff --git a/doc_source/API_ListFunctions.md b/doc_source/API_ListFunctions.md
index c811c9d..58a09a4 100644
--- a/doc_source/API_ListFunctions.md
+++ b/doc_source/API_ListFunctions.md
@@ -121,12 +121,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_ListFunctions_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/ListFunctions) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/ListFunctions) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/ListFunctions) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/ListFunctions) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/ListFunctions) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/ListFunctions) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/ListFunctions) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/ListFunctions) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/ListFunctions) 
\ No newline at end of file
diff --git a/doc_source/API_ListTags.md b/doc_source/API_ListTags.md
index 7cb7674..8f67950 100644
--- a/doc_source/API_ListTags.md
+++ b/doc_source/API_ListTags.md
@@ -64,12 +64,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_ListTags_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/ListTags) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/ListTags) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/ListTags) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/ListTags) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/ListTags) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/ListTags) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/ListTags) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/ListTags) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/ListTags) 
\ No newline at end of file
diff --git a/doc_source/API_ListVersionsByFunction.md b/doc_source/API_ListVersionsByFunction.md
index f73aa90..4f762c2 100644
--- a/doc_source/API_ListVersionsByFunction.md
+++ b/doc_source/API_ListVersionsByFunction.md
@@ -113,12 +113,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_ListVersionsByFunction_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/ListVersionsByFunction) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/ListVersionsByFunction) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/ListVersionsByFunction) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/ListVersionsByFunction) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/ListVersionsByFunction) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/ListVersionsByFunction) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/ListVersionsByFunction) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/ListVersionsByFunction) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/ListVersionsByFunction) 
\ No newline at end of file
diff --git a/doc_source/API_Operations.md b/doc_source/API_Operations.md
index dc5279d..d4a4e0b 100644
--- a/doc_source/API_Operations.md
+++ b/doc_source/API_Operations.md
@@ -1,33 +1,63 @@
 # Actions<a name="API_Operations"></a>
 
 The following actions are supported:
+
 +  [AddPermission](API_AddPermission.md) 
+
 +  [CreateAlias](API_CreateAlias.md) 
+
 +  [CreateEventSourceMapping](API_CreateEventSourceMapping.md) 
+
 +  [CreateFunction](API_CreateFunction.md) 
+
 +  [DeleteAlias](API_DeleteAlias.md) 
+
 +  [DeleteEventSourceMapping](API_DeleteEventSourceMapping.md) 
+
 +  [DeleteFunction](API_DeleteFunction.md) 
+
 +  [DeleteFunctionConcurrency](API_DeleteFunctionConcurrency.md) 
+
 +  [GetAccountSettings](API_GetAccountSettings.md) 
+
 +  [GetAlias](API_GetAlias.md) 
+
 +  [GetEventSourceMapping](API_GetEventSourceMapping.md) 
+
 +  [GetFunction](API_GetFunction.md) 
+
 +  [GetFunctionConfiguration](API_GetFunctionConfiguration.md) 
+
 +  [GetPolicy](API_GetPolicy.md) 
+
 +  [Invoke](API_Invoke.md) 
+
 +  [InvokeAsync](API_InvokeAsync.md) 
+
 +  [ListAliases](API_ListAliases.md) 
+
 +  [ListEventSourceMappings](API_ListEventSourceMappings.md) 
+
 +  [ListFunctions](API_ListFunctions.md) 
+
 +  [ListTags](API_ListTags.md) 
+
 +  [ListVersionsByFunction](API_ListVersionsByFunction.md) 
+
 +  [PublishVersion](API_PublishVersion.md) 
+
 +  [PutFunctionConcurrency](API_PutFunctionConcurrency.md) 
+
 +  [RemovePermission](API_RemovePermission.md) 
+
 +  [TagResource](API_TagResource.md) 
+
 +  [UntagResource](API_UntagResource.md) 
+
 +  [UpdateAlias](API_UpdateAlias.md) 
+
 +  [UpdateEventSourceMapping](API_UpdateEventSourceMapping.md) 
+
 +  [UpdateFunctionCode](API_UpdateFunctionCode.md) 
+
 +  [UpdateFunctionConfiguration](API_UpdateFunctionConfiguration.md) 
\ No newline at end of file
diff --git a/doc_source/API_PublishVersion.md b/doc_source/API_PublishVersion.md
index 897a297..2cd8ac6 100644
--- a/doc_source/API_PublishVersion.md
+++ b/doc_source/API_PublishVersion.md
@@ -164,7 +164,7 @@ Pattern: `arn:aws:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+`
  ** [Runtime](#API_PublishVersion_ResponseSyntax) **   <a name="SSS-PublishVersion-response-Runtime"></a>
 The runtime environment for the Lambda function\.  
 Type: String  
-Valid Values:` nodejs | nodejs4.3 | nodejs6.10 | nodejs8.10 | java8 | python2.7 | python3.6 | dotnetcore1.0 | dotnetcore2.0 | nodejs4.3-edge | go1.x` 
+Valid Values:` nodejs | nodejs4.3 | nodejs6.10 | java8 | python2.7 | python3.6 | dotnetcore1.0 | dotnetcore2.0 | nodejs4.3-edge | go1.x` 
 
  ** [Timeout](#API_PublishVersion_ResponseSyntax) **   <a name="SSS-PublishVersion-response-Timeout"></a>
 The function execution time at which Lambda should terminate the function\. Because the execution time has cost implications, we recommend you set this value based on your expected execution time\. The default is 3 seconds\.  
@@ -214,12 +214,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_PublishVersion_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/PublishVersion) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/PublishVersion) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/PublishVersion) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/PublishVersion) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/PublishVersion) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/PublishVersion) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/PublishVersion) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/PublishVersion) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/PublishVersion) 
\ No newline at end of file
diff --git a/doc_source/API_PutFunctionConcurrency.md b/doc_source/API_PutFunctionConcurrency.md
index 6858597..b1ca451 100644
--- a/doc_source/API_PutFunctionConcurrency.md
+++ b/doc_source/API_PutFunctionConcurrency.md
@@ -75,12 +75,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_PutFunctionConcurrency_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/PutFunctionConcurrency) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/PutFunctionConcurrency) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/PutFunctionConcurrency) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/PutFunctionConcurrency) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/PutFunctionConcurrency) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/PutFunctionConcurrency) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/PutFunctionConcurrency) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/PutFunctionConcurrency) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/PutFunctionConcurrency) 
\ No newline at end of file
diff --git a/doc_source/API_Reference.md b/doc_source/API_Reference.md
index e02d6e6..8a3957e 100644
--- a/doc_source/API_Reference.md
+++ b/doc_source/API_Reference.md
@@ -11,17 +11,25 @@ You can use the AWS CLI to explore the AWS Lambda API\. This guide provides seve
 Because AWS SDKs use the CA certificates from your computer, changes to the certificates on the AWS servers can cause connection failures when you attempt to use an SDK\. You can prevent these failures by keeping your computer's CA certificates and operating system up\-to\-date\. If you encounter this issue in a corporate environment and do not manage your own computer, you might need to ask an administrator to assist with the update process\. The following list shows minimum operating system and Java versions:
 
 Microsoft Windows versions that have updates from January 2005 or later installed contain at least one of the required CAs in their trust list\. 
+
 + Mac OS X 10\.4 with Java for Mac OS X 10\.4 Release 5 \(February 2007\), Mac OS X 10\.5 \(October 2007\), and later versions contain at least one of the required CAs in their trust list\. 
+
 + Red Hat Enterprise Linux 5 \(March 2007\), 6, and 7 and CentOS 5, 6, and 7 all contain at least one of the required CAs in their default trusted CA list\. 
+
 + Java 1\.4\.2\_12 \(May 2006\), 5 Update 2 \(March 2005\), and all later versions, including Java 6 \(December 2006\), 7, and 8, contain at least one of the required CAs in their default trusted CA list\. 
 
 When accessing the AWS Lambda management console or AWS Lambda API endpoints, whether through browsers or programmatically, you will need to ensure your client machines support any of the following CAs: 
+
 + Amazon Root CA 1
+
 + Starfield Services Root Certificate Authority \- G2
+
 + Starfield Class 2 Certification Authority
 
 Root certificates from the first two authorities are available from [Amazon Trust Services](https://www.amazontrust.com/repository/), but keeping your computer up\-to\-date is the more straightforward solution\. To learn more about ACM\-provided certificates, see [AWS Certificate Manager FAQs\.](https://aws.amazon.com/certificate-manager/faqs/#certificates) 
 
 **Topics**
+
 + [Actions](API_Operations.md)
+
 + [Data Types](API_Types.md)
\ No newline at end of file
diff --git a/doc_source/API_RemovePermission.md b/doc_source/API_RemovePermission.md
index fb1da39..a36ea3b 100644
--- a/doc_source/API_RemovePermission.md
+++ b/doc_source/API_RemovePermission.md
@@ -76,12 +76,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_RemovePermission_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/RemovePermission) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/RemovePermission) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/RemovePermission) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/RemovePermission) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/RemovePermission) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/RemovePermission) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/RemovePermission) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/RemovePermission) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/RemovePermission) 
\ No newline at end of file
diff --git a/doc_source/API_TagResource.md b/doc_source/API_TagResource.md
index a94dd91..a1d270f 100644
--- a/doc_source/API_TagResource.md
+++ b/doc_source/API_TagResource.md
@@ -63,12 +63,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_TagResource_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/TagResource) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/TagResource) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/TagResource) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/TagResource) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/TagResource) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/TagResource) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/TagResource) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/TagResource) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/TagResource) 
\ No newline at end of file
diff --git a/doc_source/API_TracingConfig.md b/doc_source/API_TracingConfig.md
index e93ab59..b5acb4c 100644
--- a/doc_source/API_TracingConfig.md
+++ b/doc_source/API_TracingConfig.md
@@ -13,7 +13,11 @@ Required: No
 ## See Also<a name="API_TracingConfig_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/TracingConfig) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/TracingConfig) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/TracingConfig) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/TracingConfig) 
\ No newline at end of file
diff --git a/doc_source/API_TracingConfigResponse.md b/doc_source/API_TracingConfigResponse.md
index caa678a..4e3ea8b 100644
--- a/doc_source/API_TracingConfigResponse.md
+++ b/doc_source/API_TracingConfigResponse.md
@@ -13,7 +13,11 @@ Required: No
 ## See Also<a name="API_TracingConfigResponse_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/TracingConfigResponse) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/TracingConfigResponse) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/TracingConfigResponse) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/TracingConfigResponse) 
\ No newline at end of file
diff --git a/doc_source/API_Types.md b/doc_source/API_Types.md
index 1914df5..94ef5f5 100644
--- a/doc_source/API_Types.md
+++ b/doc_source/API_Types.md
@@ -1,20 +1,37 @@
 # Data Types<a name="API_Types"></a>
 
 The following data types are supported:
+
 +  [AccountLimit](API_AccountLimit.md) 
+
 +  [AccountUsage](API_AccountUsage.md) 
+
 +  [AliasConfiguration](API_AliasConfiguration.md) 
+
 +  [AliasRoutingConfiguration](API_AliasRoutingConfiguration.md) 
+
 +  [Concurrency](API_Concurrency.md) 
+
 +  [DeadLetterConfig](API_DeadLetterConfig.md) 
+
 +  [Environment](API_Environment.md) 
+
 +  [EnvironmentError](API_EnvironmentError.md) 
+
 +  [EnvironmentResponse](API_EnvironmentResponse.md) 
+
 +  [EventSourceMappingConfiguration](API_EventSourceMappingConfiguration.md) 
+
 +  [FunctionCode](API_FunctionCode.md) 
+
 +  [FunctionCodeLocation](API_FunctionCodeLocation.md) 
+
 +  [FunctionConfiguration](API_FunctionConfiguration.md) 
+
 +  [TracingConfig](API_TracingConfig.md) 
+
 +  [TracingConfigResponse](API_TracingConfigResponse.md) 
+
 +  [VpcConfig](API_VpcConfig.md) 
+
 +  [VpcConfigResponse](API_VpcConfigResponse.md) 
\ No newline at end of file
diff --git a/doc_source/API_UntagResource.md b/doc_source/API_UntagResource.md
index 528f97f..1146692 100644
--- a/doc_source/API_UntagResource.md
+++ b/doc_source/API_UntagResource.md
@@ -54,12 +54,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_UntagResource_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/UntagResource) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/UntagResource) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/UntagResource) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/UntagResource) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/UntagResource) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/UntagResource) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/UntagResource) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/UntagResource) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/UntagResource) 
\ No newline at end of file
diff --git a/doc_source/API_UpdateAlias.md b/doc_source/API_UpdateAlias.md
index dd0b90e..59d76ec 100644
--- a/doc_source/API_UpdateAlias.md
+++ b/doc_source/API_UpdateAlias.md
@@ -144,12 +144,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_UpdateAlias_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/UpdateAlias) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/UpdateAlias) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/UpdateAlias) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/UpdateAlias) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/UpdateAlias) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/UpdateAlias) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/UpdateAlias) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/UpdateAlias) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/UpdateAlias) 
\ No newline at end of file
diff --git a/doc_source/API_UpdateEventSourceMapping.md b/doc_source/API_UpdateEventSourceMapping.md
index 2856190..c74414b 100644
--- a/doc_source/API_UpdateEventSourceMapping.md
+++ b/doc_source/API_UpdateEventSourceMapping.md
@@ -137,12 +137,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_UpdateEventSourceMapping_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/UpdateEventSourceMapping) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/UpdateEventSourceMapping) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/UpdateEventSourceMapping) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/UpdateEventSourceMapping) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/UpdateEventSourceMapping) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/UpdateEventSourceMapping) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/UpdateEventSourceMapping) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/UpdateEventSourceMapping) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/UpdateEventSourceMapping) 
\ No newline at end of file
diff --git a/doc_source/API_UpdateFunctionCode.md b/doc_source/API_UpdateFunctionCode.md
index 4111c22..aa8c3b6 100644
--- a/doc_source/API_UpdateFunctionCode.md
+++ b/doc_source/API_UpdateFunctionCode.md
@@ -196,7 +196,7 @@ Pattern: `arn:aws:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+`
  ** [Runtime](#API_UpdateFunctionCode_ResponseSyntax) **   <a name="SSS-UpdateFunctionCode-response-Runtime"></a>
 The runtime environment for the Lambda function\.  
 Type: String  
-Valid Values:` nodejs | nodejs4.3 | nodejs6.10 | nodejs8.10 | java8 | python2.7 | python3.6 | dotnetcore1.0 | dotnetcore2.0 | nodejs4.3-edge | go1.x` 
+Valid Values:` nodejs | nodejs4.3 | nodejs6.10 | java8 | python2.7 | python3.6 | dotnetcore1.0 | dotnetcore2.0 | nodejs4.3-edge | go1.x` 
 
  ** [Timeout](#API_UpdateFunctionCode_ResponseSyntax) **   <a name="SSS-UpdateFunctionCode-response-Timeout"></a>
 The function execution time at which Lambda should terminate the function\. Because the execution time has cost implications, we recommend you set this value based on your expected execution time\. The default is 3 seconds\.  
@@ -246,12 +246,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_UpdateFunctionCode_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/UpdateFunctionCode) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/UpdateFunctionCode) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/UpdateFunctionCode) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/UpdateFunctionCode) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/UpdateFunctionCode) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/UpdateFunctionCode) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/UpdateFunctionCode) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/UpdateFunctionCode) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/UpdateFunctionCode) 
\ No newline at end of file
diff --git a/doc_source/API_UpdateFunctionConfiguration.md b/doc_source/API_UpdateFunctionConfiguration.md
index 351ce7f..c9f72e1 100644
--- a/doc_source/API_UpdateFunctionConfiguration.md
+++ b/doc_source/API_UpdateFunctionConfiguration.md
@@ -101,10 +101,10 @@ Required: No
 
  ** [Runtime](#API_UpdateFunctionConfiguration_RequestSyntax) **   <a name="SSS-UpdateFunctionConfiguration-request-Runtime"></a>
 The runtime environment for the Lambda function\.  
-To use the Python runtime v3\.6, set the value to "python3\.6"\. To use the Python runtime v2\.7, set the value to "python2\.7"\. To use the Node\.js runtime v8\.10, set the value to "nodejs8 \.10"\. To use the Node\.js runtime v6\.10, set the value to "nodejs6\.10"\. To use the Node\.js runtime v4\.3, set the value to "nodejs4\.3"\. To use the \.NET Core runtime v1\.0, set the value to "dotnetcore1\.0"\. To use the \.NET Core runtime v2\.0, set the value to "dotnetcore2\.0"\.  
-Node v0\.10\.42 is currently marked as deprecated\. You must migrate existing functions to the newer Node\.js runtime versions available on AWS Lambda \(nodejs4\.3, nodejs6\.10 or nodejs8\.10\) as soon as possible\. Failure to do so will result in an invalid parameter error being returned\. Note that you will have to follow this procedure for each region that contains functions written in the Node v0\.10\.42 runtime\.
+To use the Python runtime v3\.6, set the value to "python3\.6"\. To use the Python runtime v2\.7, set the value to "python2\.7"\. To use the Node\.js runtime v6\.10, set the value to "nodejs6\.10"\. To use the Node\.js runtime v4\.3, set the value to "nodejs4\.3"\. To use the \.NET Core runtime v1\.0, set the value to "dotnetcore1\.0"\. To use the \.NET Core runtime v2\.0, set the value to "dotnetcore2\.0"\.  
+Node v0\.10\.42 is currently marked as deprecated\. You must migrate existing functions to the newer Node\.js runtime versions available on AWS Lambda \(nodejs4\.3 or nodejs6\.10\) as soon as possible\. Failure to do so will result in an invalid parameter error being returned\. Note that you will have to follow this procedure for each region that contains functions written in the Node v0\.10\.42 runtime\.
 Type: String  
-Valid Values:` nodejs | nodejs4.3 | nodejs6.10 | nodejs8.10 | java8 | python2.7 | python3.6 | dotnetcore1.0 | dotnetcore2.0 | nodejs4.3-edge | go1.x`   
+Valid Values:` nodejs | nodejs4.3 | nodejs6.10 | java8 | python2.7 | python3.6 | dotnetcore1.0 | dotnetcore2.0 | nodejs4.3-edge | go1.x`   
 Required: No
 
  ** [Timeout](#API_UpdateFunctionConfiguration_RequestSyntax) **   <a name="SSS-UpdateFunctionConfiguration-request-Timeout"></a>
@@ -243,7 +243,7 @@ Pattern: `arn:aws:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+`
  ** [Runtime](#API_UpdateFunctionConfiguration_ResponseSyntax) **   <a name="SSS-UpdateFunctionConfiguration-response-Runtime"></a>
 The runtime environment for the Lambda function\.  
 Type: String  
-Valid Values:` nodejs | nodejs4.3 | nodejs6.10 | nodejs8.10 | java8 | python2.7 | python3.6 | dotnetcore1.0 | dotnetcore2.0 | nodejs4.3-edge | go1.x` 
+Valid Values:` nodejs | nodejs4.3 | nodejs6.10 | java8 | python2.7 | python3.6 | dotnetcore1.0 | dotnetcore2.0 | nodejs4.3-edge | go1.x` 
 
  ** [Timeout](#API_UpdateFunctionConfiguration_ResponseSyntax) **   <a name="SSS-UpdateFunctionConfiguration-response-Timeout"></a>
 The function execution time at which Lambda should terminate the function\. Because the execution time has cost implications, we recommend you set this value based on your expected execution time\. The default is 3 seconds\.  
@@ -293,12 +293,21 @@ HTTP Status Code: 429
 ## See Also<a name="API_UpdateFunctionConfiguration_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/lambda-2015-03-31/UpdateFunctionConfiguration) 
+
 +  [AWS SDK for \.NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/lambda-2015-03-31/UpdateFunctionConfiguration) 
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/UpdateFunctionConfiguration) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/UpdateFunctionConfiguration) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/UpdateFunctionConfiguration) 
+
 +  [AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/lambda-2015-03-31/UpdateFunctionConfiguration) 
+
 +  [AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/lambda-2015-03-31/UpdateFunctionConfiguration) 
+
 +  [AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/lambda-2015-03-31/UpdateFunctionConfiguration) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/UpdateFunctionConfiguration) 
\ No newline at end of file
diff --git a/doc_source/API_VpcConfig.md b/doc_source/API_VpcConfig.md
index 2ab318c..fef11de 100644
--- a/doc_source/API_VpcConfig.md
+++ b/doc_source/API_VpcConfig.md
@@ -19,7 +19,11 @@ Required: No
 ## See Also<a name="API_VpcConfig_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/VpcConfig) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/VpcConfig) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/VpcConfig) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/VpcConfig) 
\ No newline at end of file
diff --git a/doc_source/API_VpcConfigResponse.md b/doc_source/API_VpcConfigResponse.md
index 303e738..498f0ae 100644
--- a/doc_source/API_VpcConfigResponse.md
+++ b/doc_source/API_VpcConfigResponse.md
@@ -24,7 +24,11 @@ Required: No
 ## See Also<a name="API_VpcConfigResponse_SeeAlso"></a>
 
 For more information about using this API in one of the language\-specific AWS SDKs, see the following:
+
 +  [AWS SDK for C\+\+](http://docs.aws.amazon.com/goto/SdkForCpp/lambda-2015-03-31/VpcConfigResponse) 
+
 +  [AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/lambda-2015-03-31/VpcConfigResponse) 
+
 +  [AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/lambda-2015-03-31/VpcConfigResponse) 
+
 +  [AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/lambda-2015-03-31/VpcConfigResponse) 
\ No newline at end of file
diff --git a/doc_source/access-control-identity-based.md b/doc_source/access-control-identity-based.md
index 237b580..d002cb4 100644
--- a/doc_source/access-control-identity-based.md
+++ b/doc_source/access-control-identity-based.md
@@ -6,8 +6,11 @@ This topic provides examples of identity\-based policies in which an account adm
  We recommend that you first review the introductory topics that explain the basic concepts and options available for you to manage access to your AWS Lambda resources\. For more information, see [Overview of Managing Access Permissions to Your AWS Lambda Resources](access-control-overview.md)\.
 
 The sections in this topic cover the following:
+
 + [Permissions Required to Use the AWS Lambda Console](#additional-console-required-permissions) 
+
 + [AWS Managed \(Predefined\) Policies for AWS Lambda](#access-policy-examples-aws-managed) 
+
 + [Customer Managed Policy Examples](#access-policy-examples-for-sdk-cli) 
 
 The following shows an example of a permissions policy\.
@@ -37,7 +40,9 @@ The following shows an example of a permissions policy\.
 ```
 
  The policy has two statements: 
+
 +  The first statement grants permissions for the AWS Lambda action \(`lambda:CreateFunction`\) on a resource by using the Amazon Resource Name \(ARN\)  for the Lambda function\. Currently, AWS Lambda doesn't support permissions for this particular action at the resource\-level\. Therefore, the policy specifies a wildcard character \(\*\) as the `Resource` value\. 
+
 + The second statement grants permissions for the IAM action \(`iam:PassRole`\) on IAM roles\. The wildcard character \(\*\) at the end of the `Resource` value means that the statement allows permission for the `iam:PassRole` action on any IAM role\. To limit this permission to a specific role, replace the wildcard character \(\*\) in the resource ARN with the specific role name\. 
 
 The policy doesn't specify the `Principal` element because in an identity\-based policy you don't specify the principal who gets the permission\. When you attach policy to a user, the user is the implicit principal\. When you attach a permission policy to an IAM role, the principal identified in the role's trust policy gets the permissions\.
@@ -53,8 +58,11 @@ The AWS Lambda console provides an integrated environment for you to create and
 AWS addresses many common use cases by providing standalone IAM policies that are created and administered by AWS\. Managed policies grant necessary permissions for common use cases so you can avoid having to investigate what permissions are needed\. For more information, see [AWS Managed Policies](http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html#aws-managed-policies) in the *IAM User Guide*\.
 
 The following AWS managed policies, which you can attach to users in your account, are specific to AWS Lambda and are grouped by use case scenario:
+
 + **AWSLambdaReadOnlyAccess** – Grants read\-only access to AWS Lambda resources\. Note that this policy doesn't grant permission for the `lambda:InvokeFunction` action\. If you want a user to invoke a Lambda function, you can also attach the `AWSLambdaRole` AWS managed policy\.
+
 + **AWSLambdaFullAccess** – Grants full access to AWS Lambda resources\.
+
 + **AWSLambdaRole** – Grants permissions to invoke any Lambda function\. 
 
 **Note**  
@@ -74,7 +82,7 @@ We recommend that you use two browser windows: one to create the user and grant
 
  For examples that show how to create an IAM role that you can use as an execution role for your Lambda function, see [Creating IAM Roles](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create.html) in the *IAM User Guide*\.
 
-**Topics**
+
 + [Step 1: Create an IAM User](#console-permissions-list-functions)
 + [Step 2: Allow a User to List Lambda Functions](#console-permissions-list-functions1)
 + [Step 3: Allow a User to View Details of a Lambda Function](#console-permissions-view-details)
diff --git a/doc_source/access-control-overview.md b/doc_source/access-control-overview.md
index 3355397..5f6d8f4 100644
--- a/doc_source/access-control-overview.md
+++ b/doc_source/access-control-overview.md
@@ -7,7 +7,7 @@ An *account administrator* \(or administrator user\) is a user with administrato
 
 When granting permissions, you decide who is getting the permissions, the resources they get permissions for, and the specific actions that you want to allow on those resources\.
 
-**Topics**
+
 + [AWS Lambda Resources and Operations](#access-control-resources)
 + [Understanding Resource Ownership](#access-control-resource-ownership)
 + [Managing Access to Resources](#access-control-manage-access-intro)
@@ -16,7 +16,7 @@ When granting permissions, you decide who is getting the permissions, the resour
 
 ## AWS Lambda Resources and Operations<a name="access-control-resources"></a>
 
- In AWS Lambda, the primary resources are a Lambda *function* and an *event source mapping*\. You create an event source mapping in the AWS Lambda pull model to associate a Lambda function with an event source\. For more information, see [Event Source Mapping](invocation-options.md#intro-invocation-modes)\.
+ In AWS Lambda, the primary resources are a Lambda *function* and an *event source mapping*\. You create an event source mapping in the AWS Lambda pull model to associate a Lambda function with an event source\. For more information, see [Event Source Mapping](java-invocation-options.md#intro-invocation-modes)\.
 
 AWS Lambda also supports additional resource types, *alias* and *version*\. However, you can create aliases and versions only in the context of an existing Lambda function\. These are referred to as *subresources*\. 
 
@@ -37,8 +37,11 @@ AWS Lambda provides a set of operations to work with the Lambda resources\. For
 ## Understanding Resource Ownership<a name="access-control-resource-ownership"></a>
 
 A *resource owner* is the AWS account that created the resource\. That is, the resource owner is the AWS account of the *principal entity* \(the root account, an IAM user, or an IAM role\) that authenticates the request that creates the resource\. The following examples illustrate how this works:
+
 + If you use the root account credentials of your AWS account to create a Lambda function, your AWS account is the owner of the resource \(in Lambda, the resource is the Lambda function\)\.
+
 + If you create an IAM user in your AWS account and grant permissions to create a Lambda function to that user, the user can create a Lambda function\. However, your AWS account, to which the user belongs, owns the Lambda function resource\.
+
 + If you create an IAM role in your AWS account with permissions to create a Lambda function, anyone who can assume the role can create a Lambda function\. Your AWS account, to which the role belongs, owns the Lambda function resource\. 
 
 ## Managing Access to Resources<a name="access-control-manage-access-intro"></a>
@@ -50,14 +53,16 @@ This section discusses using IAM in the context of AWS Lambda\. It doesn't provi
 
 Policies attached to an IAM identity are referred to as *identity\-based* policies \(IAM polices\) and policies attached to a resource are referred to as *resource\-based* policies\. AWS Lambda supports both identity\-based \(IAM policies\) and resource\-based policies\.
 
-**Topics**
+
 + [Identity\-Based Policies \(IAM Policies\)](#access-control-manage-access-identity-based)
 + [Resource\-Based Policies \(Lambda Function Policies\)](#access-control-manage-access-resource-based)
 
 ### Identity\-Based Policies \(IAM Policies\)<a name="access-control-manage-access-identity-based"></a>
 
 You can attach policies to IAM identities\. For example, you can do the following: 
+
 + **Attach a permissions policy to a user or a group in your account** – An account administrator can use a permissions policy that is associated with a particular user to grant permissions for that user to create a Lambda function\. 
+
 + **Attach a permissions policy to a role \(grant cross\-account permissions\)** – You can attach an identity\-based permissions policy to an IAM role to grant cross\-account permissions\. For example, the administrator in Account A can create a role to grant cross\-account permissions to another AWS account \(for example, Account B\) or an AWS service as follows:
 
   1. Account A administrator creates an IAM role and attaches a permissions policy to the role that grants permissions on resources in Account A\.
@@ -93,7 +98,7 @@ For more information about using identity\-based policies with Lambda, see [Usin
 Each Lambda function can have resource\-based permissions policies associated with it\. For Lambda, a Lambda function is the primary resource and these policies are referred to as *Lambda function policies*\. You can use a Lambda function policy to grant cross\-account permissions as an alternative to using identity\-based policies with IAM roles\. For example, you can grant Amazon S3 permissions to invoke your Lambda function by simply adding permissions to the Lambda function policy instead of creating an IAM role\.
 
 **Important**  
-Lambda function policies are primarily used when you are setting up an event source in AWS Lambda to grant a service or an event source permissions to invoke your Lambda function \(see [Invoke](API_Invoke.md)\)\. An exception to this is when an event source \(for example, Amazon DynamoDB or Kinesis\) uses the pull model, where permissions are managed in the Lambda function execution role instead\. For more information, see [Event Source Mapping](invocation-options.md#intro-invocation-modes)\.
+Lambda function policies are primarily used when you are setting up an event source in AWS Lambda to grant a service or an event source permissions to invoke your Lambda function \(see [Invoke](API_Invoke.md)\)\. An exception to this is when an event source \(for example, Amazon DynamoDB or Kinesis\) uses the pull model, where permissions are managed in the Lambda function execution role instead\. For more information, see [Event Source Mapping](java-invocation-options.md#intro-invocation-modes)\.
 
 The following is an example Lambda function policy that has one statement\. The statement allows the Amazon S3 service principal permission for the `lambda:InvokeFunction` action on a Lambda function called HelloWorld\. The condition ensures that the bucket where the event occurred is owned by the same account that owns the Lambda function\.
 
@@ -131,9 +136,13 @@ For more information about using resource\-based policies with Lambda, see [Usin
 For each AWS Lambda resource \(see [AWS Lambda Resources and Operations](#access-control-resources)\), the service defines a set of API operations \(see [Actions](API_Operations.md)\)\. To grant permissions for these API operations, Lambda defines a set of actions that you can specify in a policy\. Note that, performing an API operation can require permissions for more than one action\. When granting permissions for specific actions, you also identify the resource on which the actions are allowed or denied\.
 
 The following are the most basic policy elements:
+
 + **Resource** – In a policy, you use an Amazon Resource Name \(ARN\) to identify the resource to which the policy applies\. For more information, see [AWS Lambda Resources and Operations](#access-control-resources)\. 
+
 + **Action** – You use action keywords to identify resource operations that you want to allow or deny\. For example, the `lambda:InvokeFunction` permission allows the user permissions to perform the AWS Lambda `Invoke` operation\. 
+
 + **Effect** – You specify the effect when the user requests the specific action—this can be either allow or deny\. If you don't explicitly grant access to \(allow\) a resource, access is implicitly denied\. You can also explicitly deny access to a resource, which you might do to make sure that a user cannot access it, even if a different policy grants access\.
+
 + **Principal** – In identity\-based policies \(IAM policies\), the user that the policy is attached to is the implicit principal\. For resource\-based policies, you specify the user, account, service, or other entity that you want to receive permissions \(applies to resource\-based policies only\)\. 
 
 To learn more about IAM policy syntax and descriptions, see [AWS IAM Policy Reference](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html) in the *IAM User Guide*\.
diff --git a/doc_source/access-control-resource-based.md b/doc_source/access-control-resource-based.md
index b515e2c..cb01d54 100644
--- a/doc_source/access-control-resource-based.md
+++ b/doc_source/access-control-resource-based.md
@@ -5,7 +5,7 @@ A Lambda function is one of the resources in AWS Lambda\. You can add permission
 **Important**  
 Before you create resource\-based policies, we recommend that you first review the introductory topics that explain the basic concepts and options available for you to manage access to your AWS Lambda resources\. For more information, see [Overview of Managing Access Permissions to Your AWS Lambda Resources](access-control-overview.md)\.
 
-Lambda function policies are primarily used when you are setting up an event source in AWS Lambda to grant a service or an event source permissions to invoke your Lambda function \(see [Invoke](API_Invoke.md)\)\. An exception to this is when an event source \(for example, Amazon DynamoDB or Kinesis\) uses the pull model, where permissions are managed in the Lambda function execution role instead\. For more information, see [Event Source Mapping](invocation-options.md#intro-invocation-modes)\. 
+Lambda function policies are primarily used when you are setting up an event source in AWS Lambda to grant a service or an event source permissions to invoke your Lambda function \(see [Invoke](API_Invoke.md)\)\. An exception to this is when an event source \(for example, Amazon DynamoDB or Kinesis\) uses the pull model, where permissions are managed in the Lambda function execution role instead\. For more information, see [Event Source Mapping](java-invocation-options.md#intro-invocation-modes)\. 
 
 Lambda function policies also make it easy to grant cross\-account permissions to invoke your Lambda function\. Suppose you want to grant cross\-account permissions \(for example, permissions to Amazon S3\) to invoke your Lambda function\. Instead of creating an IAM role to grant cross\-account permissions, you can add the relevant permissions in a Lambda function policy\. 
 
@@ -13,8 +13,11 @@ Lambda function policies also make it easy to grant cross\-account permissions t
 If the custom application and the Lambda function it invokes belong to the same AWS account, you don't need to grant explicit permissions using the policy attached to the Lambda function\.
 
  AWS Lambda provides the following API operations to manage a permissions policy associated with a Lambda function:
+
 + [AddPermission](API_AddPermission.md)
+
 + [GetPolicy](API_GetPolicy.md)
+
 + [RemovePermission](API_RemovePermission.md)
 
 **Note**  
@@ -22,7 +25,7 @@ The AWS Lambda console is the easiest way to manage event sources and their perm
 
 You can use the console to view your function policy by choosing the **Triggers** tab on your function's details page and then choosing **View function policy**\. The console doesn't support directly modifying permissions in a function policy\. You must use either the AWS CLI or the AWS SDKs\. The following are AWS CLI examples of the API operations listed earlier in this topic:
 
-**Topics**
+
 + [Example 1: Allow Amazon S3 to Invoke a Lambda Function](#access-control-resource-based-example-s3-invoke-function)
 + [Example 2: Allow Amazon API Gateway to Invoke a Lambda Function](#access-control-resource-based-example-apigateway-invoke-function)
 + [Example 3: Allow a User Application Created by Another AWS Account to Invoke a Lambda Function \(Cross\-Account Scenario\)](#access-control-resource-based-example-cross-account-scenario)
@@ -33,11 +36,15 @@ You can use the console to view your function policy by choosing the **Triggers*
 ## Example 1: Allow Amazon S3 to Invoke a Lambda Function<a name="access-control-resource-based-example-s3-invoke-function"></a>
 
 To grant Amazon S3 permission to invoke a Lambda function, you configure permissions as follows:
+
 + Specify `s3.amazonaws.com` as the `principal` value\.
+
 + Specify `lambda:InvokeFunction` as the `action` for which you are granting permissions\.
 
 To ensure that the event is generated from a specific bucket that is owned by a specific AWS account, you also specify the following:
+
 + Specify the bucket ARN as the `source-arn` value to restrict events from a specific bucket\.
+
 + Specify the AWS account ID that owns the bucket, to ensure that the named bucket is owned by the account\.
 
 The following example AWS CLI command adds a permission to the `helloworld` Lambda function policy granting Amazon S3 permissions to invoke the function\. 
@@ -69,13 +76,16 @@ In response, AWS Lambda returns the following JSON code\. The `Statement` value
 }
 ```
 
-For information about the push model, see [Event Source Mapping](invocation-options.md#intro-invocation-modes)\.
+For information about the push model, see [Event Source Mapping](java-invocation-options.md#intro-invocation-modes)\.
 
 ## Example 2: Allow Amazon API Gateway to Invoke a Lambda Function<a name="access-control-resource-based-example-apigateway-invoke-function"></a>
 
 To grant permissions to allow Amazon API Gateway to invoke a Lambda function, do the following:
+
 + Specify `apigateway.amazonaws.com` as the `principal` value\.
+
 + Specify `lambda:InvokeFunction` as the action for which you are granting permissions\.
+
 + Specify the API Gateway endpoint ARN as the `source-arn` value\.
 
 The following example AWS CLI command adds a permission to the `helloworld` Lambda function policy granting API Gateway permissions to invoke the function\. 
diff --git a/doc_source/admin-lambda-apps.md b/doc_source/admin-lambda-apps.md
index 89a80a7..c96991a 100644
--- a/doc_source/admin-lambda-apps.md
+++ b/doc_source/admin-lambda-apps.md
@@ -3,7 +3,11 @@
 AWS Lambda integrates with many of the administration tools that AWS offers, including AWS tagging, AWS CloudTrail, and AWS IAM\. The sections below offer guidance on how to manage your Lambda\-based applications, including organizing your Lambda based applications using tags, auditing activity on your AWS using CloudTrail, and introduce you to the AWS Security Model for how to secure your Lambda\-based applications\. We also discuss an administration task unique to AWS Lambda, which is managing the concurrent execution behavior of a Lambda function\.
 
 The sections below offer guidance on how to organize and track your Lambda function invocations and introduce you to the AWS Security Model for how to secure your Lambda\-based applications:
+
 + [Tagging Lambda Functions](tagging.md)
+
 + [Logging AWS Lambda API Calls By Using AWS CloudTrail](logging-using-cloudtrail.md)
+
 + [Authentication and Access Control for AWS Lambda](lambda-auth-and-access-control.md)
+
 + [Managing Concurrency](concurrent-executions.md)
\ No newline at end of file
diff --git a/doc_source/advanced.md b/doc_source/advanced.md
index 3981a46..21e0b88 100644
--- a/doc_source/advanced.md
+++ b/doc_source/advanced.md
@@ -1,6 +1,9 @@
 # Advanced Topics<a name="advanced"></a>
 
 The sections below offer guidance on advanced features and guidance in building your Lambda applications\. They include:
+
 + [Environment Variables](env_variables.md)
+
 + [Dead Letter Queues](dlq.md)
+
 + [Best Practices for Working with AWS Lambda Functions](best-practices.md)
\ No newline at end of file
diff --git a/doc_source/aliases-intro.md b/doc_source/aliases-intro.md
index 402623b..3812a65 100644
--- a/doc_source/aliases-intro.md
+++ b/doc_source/aliases-intro.md
@@ -5,11 +5,13 @@ You can create one or more aliases for your Lambda function\. An* AWS Lambda ali
 By using aliases, you can access the Lambda function an alias is pointing to \(for example, to invoke the function\) without the caller having to know the specific version the alias is pointing to\.
 
 AWS Lambda aliases enable the following use cases:
+
 + **Easier support for promotion of new versions of Lambda functions and rollback when needed** – After initially creating a Lambda function \(the `$LATEST` version\), you can publish a version 1 of it\. By creating an alias named PROD that points to version 1, you can now use the PROD alias to invoke version 1 of the Lambda function\. 
 
   Now, you can update the code \(the `$LATEST` version\) with all of your improvements, and then publish another stable and improved version \(version 2\)\. You can promote version 2 to production by remapping the PROD alias so that it points to version 2\. If you find something wrong, you can easily roll back the production version to version 1 by remapping the PROD alias so that it points to version 1\.
 **Note**  
 In this context, the terms *promotion* and *roll back* refer to the remapping of aliases to different function versions\.
+
 + **Simplify management of event source mappings** – Instead of using Amazon Resource Names \(ARNs\) for Lambda function in event source mappings, you can use an alias ARN\. This approach means that you don't need to update your event source mappings when you promote a new version or roll back to a previous version\. 
 
 An AWS Lambda alias is a resource similar to a Lambda function\. However, you can't create an alias independently\. You create an alias for an existing Lambda function\. If a Lambda function is a resource, you can think of an AWS Lambda alias as a subresource that is associated with a Lambda function\. 
@@ -19,11 +21,13 @@ Both the Lambda function and alias are AWS Lambda resources, and like all other
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/alias_intro_2_10.png)
 
 You can access the function using either the function ARN or the alias ARN\.
+
 + Because the function version for an unqualified function always maps to `$LATEST`, you can access it using the qualified or unqualified function ARN\. The following shows a qualified function ARN with the `$LATEST` version suffix\.
 
   ```
   arn:aws:lambda:aws-region:acct-id:function:helloworld:$LATEST
   ```
+
 + When using any of the alias ARNs, you are using a qualified ARN\. Each alias ARN has an alias name suffix\.
 
   ```
@@ -33,10 +37,15 @@ You can access the function using either the function ARN or the alias ARN\.
   ```
 
 AWS Lambda provides the following API operations for you to create and manages aliases:
+
 + [CreateAlias](API_CreateAlias.md)
+
 + [UpdateAlias](API_UpdateAlias.md)
+
 + [GetAlias](API_GetAlias.md)
+
 + [ListAliases](API_ListAliases.md)
+
 + [DeleteAlias](API_DeleteAlias.md)
 
 ## Example: Using Aliases to Manage Lambda Function Versions<a name="aliases-intro-example"></a>
diff --git a/doc_source/automating-deployment.md b/doc_source/automating-deployment.md
index b57f901..9277849 100644
--- a/doc_source/automating-deployment.md
+++ b/doc_source/automating-deployment.md
@@ -1,9 +1,13 @@
 # Automating Deployment of Lambda\-based Applications<a name="automating-deployment"></a>
 
  In the previous section, you learned how to create a SAM template, generate your deployment package, and use the AWS CLI to manually deploy your serverless application\. In this section, you will leverage the following AWS services to fully automate the deployment process\.
+
 + **CodePipeline**: You use CodePipeline to model, visualize, and automate the steps required to release your serverless application\. For more information, see [What is AWS CodePipeline?](http://docs.aws.amazon.com/codepipeline/latest/APIReference/)
+
 + **CodeBuild**: You use CodeBuild to build, locally test, and package your serverless application\. For more information, see [What is AWS CodeBuild?](http://docs.aws.amazon.com/codebuild/latest/userguide/)
+
 + **AWS CloudFormation**: You use AWS CloudFormation to deploy your application\. For more information, see [What is AWS CloudFormation?](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/)
+
 + **CodeDeploy**: You use [AWS CodeDeploy](https://docs.aws.amazon.com/codedeploy/latest/userguide/welcome.html) to gradually deploy updates to your serverless applications\. For more information on how to do this, see [Gradual Code Deployment](automating-updates-to-serverless-apps.md)\.
 
 The sections below demonstrate how to incorporate all these tools to incorporate your serverless applications\.
diff --git a/doc_source/automating-updates-to-serverless-apps.md b/doc_source/automating-updates-to-serverless-apps.md
index ea500da..86129ce 100644
--- a/doc_source/automating-updates-to-serverless-apps.md
+++ b/doc_source/automating-updates-to-serverless-apps.md
@@ -1,9 +1,13 @@
 # Gradual Code Deployment<a name="automating-updates-to-serverless-apps"></a>
 
 If you use AWS SAM to create your serverless application, it comes built\-in with [AWS CodeDeploy](https://docs.aws.amazon.com/codedeploy/latest/userguide/welcome.html) for safe Lambda deployments\. With just a few lines of configuration, SAM will do the following for you:
+
 + Deploy new versions of your Lambda function and automatically create aliases that point to the new version\. 
+
 + Gradually shift customer traffic to the new version until you are satisfied it is working as expected or roll back the update\. 
+
 + Define pre\-traffic and post\-traffic test functions to verify the newly deployed code is configured correctly and your application operates as expected\. 
+
 + Roll back the deployment if CloudWatch alarms are triggered\. 
 
 This can all be done by updating your SAM template\. The example below demonstrates a simple version of using Code Deploy to gradually shift customers to your newly deployed version:
@@ -32,20 +36,32 @@ Resources:
 ```
 
 The above revisions to a SAM template do the following:
+
 + **AutoPublishAlias** \- By adding this property and specifying an alias name, AWS SAM will do the following:
+
   + Detect when new code is being deployed based on changes to the Lambda function's Amazon S3 URI\.
+
   + Create and publish an updated version of that function with the latest code\.
+
   + Create an alias with a name you provide \(unless an alias already exists\) and points to the updated version of the Lambda function\. Function invocations should use the alias qualifier to take advantage of this\. If you are not familiar with Lambda function versioning and aliases, see [AWS Lambda Function Versioning and Aliases](versioning-aliases.md)\.
+
 + **Deployment Preference Type** \- In the above example, 10 percent of your customer traffic will be immediately shifted to your new version and after 10 minutes all traffic will be shifted to the new version\. However, if either your pre\- and post hook tests fail or a CloudWatch alarm is triggered, CodeDeploy will roll back your deployment\. The table below outlines other traffic\-shifting options available beyond the one used above\. Note the following: 
+
   + **Canary:** Traffic is shifted in two increments\. You can choose from predefined canary options that specify the percentage of traffic shifted to your updated Lambda function version in the first increment and the interval, in minutes, before the remaining traffic is shifted in the second increment\. 
+
   + **Linear:** Traffic is shifted in equal increments with an equal number of minutes between each increment\. You can choose from predefined linear options that specify the percentage of traffic shifted in each incremement and the number of minutes between each increment\. 
+
   + ** All\-at\-once:** All traffic is shifted from the original Lambda function to the updated Lambda function version at once\. 
 
         
 [\[See the AWS documentation website for more details\]](http://docs.aws.amazon.com/lambda/latest/dg/automating-updates-to-serverless-apps.html)
+
 + **Alarms** \- CloudWatch alarms that will be triggered by any errors raised by the deployment and automatically roll back your deployment\. For instance, if the updated code you are deploying is creating errors within the application or any [AWS Lambda](https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions-metrics.html) or custom CloudWatch metrics you have specified have breached the alarm threshold\.
+
 + **Hooks** \- Pre\-traffic and Post\-traffic test functions that run sanity checks before traffic\-shifting starts to the new version and after traffic\-shifting completes\. 
+
   + **PreTraffic:** Before traffic shifting starts, CodeDeploy will invoke the pre\-traffic hook Lambda function\. This Lambda function must call back to CodeDeploy denoting success or failure\. On failure, it will abort and report a failure back to AWS CloudFormation\. On success, CodeDeploy will proceed to traffic shifting\.
+
   + **PostTraffic:** After traffic shifting completes, CodeDeploy will invoke the post\-traffic hook Lambda function\. This is similar to pre\-traffic hook, where the function must call back to CodeDeploy to report a success or failure\. Use post\-traffic hooks to run integration tests or other validation actions\.
 
   For more information, see [SAM Reference to Safe Deployments](https://github.com/awslabs/serverless-application-model/blob/master/docs/safe_lambda_deployments.rst)\. 
\ No newline at end of file
diff --git a/doc_source/aws-lambda-kinesis-firehose-blueprints.md b/doc_source/aws-lambda-kinesis-firehose-blueprints.md
deleted file mode 100644
index 1cb93b4..0000000
--- a/doc_source/aws-lambda-kinesis-firehose-blueprints.md
+++ /dev/null
@@ -1,7 +0,0 @@
-# Amazon Kinesis Firehose<a name="aws-lambda-kinesis-firehose-blueprints"></a>
-
-
-| Blueprint name | Use Case | Sample Runtime Code | Related AWS Services | 
-| --- | --- | --- | --- | 
-| [Kinesis Firehose Syslog to JSON](https://console.aws.amazon.com/lambda/home?region=us-east-1#/create/new?bp=kinesis-firehose-syslog-to-json) |  Converts input records from SYSlog format to JSON\.  |  Node\.js  |  [Kinesis Firehose](http://docs.aws.amazon.com/firehose/latest/dev/)  | 
-| [Kinesis Firehose Aachelog To JSON to Python](https://console.aws.amazon.com/lambda/home?region=us-east-1#/create/new?bp=kinesis-firehose-apachelog-to-json-python) |  Converts input records from Apache Commong log format to JSON\.  |  Node\.js  |  [Kinesis Firehose](http://docs.aws.amazon.com/firehose/latest/dev/)  | 
\ No newline at end of file
diff --git a/doc_source/best-practices.md b/doc_source/best-practices.md
index 1db15d8..4a9a23c 100644
--- a/doc_source/best-practices.md
+++ b/doc_source/best-practices.md
@@ -2,7 +2,7 @@
 
 The following are recommended best practices for using AWS Lambda:
 
-**Topics**
+
 + [Function Code](#function-code)
 + [Function Configuration](#function-configuration)
 + [Alarming and Metrics](#alarming-metrics)
@@ -11,6 +11,7 @@ The following are recommended best practices for using AWS Lambda:
 + [Lambda VPC](#lambda-vpc)
 
 ## Function Code<a name="function-code"></a>
+
 + **Separate the Lambda handler \(entry point\) from your core logic\.** This allows you to make a more unit\-testable function\. In Node\.js this may look like: 
 
   ```
@@ -26,15 +27,23 @@ The following are recommended best practices for using AWS Lambda:
   	// MyLambdaFunction logic here
   }
   ```
+
 + **Take advantage of Execution Context reuse to improve the performance of your function\. ** Make sure any externalized configuration or dependencies that your code retrieves are stored and referenced locally after initial execution\. Limit the re\-initialization of variables/objects on every invocation\. Instead use static initialization/constructor, global/static variables and singletons\. Keep alive and reuse connections \(HTTP, database, etc\.\) that were established during a previous invocation\. 
+
 + **Use [Environment Variables](env_variables.md) to pass operational parameters to your function\.** For example, if you are writing to an Amazon S3 bucket, instead of hard\-coding the bucket name you are writing to, configure the bucket name as an environment variable\. 
+
 + **Control the dependencies in your function's deployment package\. ** The AWS Lambda execution environment contains a number of libraries such the AWS SDK for the Node\.js and Python runtimes \(a full list can be found here: [Lambda Execution Environment and Available Libraries](current-supported-versions.md)\)\. To enable the latest set of features and security updates, Lambda will periodically update these libraries\. These updates may introduce subtle changes to the behavior of your Lambda function\. To have full control of the dependencies your function uses, we recommend packaging all your dependencies with your deployment package\. 
+
 + **Minimize your deployment package size to its runtime necessities\. ** This will reduce the amount of time that it takes for your deployment package to be downloaded and unpacked ahead of invocation\. For functions authored in Java or \.NET Core, avoid uploading the entire AWS SDK library as part of your deployment package\. Instead, selectively depend on the modules which pick up components of the SDK you need \(e\.g\. DynamoDB, Amazon S3 SDK modules and [Lambda core libraries](https://github.com/aws/aws-lambda-java-libs)\)\. 
+
 + **Reduce the time it takes Lambda to unpack deployment packages** authored in Java by putting your dependency `.jar` files in a separate /lib directory\. This is faster than putting all your function’s code in a single jar with a large number of `.class` files\. 
+
 + **Minimize the complexity of your dependencies\.** Prefer simpler frameworks that load quickly on [Execution Context](http://docs.aws.amazon.com/lambda/latest/dg/running-lambda-code.html) startup\. For example, prefer simpler Java dependency injection \(IoC\) frameworks like [Dagger](http://square.github.io/dagger/) or [Guice](https://github.com/google/guice), over more complex ones like [Spring Framework](https://github.com/spring-projects/spring-framework)\. 
+
 + **Avoid using recursive code** in your Lambda function, wherein the function automatically calls itself until some arbitrary criteria is met\. This could lead to unintended volume of function invocations and escalated costs\. If you do accidentally do so, set the function concurrent execution limit to `0` immediately to throttle all invocations to the function, while you update the code\.
 
 ## Function Configuration<a name="function-configuration"></a>
+
 + **Performance testing your Lambda function** is a crucial part in ensuring you pick the optimum memory size configuration\. Any increase in memory size triggers an equivalent increase in CPU availabile to your function\. The memory usage for your function is determined per\-invoke and can be viewed in [AWS CloudWatch Logs](http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatchLogs.html)\. On each invoke a `REPORT:` entry will be made, as shown below: 
 
   ```
@@ -42,30 +51,46 @@ The following are recommended best practices for using AWS Lambda:
   ```
 
   By analyzing the `Max Memory Used:` field, you can determine if your function needs more memory or if you over\-provisioned your function's memory size\. 
+
 + **Load test your Lambda function** to determine an optimum timeout value\. It is important to analyze how long your function runs so that you can better determine any problems with a dependency service that may increase the concurrency of the function beyond what you expect\. This is especially important when your Lambda function makes network calls to resources that may not handle Lambda's scaling\. 
+
 + **Use most\-restrictive permissions when setting IAM policies\.** Understand the resources and operations your Lambda function needs, and limit the execution role to these permissions\. For more information, see [Authentication and Access Control for AWS Lambda](lambda-auth-and-access-control.md)\. 
+
 + **Be familiar with [AWS Lambda Limits](limits.md)\.** Payload size, file descriptors and /tmp space are often overlooked when determining runtime resource limits\. 
+
 + **Delete Lambda functions that you are no longer using\.** By doing so, the unused functions won't needlessly count against your deployment package size limit\.
 
 ## Alarming and Metrics<a name="alarming-metrics"></a>
+
 + **Use [AWS Lambda Metrics](monitoring-functions-metrics.md) and [ CloudWatch Alarms](http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html)** instead of creating or updating a metric from within your Lambda function code\. It's a much more efficient way to track the health of your Lambda functions, allowing you to catch issues early in the development process\. For instance, you can configure an alarm based on the expected duration of your Lambda function exectuion time in order to address any bottlenecks or latencies attributable to your function code\.
+
 + **Leverage your logging library and [AWS Lambda Metrics and Dimensions](http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/lam-metricscollected.html)** to catch app errors \(e\.g\. ERR, ERROR, WARNING, etc\.\) 
 
 ## Stream Event Invokes<a name="stream-events"></a>
+
 + **Test with different batch and record sizes **so that the polling frequency of each event source is tuned to how quickly your function is able to complete its task\. [BatchSize ](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateEventSourceMapping.html#SSS-CreateEventSourceMapping-request-BatchSize)controls the maximum number of records that can be sent to your function with each invoke\. A larger batch size can often more efficiently absorb the invoke overhead across a larger set of records, increasing your throughput\.
 **Note**  
 When there are not enough records to process, instead of waiting, the stream processing function will be invoked with a smaller number of records\.
+
 + **Increase Kinesis stream processing throughput by adding shards\.** A Kinesis stream is composed of one or more shards\. Lambda will poll each shard with at most one concurrent invocation\. For example, if your stream has 100 active shards, there will be at most 100 Lambda function invocations running concurrently\. Increasing the number of shards will directly increase the number of maximum concurrent Lambda function invocations and can increase your Kinesis stream processing throughput\. If you are increasing the number of shards in a Kinesis stream, make sure you have picked a good partition key \(see [Partition Keys](http://docs.aws.amazon.com/streams/latest/dev/key-concepts.html#partition-key)\) for your data, so that related records end up on the same shards and your data is well distributed\. 
+
 + **Use [Amazon CloudWatch](http://docs.aws.amazon.com/streams/latest/dev/monitoring-with-cloudwatch.html)** on IteratorAge to determine if your Kinesis stream is being processed\. For example, configure a CloudWatch alarm with a maximum setting to 300000 \(30 seconds\)\.
 
 ## Async Invokes<a name="async-invoke"></a>
+
 + **Create and use [Dead Letter Queues](dlq.md) **to address and replay async function errors\. 
 
 ## Lambda VPC<a name="lambda-vpc"></a>
+
 + The following diagram guides you through a decision tree as to whether you should use a VPC \(Virtual Private Cloud\):   
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/VPC-flowchart4.png)
+
 + **Don't put your Lambda function in a VPC unless you have to\.** There is no benefit outside of using this to access resources you cannot expose publicly, like a private [Amazon Relational Database](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/) instance\. Services like Amazon Elasticsearch Service can be secured over IAM with access policies, so exposing the endpoint publicly is safe and wouldn't require you to run your function in the VPC to secure it\. 
+
 + **Lambda creates elastic network interfaces [\(ENIs\)](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ElasticNetworkInterfaces.html)** in your VPC to access your internal resources\. Before requesting a concurrency increase, ensure you have enough ENI capacity \(the formula for this can be found here: [Configuring a Lambda Function to Access Resources in an Amazon VPC](vpc.md)\) and IP address space\. If you do not have enough ENI capacity, you will need to request an increase\. If you do not have enough IP address space, you may need to create a larger subnet\. 
+
 + **Create dedicated Lambda subnets in your VPC: **
+
   + This will make it easier to apply a custom route table for NAT Gateway traffic without changing your other private/public subnets\. For more information, see [Configuring a Lambda Function to Access Resources in an Amazon VPC](vpc.md)
+
   + This also allows you to dedicate an address space to Lambda without sharing it with other resources\. 
\ No newline at end of file
diff --git a/doc_source/build-pipeline.md b/doc_source/build-pipeline.md
index 1269408..b17250f 100644
--- a/doc_source/build-pipeline.md
+++ b/doc_source/build-pipeline.md
@@ -1,16 +1,23 @@
 # Building a Pipeline for Your Serverless Application<a name="build-pipeline"></a>
 
  In the following tutorial, you will create an AWS CodePipeline that automates the deployment of your serverless application\.  First, you will need to set up a **source stage** to trigger your pipeline\. For the purposes of this tutorial:
+
 + We will use GitHub\. For instructions on how to create a GitHub repository, see [Create a Repository in GitHub](https://help.github.com/articles/create-a-repo/)\.
+
 + You will need to create an AWS CloudFormation role and add the **AWSLambdaExecute** policy to that role, as outlined below:
 
   1. Sign in to the AWS Management Console and open the IAM console at [https://console\.aws\.amazon\.com/iam/](https://console.aws.amazon.com/iam/)\.
 
   1. Follow the steps in [Creating a Role to Delegate Permissions to an AWS Service](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-service.html) in the *IAM User Guide* to create an IAM role \(execution role\) and go to the **To create a role for an AWS service** section\. As you follow the steps to create a role, note the following:
+
      + In **Select Role Type**, choose **AWS Service Roles**, and then choose **CloudFormation**\. Choose **Next: Permissions**\.
+
      + In **Attach permissions policies**, use the search bar to find and then choose **AWSLambdaExecute**\. Choose **Next: Review**\. 
+
      + In **Role Name**, use a name that is unique within your AWS account \(for example, **cloudformation\-lambda\-execution\-role**\) and then choose **Create role**\. 
+
      + Open the role you just created and under the **Permissions** tab, choose **Add inline policy**\. 
+
      + In **Create Policy** choose the **JSON** tab and enter the following: 
 **Note**  
 Make sure to replace the *region* and *id* placeholders with your region and account id\.
@@ -130,6 +137,7 @@ Make sure to replace the *region* and *id* placeholders with your region and acc
        	"Version": "2012-10-17"
        }
        ```
+
      + Choose **Validate Policy** and then choose **Apply Policy**\. 
 
 ## Step 1: Set Up Your Repository<a name="setup-repository"></a>
@@ -137,6 +145,7 @@ Make sure to replace the *region* and *id* placeholders with your region and acc
 You can use any of the Lambda supported runtimes when setting up a repository\. The following example uses Node\.js\.
 
 To set up your repository, do the following:
+
 + Add an *index\.js file* containing the code following:
 
   ```
@@ -150,6 +159,7 @@ To set up your repository, do the following:
       });
   };
   ```
+
 + Add a *samTemplate\.yaml* file, containing the content following\. This is the SAM template that defines the resources in your application\. This SAM template defines a Lambda function that is triggered by API Gateway\. Note that the `runtime` parameter uses `nodejs6.10` but you can also specify `nodejs4.3`\. For more information about AWS SAM see [AWS Serverless Application Model](https://github.com/awslabs/serverless-application-model)\.
 
   ```
@@ -170,8 +180,11 @@ To set up your repository, do the following:
               Path: /TimeResource
               Method: GET
   ```
+
 + Add a *buildspec\.yml* file\. A build spec is a collection of build commands and related settings, in YAML format, that AWS CodeBuild uses to run a build\. For more information, see [Build Specification Reference for AWS CodeBuild](http://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html)\. In this example, the build action will be:
+
   + Use [npm](https://www.npmjs.com/) to install the time package\.
+
   + Run the `Package` command to prepare your deployment package for subsequent deployment steps in your pipeline\. For more information on the package command, see [Uploading Local Artifacts to an S3 Bucket](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-cli-package.html)
 
     ```
@@ -181,12 +194,11 @@ To set up your repository, do the following:
         commands:
           - npm install time
           - aws cloudformation package --template-file samTemplate.yaml --s3-bucket bucket-name 
-                                       --output-template-file outputSamTemplate.yaml
+                                       --output-template-file NewSamTemplate.yaml
     artifacts:
       type: zip
       files:
         - samTemplate.yaml
-        - outputSamTemplate.yaml
     ```
 
     Note that you need to supply the `--s3-bucket` parameter value with the name of the your Amazon S3 bucket, similar to the step you would take if you were manually going to package the deployment package with SAM, as discussed in the [Packaging](serverless-deploy-wt.md#serverless-pack) step of the previous tutorial\.
@@ -235,7 +247,7 @@ A service role for AWS CodeBuild will automatically be created on your behalf\.
 
 1. In **Change set name:** enter **MyChangeSet**\.
 
-1. In **Template file:** enter **outputSamTemplate\.yaml**\.
+1. In **Template file:** enter **samTemplate\.yaml**\.
 
 1. In **Capabilities:** choose **CAPABILITY\_IAM**\.
 
@@ -303,7 +315,9 @@ Use the following steps to complete your Beta stage\.
 1. Choose **Save and continue**\.
 
  Your pipeline is ready\. Any git push to the branch you connected to this pipeline is going to trigger a deployment\. To test your pipeline and deploy your application for the first time, do one of the following: 
+
 + Perform a git push to the branch connected to your pipeline\.
+
 + Go the AWS CodePipeline console, choose the name of the pipeline you created and then choose **Release change**\. 
 
 ## Next Step<a name="automating-deployment-next-step1"></a>
diff --git a/doc_source/code-editor.md b/doc_source/code-editor.md
index 32cce7f..0173dd9 100644
--- a/doc_source/code-editor.md
+++ b/doc_source/code-editor.md
@@ -29,8 +29,11 @@ You can use the **Environment** window in the code editor to create, open, and m
 **To open multiple files and show their contents in the editor pane**, choose the files in the **Environment** window\. Right\-click the selection, and then choose **Open**\.
 
 **To create a new file**, do one of the following:
+
 + In the **Environment** window, right\-click the folder where you want the new file to go, and then choose **New File**\. Type the file's name and extension, and then press Enter\.
+
 + Choose **File, New File** on the menu bar\. When you're ready to save the file, choose **File, Save** or **File, Save As** on the menu bar\. Then use the **Save As** dialog box that displays to name the file and choose where to save it\.
+
 + In the tab buttons bar in the editor pane, choose the **\+** button, and then choose **New File**\. When you're ready to save the file, choose **File, Save** or **File, Save As** on the menu bar\. Then use the **Save As** dialog box that displays to name the file and choose where to save it\.  
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/code-editor/code-editor-env-new.png)![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/)![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/)
 
@@ -65,12 +68,16 @@ Use the *tab buttons bar* to select, view, and create files\.
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/code-editor/code-editor-tab-buttons-bar.png)![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/)![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/)
 
 **To display an open file's contents**, do one of the following:
+
 + Choose the file's tab\.
+
 + Choose the drop\-down menu button in the tab buttons bar, and then choose the file's name\.  
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/code-editor/code-editor-drop-down-list.png)![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/)![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/)
 
 **To close an open file**, do one of the following:
+
 + Choose the **X** icon in the file's tab\.
+
 + Choose the file's tab\. Then choose the drop\-down menu button in the tab buttons bar, and choose **Close Pane**\.
 
 **To close multiple open files**, choose the drop\-down menu in the tab buttons bar, and then choose **Close All Tabs in All Panes** or **Close All But Current Tab** as needed\.
@@ -138,7 +145,9 @@ To change code editor settings, choose the **Preferences** gear icon in the menu
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/code-editor/code-editor-menu-bar-preferences.png)![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/)![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/)
 
 For a list of what the settings do, see the following references in the *AWS Cloud9 User Guide*\.
+
 + [Project Setting Changes You Can Make](https://docs.aws.amazon.com/cloud9/latest/user-guide/settings-project.html#settings-project-change)
+
 + [User Setting Changes You Can Make](https://docs.aws.amazon.com/cloud9/latest/user-guide/settings-user.html#settings-user-change)
 
 Note that some of the settings listed in those references are not available in the code editor\.
diff --git a/doc_source/concurrent-executions.md b/doc_source/concurrent-executions.md
index 6ef3193..a67302d 100644
--- a/doc_source/concurrent-executions.md
+++ b/doc_source/concurrent-executions.md
@@ -19,9 +19,13 @@ By default, AWS Lambda limits the total concurrent executions across all functio
 By default, the concurrent execution limit is enforced against the sum of the concurrent executions of all functions\. The shared concurrent execution pool is referred to as the unreserved concurrency allocation\. If you haven’t set up any function\-level concurrency limit, then the unreserved concurrency limit is the same as the account level concurrency limit\. Any increases to the account level limit have a corresponding increase in the unreserved concurrency limit\. You can view the unreserved concurrency allocation for a function by using the [GetAccountSettings](API_GetAccountSettings.md) API or using the AWS Lambda console\. Functions that are being accounted against the shared concurrent execution pool will not show any concurrency value when queried using the [GetFunctionConfiguration](API_GetFunctionConfiguration.md) API\.
 
 You can optionally set the concurrent execution limit for a function\. You may choose to do this for a few reasons:
+
 + The default behavior means a surge of concurrent executions in one function prevents the function you have isolated with an execution limit from getting throttled\. By setting a concurrent execution limit on a function, you are reserving the specified concurrent execution value for that function\.
-+ Functions scale automatically based on incoming request rate, but not all resources in your architecture may be able to do so\. For example, relational databases have limits on how many concurrent connections they can handle\. You can set the concurrent execution limit for a function to align with the values of its downstream resources support\.
+
++ Functions scale automatically based on incoming request rate, but not all resources in your architecture may be able to do so\. For example, relational databases have limits on how many concurrent connections they can handle\. You can set the concurrent execution limit for a function to align with the values its downstream resources support\.
+
 + If your function connects to VPC based resources, each concurrent execution consumes one IP within the assigned subnet\. You can set the concurrent execution limit for a function to match the subnet size limits you have\.
+
 + If you need a function to stop processing any invocations, you can choose to set the concurrency to 0 and throttle all incoming executions\.
 
 By setting a concurrency limit on a function, Lambda guarantees that allocation will be applied specifically to that function, regardless of the amount of traffic processing remaining functions\. If that limit is exceeded, the function will be throttled\. How that function behaves when throttled will depend on the event source\. For more information, see [Throttling Behavior](#throttling-behavior)\.
@@ -49,6 +53,7 @@ To set a concurrency limit for your Lambda function using the Lambda console, do
 ### Setting Concurrency Limits Per Function \(CLI\)<a name="per-function-concurrency-cli"></a>
 
 To set a concurrency limit for your Lambda function using the AWS CLI, do the following:
+
 + Use the [PutFunctionConcurrency](API_PutFunctionConcurrency.md) operation and pass in the function name and concurrency limit you want allocated to this function:
 
   ```
@@ -57,6 +62,7 @@ To set a concurrency limit for your Lambda function using the AWS CLI, do the fo
   ```
 
 To remove a concurrency limit for your Lambda function using the AWS CLI, do the following:
+
 + Use the [DeleteFunctionConcurrency](API_DeleteFunctionConcurrency.md) operation and pass in the function name:
 
   ```
@@ -64,6 +70,7 @@ To remove a concurrency limit for your Lambda function using the AWS CLI, do the
   ```
 
 To view a concurrency limit for your Lambda function using the AWS CLI, do the following:
+
 + Use the [GetFunction](API_GetFunctionConfiguration.md) operation and pass in the function name:
 
   ```
@@ -76,17 +83,23 @@ Setting the per function concurrency can impact the concurrency pool available t
 ## Throttling Behavior<a name="throttling-behavior"></a>
 
 On reaching the concurrency limit associated with a function, any further invocation requests to that function are throttled, i\.e\. the invocation doesn't execute your function\. Each throttled invocation increases the Amazon CloudWatch `Throttles` metric for the function\. AWS Lambda handles throttled invocation requests differently, depending on their source: 
+
 + **Event sources that aren't stream\-based: **Some of these event sources invoke a Lambda function synchronously, and others invoke it asynchronously\. Handling is different for each: 
+
   + **Synchronous invocation:** If the function is invoked synchronously and is throttled, Lambda returns a 429 error and the invoking service is responsible for retries\. The `ThrottledReason` error code explains whether you ran into a function level throttle \(if specified\) or an account level throttle \(see note below\)\. Each service may have its own retry policy\. For example, CloudWatch Logs retries the failed batch up to five times with delays between retries\. For a list of event sources and their invocation type, see [Supported Event Sources](invoking-lambda-function.md)\. 
 **Note**  
 If you invoke the function directly through the AWS SDKs using the `RequestResponse` invocation mode, your client receives the 429 error and you can retry the invocation\. 
+
   + **Asynchronous invocation:** If your Lambda function is invoked asynchronously and is throttled, AWS Lambda automatically retries the throttled event for up to six hours, with delays between retries\. Remember, asynchronous events are queued before they are used to invoke the Lambda function\. 
+
 + **Stream\-based event sources:** For stream\-based event sources \(Kinesis and DynamoDB streams\), AWS Lambda polls your stream and invokes your Lambda function\. When your Lambda function is throttled, Lambda attempts to process the throttled batch of records until the time the data expires\. This time period can be up to seven days for Kinesis\. The throttled request is treated as blocking per shard, and Lambda doesn't read any new records from the shard until the throttled batch of records either expires or succeeds\. If there is more than one shard in the stream, Lambda continues invoking on the non\-throttled shards until one gets through\. 
 
 ## Monitoring Your Concurrency Usage<a name="monitoring-concurrent-usage"></a>
 
 To understand your concurrent execution usage, AWS Lambda provides the following metrics:
+
 + **ConcurrentExecutions:** This shows you the concurrent executions at an account level, and for any function with a custom concurrency limit\.
+
 + **UnreservedConcurrentExecutions:** This shows you the total concurrent executions for functions assigned to the default “unreserved” concurrency pool\.
 
 To learn about these metrics and how to access them, see [Using Amazon CloudWatch](monitoring-functions.md)\. 
\ No newline at end of file
diff --git a/doc_source/console-specific-permissions.md b/doc_source/console-specific-permissions.md
index ebb63a4..c7f9d28 100644
--- a/doc_source/console-specific-permissions.md
+++ b/doc_source/console-specific-permissions.md
@@ -8,7 +8,7 @@ The following sections describe required additional permissions for different in
 
 If you are new to managing permissions, we recommend that you start with the example walkthrough where you create an IAM user, grant the user incremental permissions, and verify the permissions work using the AWS Lambda console \(see [Customer Managed Policy Examples](access-control-identity-based.md#access-policy-examples-for-sdk-cli)\)\. 
 
-**Topics**
+
 + [Amazon API Gateway](#console-permissions-api-gateway)
 + [Amazon CloudWatch Events](#console-permissions-cloudwatch-events)
 + [Amazon CloudWatch Logs](#console-permissions-cloudwatch-logs)
diff --git a/doc_source/create-deployment-pkg-zip-java.md b/doc_source/create-deployment-pkg-zip-java.md
index d28773a..c891e6f 100644
--- a/doc_source/create-deployment-pkg-zip-java.md
+++ b/doc_source/create-deployment-pkg-zip-java.md
@@ -1,7 +1,9 @@
 # Creating a \.zip Deployment Package \(Java\)<a name="create-deployment-pkg-zip-java"></a>
 
 This section provides examples of creating \.zip file as your deployment package\. You can use any build and packaging tool you like to create this zip\. Regardless of the tools you use, the resulting \.zip file must have the following structure:
+
 + All compiled class files and resource files at the root level\. 
+
 + All required jars to run the code in the `/lib` directory\.
 
 **Note**  
diff --git a/doc_source/current-supported-versions.md b/doc_source/current-supported-versions.md
index 9110f04..933ee90 100644
--- a/doc_source/current-supported-versions.md
+++ b/doc_source/current-supported-versions.md
@@ -1,31 +1,39 @@
 # Lambda Execution Environment and Available Libraries<a name="current-supported-versions"></a>
 
 The underlying AWS Lambda execution environment is based on the following:
+
 + Public Amazon Linux AMI version \(AMI name: amzn\-ami\-hvm\-2017\.03\.1\.20170812\-x86\_64\-gp2\) which can be accessed [ here](https://console.aws.amazon.com/ec2/v2/home#Images:visibility=public-images;search=amzn-ami-hvm-2017.03.1.20170812-x86_64-gp2)\.  
 
   For information about using an AMI, see [Amazon Machine Images \(AMI\)](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html) in the *Amazon EC2 User Guide for Linux Instances*\.
+
 +  Linux kernel version – 4\.9\.75\-25\.55\.amzn1\.x86\_64 
 
  If you are using any native binaries in your code, make sure they are compiled in this environment\. Note that only 64\-bit binaries are supported on AWS Lambda\.
 
 AWS Lambda supports the following runtime versions:
-+ Node\.js – v8\.10, 4\.3\.2 and 6\.10\.3
+
++ Node\.js – v4\.3\.2 and 6\.10\.3
+
 + Java – Java 8
+
 + Python – Python 3\.6 and 2\.7
+
 + \.NET Core – \.NET Core 1\.0\.1 and \.NET Core 2\.0
+
 + Go – Go 1\.x
 
 **Note**  
 Not all runtimes are available on the Public Amazon Linux AMI version or its yum repositories\. You may need to download and install them manually from their respective public sites\.
 
 The following libraries are available in the AWS Lambda execution environment, regardless of the supported runtime you use, so you don't need to include them:
-+  AWS SDK – [AWS SDK for JavaScript](http://docs.aws.amazon.com/AWSJavaScriptSDK/guide/) version 2\.205\.0 
-+ AWS SDK for Python 2\.7 \(Boto 3\) version 3\-1\.6\.3 botocore\-1\.9\.3
 
-  AWS SDK for Python 3\.6 \(Boto 3\) version 3\-1\.6\.3 botocore\-1\.9\.3
-+ Amazon Linux build of `java-1.8.0-openjdk` for Java\.
++  AWS SDK – [AWS SDK for JavaScript](http://docs.aws.amazon.com/AWSJavaScriptSDK/guide/) version 2\.176\.0 
+
++ AWS SDK for Python 2\.7 \(Boto 3\) version 3\-1\.5\.8 botocore\-1\.8\.22
 
-For an example of using the `boto` libraries in your Lambda function, see [Accessing Resources from a Lambda Function](accessing-resources.md)\.
+  AWS SDK for Python 3\.6 \(Boto 3\) version 3\-1\.5\.8 botocore\-1\.8\.22
+
++ Amazon Linux build of `java-1.8.0-openjdk` for Java\.
 
 ## Environment Variables Available to Lambda Functions<a name="lambda-environment-variables"></a>
 
diff --git a/doc_source/deploying-lambda-apps.md b/doc_source/deploying-lambda-apps.md
index 9d36788..82ffa4f 100644
--- a/doc_source/deploying-lambda-apps.md
+++ b/doc_source/deploying-lambda-apps.md
@@ -5,15 +5,20 @@
 AWS Lambda provides API operations that you can use to create and update Lambda functions by providing a deployment package as a ZIP file\. However, this mechanism might not be convenient for automating deployment steps for functions, or coordinating deployments and updates to other elements of a serverless application \(like event sources and downstream resources\)\. For example, in order to deploy an Amazon SNS trigger, you need to update the function, the Amazon SNS topic, the mapping between the function and the topic, and any other downstream resources required by your function such as a DynamoDB table\.
 
 You can deploy your serverless applications in the following ways:
+
 + **AWS CLI** \- Using the `aws cloudformation deploy` command\. For more information, see [Deployment](serverless-deploy-wt.md#serv-deploy), which is included in a tutorial on creating a severless application\. For more information, see [Create Your Own Serverless Application](serverless-deploy-wt.md)\. Lambda also offers other AWS CLI operations for you to deploy your serverless applications: 
+
   + [CreateFunction](API_CreateFunction.md)
+
   + [UpdateFunctionConfiguration](API_UpdateFunctionConfiguration.md)
+
 + **AWS CloudFormation** \- You can use AWS CloudFormation to specify, deploy, and configure serverless applications\. AWS CloudFormation is a service that helps you model and set up your AWS resources so that you can spend less time managing those resources and more time focusing on your applications that run in AWS\. You create a template that describes all of the AWS resources that you want \(like Lambda functions and DynamoDB tables\), and AWS CloudFormation takes care of provisioning and configuring those resources for you\. You don't need to individually create and configure AWS resources and figure out what's dependent on what—AWS CloudFormation handles all of that\. For more information, see [AWS CloudFormation Concepts](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-whatis-concepts.html#d0e3897) in the *AWS CloudFormation User Guide*\.
+
 + **AWS SAM** \- AWS SAM supports special resource types that simplify how to express functions, APIs, mappings, and DynamoDB tables for serverless applications, as well as some features for these services like environment variables\. The AWS CloudFormation description of these resources conforms to the [AWS Serverless Application Model](https://github.com/awslabs/serverless-application-model)\. In order to deploy your application, simply specify the resources you need as part of your application, along with their associated permissions policies in an AWS CloudFormation template file \(written in either JSON or YAML\), package your deployment artifacts, and deploy the template\. For more information, see [Using the AWS Serverless Application Model \(AWS SAM\)](serverless_app.md)
 
 Before you learn about the AWS Serverless Model \(AWS SAM\), we suggest you read the following section, which discusses Lambda function versioning, aliases and how to shift traffic to function revisions, which is a pivotal aspect to serverless application development\. For more information, see [AWS Lambda Function Versioning and Aliases](versioning-aliases.md)\.
 
-**Topics**
+
 + [AWS Lambda Function Versioning and Aliases](versioning-aliases.md)
 + [Using the AWS Serverless Application Model \(AWS SAM\)](serverless_app.md)
 + [Automating Deployment of Lambda\-based Applications](automating-deployment.md)
\ No newline at end of file
diff --git a/doc_source/deployment-package-v2.md b/doc_source/deployment-package-v2.md
index 621821a..efed746 100644
--- a/doc_source/deployment-package-v2.md
+++ b/doc_source/deployment-package-v2.md
@@ -1,8 +1,13 @@
 # Creating a Deployment Package<a name="deployment-package-v2"></a>
 
-To create a Lambda function you first create a Lambda function deployment package, a \.zip or \.jar file consisting of your code and any dependencies\. When creating the zip, include only the code and its dependencies, not the containing folder\. You will then need to set the appropriate security permissions for the zip package\. For more information, see [Authentication and Access Control for AWS Lambda](lambda-auth-and-access-control.md) policies\. 
+To create a Lambda function you first create a Lambda function deployment package, a \.zip or \.jar file consisting of your code and any dependencies\. When creating the zip, include only the code and its dependencies, not the containing folder\.
+
 + [Creating a Deployment Package \(Node\.js\)](nodejs-create-deployment-pkg.md)
+
 + [Creating a Deployment Package \(C\#\)](lambda-dotnet-how-to-create-deployment-package.md)
+
 + [Creating a Deployment Package \(Go\)](lambda-go-how-to-create-deployment-package.md)
+
 + [Creating a Deployment Package \(Java\)](lambda-java-how-to-create-deployment-package.md)
+
 + [Creating a Deployment Package \(Python\)](lambda-python-how-to-create-deployment-package.md)
\ No newline at end of file
diff --git a/doc_source/dlq.md b/doc_source/dlq.md
index 459827a..7f25b1b 100644
--- a/doc_source/dlq.md
+++ b/doc_source/dlq.md
@@ -1,10 +1,8 @@
 # Dead Letter Queues<a name="dlq"></a>
 
-Any Lambda function invoked **asynchronously** is retried twice before the event is discarded\. If the retries fail and you're unsure why, use Dead Letter Queues \(DLQ\) to direct unprocessed events to an [Amazon SQS](http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/Welcome.html) queue or an [ Amazon SNS ](lcome.html)topic to analyze the failure\. 
+By default, a failed Lambda function invoked asynchronously is retried twice, and then the event is discarded\. Using Dead Letter Queues \(DLQ\), you can indicate to Lambda that unprocessed events should be sent to an Amazon SQS queue or Amazon SNS topic instead, where you can take further action\. 
 
- AWS Lambda directs events that cannot be processed to the specified [Amazon SNS topic](http://docs.aws.amazon.com/sns/latest/gsg/CreateTopic.html) topic or [Amazon SQS queue](http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-create-queue.html)\. Functions that don't specify a DLQ will discard events after they have exhausted their retries\. For more information about retry policies, see [Understanding Retry Behavior](retries-on-errors.md)\.
-
-You configure a DLQ by specifying the Amazon Resource Name *TargetArn* value on the Lambda function's `DeadLetterConfig` parameter \(whether it's an [Amazon SQS](http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-create-queue.html) queue or an [Amazon SNS](http://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html) topic\)\. 
+You configure a DLQ by specifying a target Amazon Resource Name \(ARN\) on a Lambda function's `DeadLetterConfig` parameter of an Amazon SNS topic or an Amazon SQS queue where you want the event payload delivered, as shown in the following code\. For more information about creating an Amazon SNS topic, see [Create an SNS Topic](http://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html)\. For more information about creating an Amazon SQS queue, see [Tutorial: Creating an Amazon SQS Queue](http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-create-queue.html)\.
 
 ```
 {
@@ -28,7 +26,7 @@ You configure a DLQ by specifying the Amazon Resource Name *TargetArn* value on
 }
 ```
 
- You need to explicitly provide receive/delete/sendMessage access to your DLQ resource as part of the [execution role](intro-permission-model.html) for your Lambda function\. The payload written to the DLQ target ARN is the original event payload with no modifications to the message body\. The attributes of the message, described next, contain information to help you understand why the event wasn’t processed: 
+ Lambda directs events that cannot be processed to the Amazon SNS topic or Amazon SQS queue that you’ve configured for the Lambda function\. Functions without an associated DLQ discard events after they have exhausted their retries\. For more information about retry policies, see [Understanding Retry Behavior](retries-on-errors.md)\. You need to explicitly provide receive/delete/sendMessage access to your DLQ resource as part of the execution role for your Lambda function\. The payload written to the DLQ target ARN is the original event payload with no modifications to the message body\. The attributes of the message, described below, contain information to help you understand why the event wasn’t processed: 
 
 
 | Name | Type | Value | 
@@ -37,6 +35,6 @@ You configure a DLQ by specifying the Amazon Resource Name *TargetArn* value on
 | ErrorCode | Number | 3\-digit HTTP error code | 
 | ErrorMessage | String | Error message \(truncated to 1 KB\)  | 
 
-If the event payload consistently fails to reach the target ARN, AWS Lambda increments a [CloudWatch metric](http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring//viewing_metrics_with_cloudwatch.html) called `DeadLetterErrors` and then deletes the event payload\. 
+If for some reason, the event payload consistently fails to reach the target ARN, Lambda increments a CloudWatch metric called `DeadLetterErrors` and then deletes the event payload\. 
 
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/DLQ.png)
\ No newline at end of file
diff --git a/doc_source/dotnet-context-object.md b/doc_source/dotnet-context-object.md
index ecdfd97..9a32a39 100644
--- a/doc_source/dotnet-context-object.md
+++ b/doc_source/dotnet-context-object.md
@@ -9,16 +9,27 @@ public void Handler(string Input, ILambdaContext context)
 ```
 
 The context object properties are:
+
 + `MemoryLimitInMB`: Memory limit, in MB, you configured for the Lambda function\.
+
 + `FunctionName`: Name of the Lambda function that is running\.
+
 + `FunctionVersion`: The Lambda function version that is executing\. If an alias is used to invoke the function, then `FunctionVersion` will be the version the alias points to\.
+
 + `InvokedFunctionArn`: The ARN used to invoke this function\. It can be function ARN or alias ARN\. An unqualified ARN executes the `$LATEST` version and aliases execute the function version it is pointing to\. 
+
 +  `AwsRequestId`: AWS request ID associated with the request\. This is the ID returned to the client that invoked this Lambda function\. You can use the request ID for any follow up enquiry with AWS support\. Note that if AWS Lambda retries the function \(for example, in a situation where the Lambda function processing Kinesis records throw an exception\), the request ID remains the same\.
+
 + `LogStreamName`: The CloudWatch log stream name for the particular Lambda function execution\. It can be null if the IAM user provided does not have permission for CloudWatch actions\.
+
 + `LogGroupName`: The CloudWatch log group name associated with the Lambda function invoked\. It can be null if the IAM user provided does not have permission for CloudWatch actions\.
+
 + `ClientContext`: Information about the client application and device when invoked through the AWS Mobile SDK\. It can be null\.  Client context provides client information such as client ID, application title, version name, version code, and the application package name\.
+
 +  `Identity`: Information about the Amazon Cognito identity provider when invoked through the AWS Mobile SDK\. It can be null\.
+
 + `RemainingTime`: Remaining execution time till the function will be terminated\. At the time you create the Lambda function you set maximum time limit, at which time AWS Lambda will terminate the function execution\. Information about the remaining time of function execution can be used to specify function behavior when nearing the timeout\. This is a `TimeSpan` field\.
+
 + `Logger`: The Lambda logger associated with the ILambdaContext object\. For more information, see [Logging \(C\#\)](dotnet-logging.md)\.
 
  The following C\# code snippet shows a simple handler function that prints some of the context information\. 
@@ -29,6 +40,6 @@ public async Task Handler(ILambdaContext context)
     Console.Writeline("Function name: " + context.FunctionName);
     Console.Writeline("RemainingTime: " + context.RemainingTime);
     await Task.Delay(TimeSpan.FromSeconds(0.42));
-    Console.WriteLine("RemainingTime after sleep: " + context.RemainingTime);
+    Console.Writeline("RemainingTime after sleep: " + context.RemainingTime);
 }
 ```
\ No newline at end of file
diff --git a/doc_source/dotnet-exceptions.md b/doc_source/dotnet-exceptions.md
index 94d5713..29c6cbf 100644
--- a/doc_source/dotnet-exceptions.md
+++ b/doc_source/dotnet-exceptions.md
@@ -1,7 +1,9 @@
 # Function Errors \(C\#\)<a name="dotnet-exceptions"></a>
 
 When an exception occurs in your Lambda function, Lambda will report the exception information back to you\. Exceptions can occur in two different places: 
+
 + Initialization \(Lambda loading your code, validating the handler string, and creating an instance of your class if it is non\-static\)\.
+
 + The Lambda function invocation\.
 
 The serialized exception information is returned as the payload as a modeled JSON object and outputted to CloudWatch logs\. 
@@ -111,9 +113,11 @@ Exceptions can also occur during invocation\. In this case, the exception type i
 ```
 
 The method in which error information is conveyed depends on the invocation type: 
+
 + `RequestResponse` invocation type \(that is, synchronous execution\): In this case, you get the error message back\. 
 
   For example, if you invoke a Lambda function using the Lambda console, the `RequestResponse` is always the invocation type and the console displays the error information returned by AWS Lambda in the **Execution result** section of the console\.
+
 + `Event` invocation type \(that is, asynchronous execution\): In this case AWS Lambda does not return anything\. Instead, it logs the error information in CloudWatch Logs and CloudWatch metrics\.
 
 Depending on the event source, AWS Lambda may retry the failed Lambda function\. For more information, see [Understanding Retry Behavior](retries-on-errors.md)\. 
@@ -123,7 +127,9 @@ Depending on the event source, AWS Lambda may retry the failed Lambda function\.
 You can create custom error handling to raise an exception directly from your Lambda function and handle it directly \(Retry or Catch\) within an AWS Step Functions State Machine\. For more information, see [Handling Error Conditions Using a State Machine](http://docs.aws.amazon.com/step-functions/latest/dg/tutorial-handling-error-conditions.html)\. 
 
 Consider a `CreateAccount` [state](http://docs.aws.amazon.com/step-functions/latest/dg/awl-ref-states.html) is a [task](http://docs.aws.amazon.com/step-functions/latest/dg/awl-ref-states-task.html) that writes a customer's details to a database using a Lambda function\.
+
 + If the task succeeds, an account is created and a welcome email is sent\.
+
 + If a user tries to create an account for a username that already exists, the Lambda function raises an error, causing the state machine to suggest a different username and to retry the account\-creation process\.
 
 The following code samples demonstrate how to do this\. Note that custom errors in C\# must extend the `Exception` class\.
diff --git a/doc_source/dotnet-logging.md b/doc_source/dotnet-logging.md
index b513a74..f55ca08 100644
--- a/doc_source/dotnet-logging.md
+++ b/doc_source/dotnet-logging.md
@@ -3,6 +3,7 @@
 Your Lambda function can contain logging statements and, in turn, AWS Lambda writes these logs to CloudWatch Logs\. 
 
 In the C\# programming model, there are three ways to log data in your function: 
+
 + Use the static `Write` or `WriteLine` methods provided by the C\# `Console` class\. Anything written to standard out or standard error \- using Console\.Write or a similar method \- will be logged in CloudWatch Logs\. 
 
   ```
@@ -15,6 +16,7 @@ In the C\# programming model, there are three ways to log data in your function:
       }
   }
   ```
+
 + Use the `Log` method on the `Amazon.Lambda.Core.LambdaLogger` class\. This is a static class that can be used anywhere in your application\. To use this, you must include the `Amazon.Lambda.Core ` library\. 
 
   ```
@@ -31,6 +33,7 @@ In the C\# programming model, there are three ways to log data in your function:
   ```
 
   Each call to `LambdaLogger.Log` results in a CloudWatch Logs event, provided the event size is within the allowed limits\. For information about CloudWatch Logs limits, see [CloudWatch Logs Limits](http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/cloudwatch_limits_cwl.html) in the *Amazon CloudWatch User Guide*\.
+
 + Use the logger in `ILambdaContext`\. The `ILambdaContext` object \(if specified\) in your method contains a `Logger` property that represents a LambdaLogger\. The following is an example of using this method: 
 
   ```
@@ -47,6 +50,9 @@ In the C\# programming model, there are three ways to log data in your function:
 ## How to Find Logs<a name="how-to-find-logs-dotnet"></a>
 
 You can find the logs that your Lambda function writes, as follows:
+
 + Find logs in CloudWatch Logs\. The `ILambdaContext` object provides the `LogStreamName` and the `LogGroupName` properties\. Using these properties, you can find the specific log stream where logs are written\.
+
 + If you invoke a Lambda function via the console, the invocation type is always `RequestResponse` \(that is, synchronous execution\) and the console displays the logs that the Lambda function writes using the `LambdaLogger` object\. AWS Lambda also returns logs from `Console.Write` and `Console.WriteLine` methods\.
+
 + If you invoke a Lambda function programmatically, you can add the `LogType` parameter to retrieve the last 4 KB of log data that is written to CloudWatch Logs\. For more information, see [Invoke](API_Invoke.md)\. AWS Lambda returns this log information in the `x-amz-log-results` header in the response\. If you use the AWS Command Line Interface to invoke the function, you can specify the `--log-type` parameter with value `Tail`\. 
\ No newline at end of file
diff --git a/doc_source/dotnet-programming-model-handler-types.md b/doc_source/dotnet-programming-model-handler-types.md
index e8aa057..fa3977c 100644
--- a/doc_source/dotnet-programming-model-handler-types.md
+++ b/doc_source/dotnet-programming-model-handler-types.md
@@ -11,7 +11,9 @@ returnType handler-name(inputType input, ILambdaContext context) {
 ```
 
 In the syntax, note the following:
+
 +  *inputType* – The first handler parameter is the input to the handler, which can be event data \(published by an event source\) or custom input that you provide such as a string or any custom data object\. 
+
 + *returnType* – If you plan to invoke the Lambda function synchronously \(using the `RequestResponse` invocation type\), you can return the output of your function using any of the supported data types\. For example, if you use a Lambda function as a mobile application backend, you are invoking it synchronously\. Your output data type will be serialized into JSON\. 
 
   If you plan to invoke the Lambda function asynchronously \(using the `Event` invocation type\), the `returnType` should be `void`\. For example, if you use AWS Lambda with event sources such as Amazon S3 or Amazon SNS, these event sources invoke the Lambda function using the `Event` invocation type\.
@@ -43,11 +45,17 @@ In the example C\# code, the first handler parameter is the input to the handler
 ## Handling Standard Data Types<a name="dotnet-programming-model-handling-standard-types"></a>
 
 All other types, as listed below, require you to specify a serializer\.
+
 + Primitive \.NET types \(such as string or int\)\.
+
 + Collections and maps \- IList, IEnumerable, IList<T>, Array, IDictionary, IDictionary<TKey, TValue>
+
 + POCO types \(Plain old CLR objects\)
+
 + Predefined AWS event types
+
 + For asynchronous invocations the return\-type will be ignored by Lambda\. The return type may be set to void in such cases\.
+
 + If you are using \.NET asynchronous programming, the return type can be Task and Task<T> types and use `async` and `await` keywords\. For more information, see [Using Async in C\# Functions with AWS Lambda](#dot-net-async)\.
 
 Unless your function input and output parameters are of type `System.IO.Stream`, you will need to serialize them\. AWS Lambda provides a default serializer that can be applied at the assembly or method level of your application, or you can define your own by implementing the `ILambdaSerializer` interface provided by the `Amazon.Lambda.Core` library\. For more information, see [Creating a Deployment Package \(C\#\)](lambda-dotnet-how-to-create-deployment-package.md)\.
@@ -95,8 +103,11 @@ public class ProductService{
 When creating Lambda functions, you have to provide a handler string that tells AWS Lambda where to look for the code to invoke\. In C\#, the format is:
 
  *ASSEMBLY::TYPE::METHOD* where:
+
 + *ASSEMBLY* is the name of the \.NET assembly file for your application\. When using the \.NET Core CLI to build your application, if you haven't set the assembly name using the `buildOptions.outputName` setting in project\.json, the *ASSEMBLY* name will be the name of the folder that contains your project\.json file\. For more information, see [\.NET Core CLI](lambda-dotnet-coreclr-deployment-package.md)\. In this case, let's assume the folder name is `HelloWorldApp`\.
+
 + *TYPE* is the full name of the handler type, which consists of the *Namespace* and the *ClassName*\. In this case `Example.Hello`\.
+
 + *METHOD* is name of the function handler, in this case `MyHandler`\.
 
 Ultimately, the signature will be of this format: *Assembly::Namespace\.ClassName::MethodName*
@@ -125,9 +136,13 @@ If the method specified in your handler string is overloaded, you must provide t
 ## Lambda Function Handler Restrictions<a name="dotnet-handler-restrictions"></a>
 
 Note that there are some restrictions on the handler signature
+
 + It may not be `unsafe` and use pointer types in the handler signature, though `unsafe` context can be used inside the handler method and its dependencies\. For more information, see [unsafe \(C\# Reference\)](https://msdn.microsoft.com/en-us/library/chfa2zb8.aspx)\.
+
 + It may not pass a variable number of parameters using the `params` keyword, or use `ArgIterator` as an input or return parameter which is used to support variable number of parameters\.
+
 + The handler may not be a generic method \(e\.g\. IList<T> Sort<T>\(IList<T> input\)\)\.
+
 + Async handlers with signature `async void` are not supported\.
 
 ## Using Async in C\# Functions with AWS Lambda<a name="dot-net-async"></a>
@@ -143,7 +158,9 @@ public async Task<Response> ProcessS3ImageResizeAsync(SimpleS3Event input)
 ```
 
 If you use this pattern, there are some considerations you must take into account:
+
 + AWS Lambda will not support `async void` methods\.
+
 + If you create an async Lambda function without implementing the `await` operator, \.NET will issue a compiler warning and you will observe unexpected behavior\. For example, some async actions will execute while others won't\. Or some async actions won't complete before the function execution is complete\.
 
   ```
@@ -152,6 +169,7 @@ If you use this pattern, there are some considerations you must take into accoun
       client.DoAsyncWork(input); 
   }
   ```
+
 + Your Lambda function can include multiple async calls, which can be invoked in parallel\. You can use the `Task.WhenAll` and `Task.WhenAny` methods to work with multiple tasks\. To use the `Task.WhenAll` method, you pass a list of the operations as an array to the method\. Note that in the example below, if you neglect to include any operation to the array, that call may return before its operation completes\.
 
   ```
diff --git a/doc_source/dotnet-programming-model.md b/doc_source/dotnet-programming-model.md
index c042f0d..62ced9c 100644
--- a/doc_source/dotnet-programming-model.md
+++ b/doc_source/dotnet-programming-model.md
@@ -2,23 +2,34 @@
 
 The following sections explain how [common programming patterns and core concepts](http://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html) apply when authoring Lambda function code in C\#\.
 
-**Topics**
+
 + [Lambda Function Handler \(C\#\)](dotnet-programming-model-handler-types.md)
 + [The Context Object \(C\#\)](dotnet-context-object.md)
 + [Logging \(C\#\)](dotnet-logging.md)
 + [Function Errors \(C\#\)](dotnet-exceptions.md)
 
 Additionally, note that AWS Lambda provides the following:
+
 + **Amazon\.Lambda\.Core** – This library provides a static Lambda logger, serialization interfaces and a context object\. The `Context` object \([The Context Object \(C\#\)](dotnet-context-object.md)\) provides runtime information about your Lambda function\. 
+
 + **Amazon\.Lambda\.Serialization\.Json ** – This an implementation of the serialization interface in **Amazon\.Lambda\.Core**\. 
+
 + **Amazon\.Lambda\.Logging\.AspNetCore ** – This provides a library for logging from ASP\.NET\. 
+
 + Event objects \(POCOs\) for several AWS services, including: 
+
   + **Amazon\.Lambda\.APIGatewayEvents **
+
   + **Amazon\.Lambda\.CognitoEvents **
+
   + **Amazon\.Lambda\.ConfigEvents **
+
   + **Amazon\.Lambda\.DynamoDBEvents **
+
   + **Amazon\.Lambda\.KinesisEvents **
+
   + **Amazon\.Lambda\.S3Events **
+
   + **Amazon\.Lambda\.SNSEvents **
 
 These packages are available at [Nuget Packages](https://www.nuget.org/packages/)\.
\ No newline at end of file
diff --git a/doc_source/downstream-tracing.md b/doc_source/downstream-tracing.md
index edb0f7e..ca2bad9 100644
--- a/doc_source/downstream-tracing.md
+++ b/doc_source/downstream-tracing.md
@@ -5,7 +5,11 @@ For each traced invocation, Lambda will emit the Lambda service segment and all
 Note that any instrumentation code must be implemented inside the Lambda function handler and not as part of the initialization code\. 
 
 The following examples explain how to do this in the supported runtimes:
+
 + [Node\.js](nodejs-tracing.md)
+
 + [Java](java-tracing.md)
+
 + [Python](python-tracing.md)
+
 + [Go](go-tracing.md)
\ No newline at end of file
diff --git a/doc_source/enabling-x-ray.md b/doc_source/enabling-x-ray.md
index b6b93d0..1a6e1b6 100644
--- a/doc_source/enabling-x-ray.md
+++ b/doc_source/enabling-x-ray.md
@@ -5,8 +5,11 @@ Following, you can find detailed information on how to set up X\-Ray with Lambda
 ## Before You Begin<a name="lambda-xray-getready"></a>
 
 To enable tracing on your Lambda function using the Lambda CLI, you must first add tracing permissions to your function's execution role\. To do so, take the following steps: 
+
 + Sign in to the AWS Management Console and open the IAM console at [https://console\.aws\.amazon\.com/iam/](https://console.aws.amazon.com/iam/)\.
+
 + Find the execution role for your Lambda function\.
+
 + Attach the following managed policy: `AWSXrayWriteOnlyAccess`
 
 To learn more about these policies, see [AWS X\-Ray](http://docs.aws.amazon.com/xray/latest/devguide/)\.
@@ -18,7 +21,9 @@ If you are changing the tracing mode to active using the Lambda console, tracing
 The path of a request through your application is tracked with a trace ID\. A *trace* collects all of the segments generated by a single request, typically an HTTP GET or POST request\.
 
 There are two modes of tracing for a Lambda function:
+
 + Pass Through: This is the default setting for all Lambda functions if you have added tracing permissions to your function's execution role\. This approach means the Lambda function is only traced if X\-Ray has been enabled on an upstream service, such as AWS Elastic Beanstalk\.
+
 + Active: When a Lambda function has this setting, Lambda automatically samples invocation requests, based on the sampling algorithm specified by X\-Ray\. 
 **Note**  
 X\-Ray applies a sampling algorithm to ensure that tracing is efficient, while still providing a representative sample of the requests that your application serves\. The default sampling algorithm is 1 request per minute, with 5 percent of requests sampled past that limit\. However, if the traffic volume to your function is low, you may see an increased rate of sampling\. 
@@ -26,12 +31,16 @@ X\-Ray applies a sampling algorithm to ensure that tracing is efficient, while s
 You can change the tracing mode for your Lambda function by using either the Lambda Management Console or the Lambda [CreateFunction](API_CreateFunction.md) or [UpdateFunctionConfiguration](API_UpdateFunctionConfiguration.md) API actions\. 
 
 If you use the Lambda console, the following applies:
+
 + When you change a function's tracing mode to active, tracing permissions are automatically attached to the function's execution role\. If you receive an error stating Lambda couldn't add the **AWSXrayWriteOnlyAccess** policy to your function's execution role, sign in to the IAM console at [https://console\.aws\.amazon\.com/iam/](https://console.aws.amazon.com/iam/) and manually add the policy\.
+
 + To enable active tracing, go to the **Configuration** tab your function and select the **Enable active tracing** box\.   
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/ActiveTracing.png)
 
 If you use the Lambda [CreateFunction](API_CreateFunction.md) or [UpdateFunctionConfiguration](API_UpdateFunctionConfiguration.md) API actions:
+
 + If you want the tracing mode to be active, set the `TracingConfig` parameter's `Mode` property to `Active.` Again, any new function has its tracing mode set to `PassThrough` by default\.
+
 + Any new or updated Lambda function has its `$LATEST `version set to the value you specify\.
 **Note**  
 You receive an error if you haven't added tracing permissions to your function's execution role\. For more information, see [Before You Begin](#lambda-xray-getready)\. 
\ No newline at end of file
diff --git a/doc_source/env_variables.md b/doc_source/env_variables.md
index cdc41f8..0d6d15c 100644
--- a/doc_source/env_variables.md
+++ b/doc_source/env_variables.md
@@ -18,7 +18,7 @@ Note the **Encryption configuration** section\. You will learn more about using
 
 You can also use the AWS CLI to create Lambda functions that contain environment variables\. For more details, see the [CreateFunction](API_CreateFunction.md) and [UpdateFunctionConfiguration](API_UpdateFunctionConfiguration.md) APIs\. Environment variables are also supported when creating and updating functions using AWS CloudFormation\. Environment variables can also be used to configure settings specific to the language runtime or a library included in your function\. For example, you can modify `PATH` to specify a directory where executables are stored\. You can also set runtime\-specific environment variables, such as `PYTHONPATH` for Python or `NODE_PATH` for Node\.js\. 
 
-The following example creates a new Lambda function that sets the `LD_LIBRARY_PATH` environment variable, which is used to specify a directory where shared libraries are dynamically loaded at runtime\. In this example, the Lambda function code uses the shared library in the `/usr/bin/test/lib64` directory\. Note that the `Runtime` parameter uses `nodejs6.10` but you can also specify `nodejs8.10` or `nodejs4.3`\. 
+The following example creates a new Lambda function that sets the `LD_LIBRARY_PATH` environment variable, which is used to specify a directory where shared libraries are dynamically loaded at runtime\. In this example, the Lambda function code uses the shared library in the `/usr/bin/test/lib64` directory\. Note that the `Runtime` parameter uses `nodejs6.10` but you can also specify `nodejs4.3`\. 
 
 ```
 aws lambda create-function \
@@ -37,7 +37,9 @@ aws lambda create-function \
 There is no limit to the number of environment variables you can create as long as the total size of the set does not exceed 4 KB\.
 
 Other requirements include:
+
 + Must start with letters *\[a\-zA\-Z\]*\. 
+
 + Can only contain alphanumeric characters and underscores *\(\[a\-zA\-Z0\-9\_\]*\. 
 
 In addition, there are a specific set of keys that AWS Lambda reserves\. If you try to set values for any of these reserved keys, you will receive an error message indicating that the action is not allowed\. For more information on these keys, see [Environment Variables Available to Lambda Functions](current-supported-versions.md#lambda-environment-variables)\.
diff --git a/doc_source/eventsources.md b/doc_source/eventsources.md
index 2466002..0d6a24a 100644
--- a/doc_source/eventsources.md
+++ b/doc_source/eventsources.md
@@ -3,22 +3,39 @@
 The following is a list of example events published by the supported AWS services\. For more information about the supported AWS event sources, see [Supported Event Sources](invoking-lambda-function.md)\.
 
 **Sample Events**
+
 + [AWS CloudFormation Create Request Sample Event](#eventsources-cloudformation-create-request)
+
 + [Amazon SES Email Receiving Sample Event](#eventsources-ses-email-receiving)
+
 + [Scheduled Event Sample Event](#eventsources-scheduled-event)
+
 + [Amazon CloudWatch Logs Sample Event](#eventsources-cloudwatch-logs)
+
 + [Amazon SNS Sample Event](#eventsources-sns)
+
 + [Amazon DynamoDB Update Sample Event](#eventsources-ddb-update)
+
 + [Amazon Cognito Sync Trigger Sample Event](#eventsources-cognito-sync-trigger)
+
 + [Amazon Kinesis Data Streams Sample Event](#eventsources-kinesis-streams)
+
 + [Amazon S3 Put Sample Event](#eventsources-s3-put)
+
 + [Amazon S3 Delete Sample Event](#eventsources-s3-delete)
+
 + [Amazon Lex Sample Event](#eventsources-lex)
+
 + [API Gateway Proxy Request Event](#eventsources-api-gateway-request)
+
 + [API Gateway Proxy Response Event](#eventsources-api-gateway-response)
+
 + [CloudFront Event](#eventsources-cloudfront)
+
 + [AWS Config Event](#eventsources-config)
+
 + [AWS IoT Button Event](#eventsources-iot-button)
+
 + [Kinesis Data Firehose Event](#eventsources-kinesis-firehose)
 
 **AWS CloudFormation Create Request Sample Event**  <a name="eventsources-cloudformation-create-request"></a>
diff --git a/doc_source/get-started-create-function.md b/doc_source/get-started-create-function.md
index 91c6578..e298ec4 100644
--- a/doc_source/get-started-create-function.md
+++ b/doc_source/get-started-create-function.md
@@ -13,27 +13,30 @@ Follow the steps in this section to create a simple Lambda function\.
 **Note**  
 The console shows the **Get Started** page only if you do not have any Lambda functions created\. If you have created functions already, you will see the **Lambda > Functions** page\. On the list page, choose **Create a function** to go to the **Create function** page\. 
 
-1. On the **Create function** page, you are presented with three options: 
+1. On the **Create function** page, you are presented with two options: 
+
    + **Author from scratch**
-   + **Blueprints**
-   + **Serverless Application Repository**
 
-    For more information on using the Serverless Application Repository, see [What Is the AWS Serverless Application Repository?](http://docs.aws.amazon.com/serverlessrepo/latest/devguide//what-is-serverlessrepo.html) 
+   + **Blueprints**
 
    1. If you'd like to review the blueprints, choose the **Blueprints** button, which will display the available blueprints\. You can also use the **Filter** to search for specific blueprints\. For example: 
+
       + Enter **S3** in **Filter** to get only the list of blueprints available to process Amazon S3 events\.
+
       + Enter **dynamodb** in **Filter** to get a list of available blueprints to process Amazon DynamoDB events\.
 
    1. For this Getting Started exercise, choose the **Author from scratch** button\.
 
 1. In **Author from scratch**, do the following:
+
    + In **Name\***, specify your Lambda function name\.
+
    + In **Runtime\***, leave the default `Node.js 6.10`\.
-   + In **Role\***, choose **Create new role from templates\(s\):**
-   + In **Role name\***, enter a name for your role\.
-   + Leave the **Policy templates** field blank\. For the purposes of this introduction, your Lambda function will have the necessary execution permissions\.
-**Note**  
-For an in\-depth look at AWS Lambda's security polices, see [Authentication and Access Control for AWS Lambda](lambda-auth-and-access-control.md)\.
+
+   + In **Role\***, leave the default **Choose an existing role**\.
+
+   + In **Existing role\***, choose **lambda\_basic\_execution**\.
+
    + Choose **Create Function\.**
 
 1. Under your new ***function\-name*** page, note the following:   
@@ -42,23 +45,37 @@ For an in\-depth look at AWS Lambda's security polices, see [Authentication and
    In the **Add triggers** panel, you can optionally choose a service that automatically triggers your Lambda function by choosing one of the service options listed\.
 
    1. Depending on which service you select, you are prompted to provide relevant information for that service\. For example, if you select DynamoDB, you need to provide the following: 
+
       + The name of the DynamoDB table
+
       + Batch size
+
       + Starting position
 
    1. For this example, do not configure a trigger\.
+
    + In **Function code** note that code authored in Node\.js is provided\. It returns a simple "Hello from Lambda" greeting\.
+
    + **Handler** shows **lambda\_function\.lambda\_handler** value\. It is the *filename*\.*handler\-function*\. The console saves the sample code in the `lambda_function.py` file and in the code `lambda_handler` is the function name that receives the event as a parameter when the Lambda function is invoked\. For more information, see [Lambda Function Handler \(Python\)](python-programming-model-handler-types.md)\.
+
    + Note the embedded IDE \(Integrated Development Environment\)\. To learn more, see [Creating Functions Using the AWS Lambda Console Editor](code-editor.md)\.
 
 1. Other configuration options on this page include:
+
    + **Environment variables** – for Lambda functions enable you to dynamically pass settings to your function code and libraries, without making changes to your code\. For more information, see [Environment Variables](env_variables.md)\.
+
    + **Tags** – are key\-value pairs that you attach to AWS resources to better organize them\. For more information, see [Tagging Lambda Functions](tagging.md)\.
+
    + **Execution role** – which allows you to administer security on your function, using defined roles and policies or creating new ones\. For more information, see [Authentication and Access Control for AWS Lambda](lambda-auth-and-access-control.md)\.
+
    + **Basic settings** – allows you to dictate the memory allocation and timeout limit for your Lambda function\. For more information, see [AWS Lambda Limits](limits.md#limits-list)\.
+
    + **Network** – allows you to select a VPC your function will access\. For more information, see [Configuring a Lambda Function to Access Resources in an Amazon VPC](vpc.md)\.
+
    + **Debugging and error handling** – allows you to select a [Dead Letter Queues](dlq.md) resource to analyze failed function invocation retries\. It also allows you to enable active tracing\. For more information, see [Using AWS X\-Ray](lambda-x-ray.md)\. 
+
    + **Concurrency** – allows you to allocate a specific limit of concurrent executions allowed for this function\. For more information, see [Function Level Concurrent Execution Limit](concurrent-executions.md#per-function-concurrency)\. 
+
    + **Auditing and compliance** – logs function invocations for operational and risk auditing, governance and compliance\. For more information, see [Using AWS Lambda with AWS CloudTrail](with-cloudtrail.md)\. 
 
 ## Invoke the Lambda Function Manually and Verify Results, Logs, and Metrics<a name="get-started-invoke-manually"></a>
@@ -85,10 +102,13 @@ Follow the steps to invoke your Lambda function using the sample event data prov
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/getting-started-v2-execution-result.png)
 
    Note the following:
+
    + The **Execution result** section shows the execution status as **succeeded** and also shows the function execution results, returned by the `return` statement\.
 **Note**  
-The console always uses the `RequestResponse` invocation type \(synchronous invocation\) when invoking a Lambda function which causes AWS Lambda to return a response immediately\. For more information, see [Invocation Types](invocation-options.md)\.
+The console always uses the `RequestResponse` invocation type \(synchronous invocation\) when invoking a Lambda function which causes AWS Lambda to return a response immediately\. For more information, see [Invocation Types](java-invocation-options.md)\.
+
    + The **Summary** section shows the key information reported in the **Log output** section \(the *REPORT* line in the execution log\)\.
+
    + The **Log output** section shows the log AWS Lambda generates for each execution\. These are the logs written to CloudWatch by the Lambda function\. The AWS Lambda console shows these logs for your convenience\.
 
    Note that the **Click here** link shows logs in the CloudWatch console\. The function then adds logs to Amazon CloudWatch in the log group that corresponds to the Lambda function\.
@@ -99,12 +119,19 @@ The console always uses the `RequestResponse` invocation type \(synchronous invo
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/getting-started-v2-execution-metrics.png)
 
    Note the following:
+
    + The X\-axis shows the past 24 hours from the current time\.
+
    + Invocation count shows the number of invocations during this interval\.
+
    + Invocation duration shows how long it took for your Lambda function to run\. It shows minimum, maximum, and average time of execution\.
+
    + Invocation errors show the number of times your Lambda function failed\. You can compare the number of times your function executed and how many times it failed \(if any\)\.
+
    + Throttled invocation metrics show whether AWS Lambda throttled your Lambda function invocation\. For more information, see [AWS Lambda Limits](limits.md#limits-list)\.
+
    + Concurrent execution metrics show the number of concurrent invocations of your Lambda function\. For more information, see [Managing Concurrency](concurrent-executions.md)\.
+
    + The AWS Lambda console shows these CloudWatch metrics for your convenience\. You can see these metrics in the Amazon CloudWatch console by clicking any of these metrics\.
 
    For more information on these metrics and what they mean, see [AWS Lambda CloudWatch Metrics](monitoring-functions-metrics.md#lambda-cloudwatch-metrics)\.
\ No newline at end of file
diff --git a/doc_source/get-started-step3-optional.md b/doc_source/get-started-step3-optional.md
index ff92a79..705b747 100644
--- a/doc_source/get-started-step3-optional.md
+++ b/doc_source/get-started-step3-optional.md
@@ -1,7 +1,9 @@
 # Step 3\.3: \(Optional\) Try Other Blueprints<a name="get-started-step3-optional"></a>
 
 You can optionally try the following exercises:
+
 + You used the **hello\-world\-python** blueprint in this Getting Started exercise\. This blueprint provides sample code authored in Python\. There is also the **hello\-world** blueprint that provides similar Lambda function code that is authored in Node\.js\.
+
 + Both the **hello\-world\-python** and the **hello\-world** blueprints process custom events\. For this Getting Started exercise, you used hand\-crafted sample event data\. Your can write Lambda functions to process events published by event sources such as Amazon S3 and DynamoDB\. This requires event source configuration in the console\. 
 
   For example, you can write a Lambda function to process Amazon S3 events\. Then, you configure Amazon S3 as the event source to publish object\-created events to AWS Lambda\. When you upload an object to your bucket, Amazon S3 detects the event and invokes your Lambda function\. Your Lambda function receives the event data as a parameter\. You can verify your Lambda function executed by reviewing the CloudWatch logs either in the Lambda console or the CloudWatch console\. 
diff --git a/doc_source/get-started-step4-optional.md b/doc_source/get-started-step4-optional.md
index 44f2330..cafcdf0 100644
--- a/doc_source/get-started-step4-optional.md
+++ b/doc_source/get-started-step4-optional.md
@@ -22,11 +22,15 @@ public class Hello {
 ```
 
 The programming model explains how to write your Java code in detail, for example the input/output types AWS Lambda supports\. For more information about the programming model, see [Programming Model for Authoring Lambda Functions in Java](java-programming-model.md)\. For now, note the following about this code:
+
 + When you package and upload this code to create your Lambda function, you specify the `example.Hello::myHandler` method reference as the handler\. 
+
 + The handler in this example uses the `int` type for input and the `String` type for output\. 
 
   AWS Lambda supports input/output of JSON\-serializable types and InputStream/OutputStream types\. When you invoke this function you will pass a sample int \(for example, 123\)\. 
-+ You can use the Lambda console to manually invoke this Lambda function\. The console always uses the `RequestResponse` invocation type \(synchronous\) and therefore you will see the response in the console\. 
+
++ In this exercise you use the console to manually invoke this Lambda function\. The console always uses the `RequestResponse` invocation type \(synchronous\) and therefore you will see the response in the console\. 
+
 + The handler includes the optional `Context` parameter\. In the code we use the `LambdaLogger` provided by the `Context` object to write log entries to CloudWatch logs\. For information about using the `Context` object, see [The Context Object \(Java\)](java-context-object.md)\.
 
-First, you need to package this code and any dependencies into a deployment package\. Then, you can use the Getting Started exercise to upload the package to create your Lambda function and test using the console\. For more information creating a deployment package, see [Creating a Deployment Package \(Java\)](lambda-java-how-to-create-deployment-package.md)\.
\ No newline at end of file
+First, you need to package this code and any dependencies into a deployment package\. Then, you can use the Getting Started exercise to upload the package to create your Lambda function and test using the console\.
\ No newline at end of file
diff --git a/doc_source/get-started-what-next.md b/doc_source/get-started-what-next.md
index cce76cb..d9c19cd 100644
--- a/doc_source/get-started-what-next.md
+++ b/doc_source/get-started-what-next.md
@@ -5,11 +5,17 @@ This Getting Started exercise provided you with an overview of how to use the AW
 AWS Lambda functions can also be automatically invoked in response to events in other AWS services such as Amazon S3 and DynamoDB\. Lambda functions can also be invoked on\-demand over HTTPS\. You can also build your own custom event sources and invoke Lambda functions on demand\. 
 
 Depending on your integration scenario, whether your application needs event\-driven Lambda function invocation or on\-demand invocation, see the following sections:
+
 + [Using AWS Lambda with Amazon S3](with-s3.md)
+
 + [Using AWS Lambda with Kinesis](with-kinesis.md)
+
 + [Using AWS Lambda with Amazon DynamoDB](with-ddb.md)
+
 + [Using AWS Lambda with AWS CloudTrail](with-cloudtrail.md)
+
 + [Using AWS Lambda with Amazon API Gateway \(On\-Demand Over HTTPS\)](with-on-demand-https.md)
+
 + [Using AWS Lambda as Mobile Application Backend \(Custom Event Source: Android\)](with-on-demand-custom-android.md)
 
 The console provides several blueprints for you to set up example Lambda functions quickly that can process events from these event sources\. You may want to explore other blueprints in the console to get started with Lambda functions triggered by these event sources\.
\ No newline at end of file
diff --git a/doc_source/getting-started-create-function.md b/doc_source/getting-started-create-function.md
index c4af487..7b2a47c 100644
--- a/doc_source/getting-started-create-function.md
+++ b/doc_source/getting-started-create-function.md
@@ -3,9 +3,13 @@
 In this Getting Started exercise you first create a Lambda function using the AWS Lambda console\. Next, you manually invoke the Lambda function using sample event data\. AWS Lambda executes the Lambda function and returns results\. You then verify execution results, including the logs that your Lambda function created and various CloudWatch metrics\. 
 
 As you follow the steps, you will also familiarize yourself with the AWS Lambda console including:
+
 + Explore the blueprints\. Each blueprint provides sample code and sample configurations that enable you to create Lambda functions with just a few clicks\. 
+
 + View and update configuration information of your Lambda function\.
+
 + Invoke a Lambda function manually and explore results in the **Execution results** section\.
+
 + Monitor CloudWatch metrics in the console\.
 
 ## Preparing for the Getting Started<a name="get-started-prepare"></a>
diff --git a/doc_source/getting-started.md b/doc_source/getting-started.md
index 2d7ef8d..d342094 100644
--- a/doc_source/getting-started.md
+++ b/doc_source/getting-started.md
@@ -3,24 +3,35 @@
 In this section, we introduce you to the fundamental concepts of a typical Lambda\-based application and the options available to create and test your applications\. In addition, you will be provided with instructions on installing the necessary tools to complete the tutorials included in this guide and create your first Lambda function\. 
 
 ## Building Blocks of a Lambda\-based Application<a name="lambda-application-fundamentals"></a>
+
 + **Lambda function: **The foundation, it is comprised of your custom code and any dependent libraries\. For more information, see [Lambda Functions](lambda-introduction-function.md)\.
-+ **Event source: ** An AWS service, such as Amazon SNS, or a custom service, that triggers your function and executes its logic\. For more information, see [Event Source Mapping](invocation-options.md#intro-invocation-modes)\.
+
++ **Event source: ** An AWS service, such as Amazon SNS, or a custom service, that triggers your function and executes its logic\. For more information, see [Event Source Mapping](java-invocation-options.md#intro-invocation-modes)\.
+
 + **Downstream resources: **An AWS service, such DynamoDB tables or Amazon S3 buckets, that your Lambda function calls once it is triggered\. 
+
 + **Log streams: **While Lambda automatically monitors your function invocations and reports metrics to CloudWatch, you can annotate your function code with custom logging statements that allow you to analyze the execution flow and performance of your Lambda function to ensure it's working properly\.
+
 + **AWS SAM: **A model to define [serverless applications](https://aws.amazon.com/serverless)\. AWS SAM is natively supported by AWS CloudFormation and defines simplified syntax for expressing serverless resources\. For more information, see [Using the AWS Serverless Application Model \(AWS SAM\)](serverless_app.md)
 
 ## Tools to Create and Test Lambda\-based Applications<a name="lambda-application-tools"></a>
 
 There are three key tools that you use to interact with the AWS Lambda service, described below\. We will cover tools for building AWS Lambda\-based applications in further sections\.
+
 + **Lambda Console: ** Provides a way for you to graphically design your Lambda\-based application, author or update your Lambda function code, and configure event, downstream resources and IAM permissions that your function requires\. It also includes advanced configuration options, outlined in [Advanced Topics](advanced.md)\.
+
 + **AWS CLI: **A command\-line interface you can use to leverage Lambda's API operations, such as creating functions and mapping event sources\. For a full list of Lambda's API operations, see [Actions](API_Operations.md)\.
+
 + **SAM Local: **A command\-line interface you can use to develop, test, and analyze your serverless applications locally before uploading them to the Lambda runtime\. For more information, see [Test Your Serverless Applications Locally Using SAM Local \(Public Beta\)](test-sam-local.md)\.
 
 ## Before you begin<a name="lambda-application-fundamentals-before-you-begin"></a>
 
 In order to use the tutorials offered at the end of this section, make sure you have done the following:
+
 + [Set Up an AWS Account](setup.md) 
+
 + [Set Up the AWS Command Line Interface \(AWS CLI\)](setup-awscli.md)
+
 + Followed the steps to use SAM Local, including [Docker](https://www.docker.com), outlined here: [Install SAM Local](sam-cli-requirements.md)\. 
 
 ### Next Step<a name="setting-up-next-step-account"></a>
diff --git a/doc_source/go-programming-model-context.md b/doc_source/go-programming-model-context.md
index 7c953c8..87854cd 100644
--- a/doc_source/go-programming-model-context.md
+++ b/doc_source/go-programming-model-context.md
@@ -1,10 +1,15 @@
 # The Context Object \(Go\)<a name="go-programming-model-context"></a>
 
 While a Lambda function is executing, it can interact with AWS Lambda to get useful runtime information such as:
+
 + How much time is remaining before AWS Lambda terminates your Lambda function \(timeout is one of the Lambda function configuration properties\)\.
+
 + The [CloudWatch](https://aws.amazon.com/documentation/cloudwatch/) log group and log stream associated with the Lambda function that is executing\.
+
 + The AWS request ID returned to the client that invoked the Lambda function\. You can use the request ID for any follow up inquiry with AWS support\.
+
 + If the Lambda function is invoked through AWS Mobile SDK, you can learn more about the mobile application calling the Lambda function\.
+
 + In addition to the options listed below, you can also use the AWS X\-Ray SDK for [Go](go-tracing.md) to identify critical code paths, trace their performance and capture the data for analysis\. 
 
 AWS Lambda provides this information via the `context.Context` object that the service passes as a parameter to your Lambda function handler\. For more information, see [Valid Handler Signatures ](go-programming-model-handler-types.md#go-programming-model-handler-types-signatures)\.
@@ -70,16 +75,25 @@ func main() {
 ```
 
 The Lambda context library provides the following global variables:
+
 + `MemoryLimitInMB`: Memory limit, in MB, you configured for the Lambda function\.
+
 + `FunctionName`: Name of the Lambda function that is running\.
+
 + `FunctionVersion`: The Lambda function version that is executing\. If an alias is used to invoke the function, then `FunctionVersion` will be the version the alias points to\.
+
 + `LogStreamName`: The CloudWatch log stream name for the particular Lambda function execution\. It can be null if the IAM user provided does not have permission for CloudWatch actions\.
+
 + `LogGroupName`: The CloudWatch log group name associated with the Lambda function invoked\. It can be null if the IAM user provided does not have permission for CloudWatch actions\.
 
 The Lambda context object also includes the following properties:
+
 +  `AwsRequestID`: AWS request ID associated with the request\. This is the ID returned to the client that invoked this Lambda function\. You can use the request ID for any follow up inquiry with AWS support\. Note that if AWS Lambda retries the function \(for example, in a situation where the Lambda function processing Kinesis records throw an exception\), the request ID remains the same\.
+
 + `ClientContext`: Information about the client application and device when invoked through the AWS Mobile SDK\. It can be null\.  Client context provides client information such as client ID, application title, version name, version code, and the application package name\.
+
 +  `Identity`: Noted in the preceding example\. Information about the Amazon Cognito identity provider when invoked through the AWS Mobile SDK\. It can be null\.
+
 + `InvokedFunctionArn`: The ARN used to invoke this function\. It can be function ARN or alias ARN\. An unqualified ARN executes the `$LATEST` version and aliases execute the function version it is pointing to\. 
 
 ## Next Step<a name="go-programming-model-next-step-logging"></a>
diff --git a/doc_source/go-programming-model-errors.md b/doc_source/go-programming-model-errors.md
index 3ee0834..a100ca1 100644
--- a/doc_source/go-programming-model-errors.md
+++ b/doc_source/go-programming-model-errors.md
@@ -28,7 +28,9 @@ Which will return:
 You can create custom error handling to raise an exception directly from your Lambda function and handle it directly \(Retry or Catch\) within an AWS Step Functions State Machine\. For more information, see [Handling Error Conditions Using a State Machine](http://docs.aws.amazon.com/step-functions/latest/dg/tutorial-handling-error-conditions.html)\. 
 
 Consider a `CreateAccount` [state](http://docs.aws.amazon.com/step-functions/latest/dg/awl-ref-states.html) is a [task](http://docs.aws.amazon.com/step-functions/latest/dg/awl-ref-states-task.html) that writes a customer's details to a database using a Lambda function\.
+
 + If the task succeeds, an account is created and a welcome email is sent\.
+
 + If a user tries to create an account for a username that already exists, the Lambda function raises an error, causing the state machine to suggest a different username and to retry the account\-creation process\.
 
 The following code samples demonstrate how to do this\. 
diff --git a/doc_source/go-programming-model-handler-types.md b/doc_source/go-programming-model-handler-types.md
index 69e6f05..49fa444 100644
--- a/doc_source/go-programming-model-handler-types.md
+++ b/doc_source/go-programming-model-handler-types.md
@@ -6,38 +6,48 @@ A Lambda function written in [Go](https://golang.org/) is authored as a Go execu
 package main
 
 import (
-        "fmt"
-        "context"
-        "github.com/aws/aws-lambda-go/lambda"
+"fmt"
+"context"
+"github.com/aws/aws-lambda-go/lambda"
 )
 
 type MyEvent struct {
-        Name string `json:"name"`
+Name string `json:"name"`
 }
 
 func HandleRequest(ctx context.Context, name MyEvent) (string, error) {
-        return fmt.Sprintf("Hello %s!", name.Name ), nil
+return fmt.Sprintf("Hello %s!", name.Name ), nil
 }
 
 func main() {
-        lambda.Start(HandleRequest)
+lambda.Start(HandleRequest)
 }
 ```
 
 Note the following:
+
 + **package main**: In Go, the package containing `func main()` must always be named `main`\.
+
 + **import**: Use this to include the libraries your Lambda function requires\. In this instance, it includes:
+
   + **context: **[The Context Object \(Go\) ](go-programming-model-context.md)\.
+
   + **fmt:** The Go [Formatting](https://golang.org/pkg/fmt/) object used to format the return value of your function\.
+
   + **github\.com/aws/aws\-lambda\-go/lambda:** As mentioned previously, implements the Lambda programming model for Go\.
+
 + **func HandleRequest\(ctx context\.Context, name string\) \(string, error\)**: This is your Lambda handler signature and includes the code which will be executed\. In addition, the parameters included denote the following: 
-  + **ctx context\.Context**: Provides runtime information for your Lambda function invocation\. `ctx` is the variable you declare to leverage the information available via [The Context Object \(Go\) ](go-programming-model-context.md)\.
+
+  + **ctx context\.Context**: Provides runtime information for your Lambda function invocation\. `ctx` is the variable you declare to leverage the information available via the [The Context Object \(Go\) ](go-programming-model-context.md)\.
+
   + **name string**: An input type with a variable name of `name` whose value will be returned in the `return` statement\.
+
   + **string error**: Returns standard [error](https://golang.org/pkg/builtin/#error) information\. For more information on custom error handling, see [Function Errors \(Go\) ](go-programming-model-errors.md)\.
-  + **return fmt\.Sprintf\("Hello %s\!", name\), nil**: Simply returns a formatted "Hello" greeting with the name you supplied in the handler signature\. `nil` indicates there were no errors and the function executed successfully\.
-+ **func main\(\)**: The entry point that executes your Lambda function code\. This is required\.
+
+  + **return fmt\.Sprintf\("Hello %s\!", name\), nil**: Simply returns a formatted "Hello" greeting with the name you supplied in the handler signature\. `nil` indicates there were no errors and the function executed successfully\.**func main\(\)**: The entry point that executes your Lambda function code\. This is required\.
 
   By adding `lambda.Start(HandleRequest)` between `func main(){}` code brackets, your Lambda function will be executed\.
+
 **Note**  
 Per Go language standards, the opening bracket, `{` must be placed directly at end the of the `main` function signature\.
 
@@ -95,18 +105,29 @@ For more information on handling events from AWS event sources, see [aws\-lambda
 ### Valid Handler Signatures<a name="go-programming-model-handler-types-signatures"></a>
 
 You have several options when building a Lambda function handler in Go, but you must adhere to the following rules:
+
 + The handler must be a function\.
+
 + The handler may take between 0 and 2 arguments\. If there are two arguments, the first argument must implement `context.Context`\.
+
 + The handler may return between 0 and 2 arguments\. If there is a single return value, it must implement `error`\. If there are two return values, the second value must implement `error`\. For more information on implementing error\-handling information, see [Function Errors \(Go\) ](go-programming-model-errors.md)\.
 
 The following lists valid handler signatures\. `TIn` and `TOut` represent types compatible with the *encoding/json* standard library\. For more information, see [func Unmarshal](https://golang.org/pkg/encoding/json/#Unmarshal) to learn how these types are deserialized\.
+
 + 
+
 + 
+
 + 
+
 + 
+
 + 
+
 + 
+
 + 
+
 + 
 
 ## Using Global State to Maximize Performance<a name="go-programming-model-handler-execution-environment-reuse"></a>
diff --git a/doc_source/go-programming-model-logging.md b/doc_source/go-programming-model-logging.md
index 31546bb..e6649a0 100644
--- a/doc_source/go-programming-model-logging.md
+++ b/doc_source/go-programming-model-logging.md
@@ -51,10 +51,13 @@ The console uses the `RequestResponse` invocation type \(synchronous invocation\
 ## Finding Logs<a name="go-logging-finding-logs"></a>
 
 You can find the logs that your Lambda function writes, as follows:
+
 + **In the AWS Lambda console** – The ** Log output** section in the AWS Lambda console shows the logs\. 
+
 + **In the response header, when you invoke a Lambda function programmatically** – If you invoke a Lambda function programmatically, you can add the `LogType` parameter to retrieve the last 4 KB of log data that is written to CloudWatch Logs\. AWS Lambda returns this log information in the `x-amz-log-results` header in the response\. For more information, see [Invoke](API_Invoke.md)\.
 
   If you use AWS CLI to invoke the function, you can specify the` --log-type parameter` with value `Tail` to retrieve the same information\.
+
 + **In CloudWatch Logs** – To find your logs in CloudWatch you need to know the log group name and log stream name\. You can use the `context.logGroupName`, and `context.logStreamName` global variables in [The Context Object \(Go\) ](#go-programming-model-logging) library to get this information\. When you run your Lambda function, the resulting logs in the console or CLI will show you the log group name and log stream name\. 
 
 ## Next Step<a name="go-programming-model-next-step-errors"></a>
diff --git a/doc_source/go-programming-model.md b/doc_source/go-programming-model.md
index 57ab212..12e8b11 100644
--- a/doc_source/go-programming-model.md
+++ b/doc_source/go-programming-model.md
@@ -2,7 +2,7 @@
 
 The following sections explain how [common programming patterns and core concepts](http://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html) apply when authoring Lambda function code in [Go](https://golang.org/)\.
 
-**Topics**
+
 + [Lambda Function Handler \(Go\)](go-programming-model-handler-types.md)
 + [The Context Object \(Go\)](go-programming-model-context.md)
 + [Logging \(Go\)](go-programming-model-logging.md)
@@ -10,6 +10,9 @@ The following sections explain how [common programming patterns and core concept
 + [Using Environment Variables \(Go\)](go-programming-model-env-variables.md)
 
 Additionally, note that AWS Lambda provides the following:
+
 + **github\.com/aws/aws\-lambda\-go/lambda**: The implementation of the Lambda programming model for Go\. This package is used by AWS Lambda to invoke your [Lambda Function Handler \(Go\)](go-programming-model-handler-types.md)\.
+
 + **github\.com/aws/aws\-lambda\-go/lambdacontext**: Helpers for accessing execution context information from the [The Context Object \(Go\) ](go-programming-model-context.md)\.
+
 + **github\.com/aws/aws\-lambda\-go/events**: This library provides type definitions for common event source integrations\.
\ No newline at end of file
diff --git a/doc_source/history.md b/doc_source/history.md
index 40a289b..3bf4da4 100644
--- a/doc_source/history.md
+++ b/doc_source/history.md
@@ -3,13 +3,14 @@
 The following table describes the important changes to the *AWS Lambda Developer Guide*\. 
 
 **Relevant Dates to this History:**
+
 + **Current product version**: 2015\-03\-31
-+ **Last documentation update**: April 2, 2018
+
++ **Last documentation update**: January 25, 2018
 
 
 | Change | Description | Date | 
 | --- | --- | --- | 
-| Runtime support for Node\.js runtime 8\.10 |  AWS Lambda now supports Node\.js runtime version 8\.10\. For more information, see [Programming Model\(Node\.js\)](programming-model.md)\.  | April 2, 2018 | 
 | Function and alias revision IDs |  AWS Lambda now supports revision IDs on your function versions and aliases\. You can use these IDs to track and apply conditional updates when you are updating your function version or alias resources\.  | January 25, 2018 | 
 | Runtime support for Go and \.NET 2\.0  |  AWS Lambda has added runtime support for Go and \.NET 2\.0\. For more information, see [Programming Model for Authoring Lambda Functions in Go](go-programming-model.md) and [Programming Model for Authoring Lambda Functions in C\#](dotnet-programming-model.md)\.  | January 15, 2018 | 
 | Console Redesign  |  AWS Lambda has introduced a new Lambda console to simplify your experience and added a Cloud9 Code Editor to enhance your ability debug and revise your function code\. For more information, see [Creating Functions Using the AWS Lambda Console Editor](code-editor.md)\.  | November 30,2017 | 
@@ -28,7 +29,7 @@ The following table describes the important changes to the *AWS Lambda Developer
 | AWS Lambda adds Amazon Lex as a supported event source\.  |  Using Lambda and Amazon Lex, you can quickly build chat bots for various services like Slack and Facebook\. For more information, see [Amazon Lex](invoking-lambda-function.md#supported-event-source-lex)\.  | November 30, 2016 | 
 | US West \(N\. California\) Region  |  AWS Lambda is now available in the US West \(N\. California\) Region\. For more information about Lambda regions and endpoints, see [Regions and Endpoints](http://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region) in the *AWS General Reference*\.  | November 21, 2016 | 
 | Introduced the AWS Serverless Application Model for creating and deploying Lambda\-based applications and using environment variables for Lambda function configuration settings\. |  AWS Lambda introduces the following features in this release\. [\[See the AWS documentation website for more details\]](http://docs.aws.amazon.com/lambda/latest/dg/history.html)  | November 18, 2016 | 
-| Added a tutorial under [Getting Started](getting-started.md) for creating an Amazon API Gateway endpoint using the Lambda console  |  The tutorial instructs how to seamlessly integrate a Lambda function with an API via new features introduced in [Configure Proxy Integration for a Proxy Resource](http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-set-up-simple-proxy.html)\. For more information, see [Create a Simple Microservice using Lambda and API Gateway](with-on-demand-https-example-configure-event-source_1.md)\.  | August 29, 2016 | 
+| Added a tutorial under [Getting Started](getting-started.md) for creating an Amazon API Gateway endpoint using the Lambda console  |  The tutorial instructs how to seamlessly integrate a Lambda function with an API via new features introduced in [Configure Proxy Integration for a Proxy Resource](http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-set-up-simple-proxy.html)\. For more information, see [Step 3: Create a Simple Microservice using Lambda and API Gateway](with-on-demand-https-example-configure-event-source_1.md)\.  | August 29, 2016 | 
 | Asia Pacific \(Seoul\) Region  |  AWS Lambda is now available in the Asia Pacific \(Seoul\) Region\. For more information about Lambda regions and endpoints, see [Regions and Endpoints](http://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region) in the *AWS General Reference*\.  | August 29, 2016 | 
 | Asia Pacific \(Sydney\) Region  |  Lambda is now available in the Asia Pacific \(Sydney\) Region\. For more information about Lambda regions and endpoints, see [Regions and Endpoints](http://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region) in the *AWS General Reference*\.  | June 23, 2016 | 
 | Updates to the Lambda console  |  The Lambda console has been updated to simplify the role\-creation process\. For more information, see [Create a Simple Lambda Function](get-started-create-function.md)\.  | June 23, 2016 | 
diff --git a/doc_source/index.md b/doc_source/index.md
index 1934860..f961eb3 100644
--- a/doc_source/index.md
+++ b/doc_source/index.md
@@ -91,7 +91,7 @@ Amazon's trademarks and trade dress may not be used in
                + [Step 3: Test the Lambda Function (Invoke Manually)](vpc-rds-invoke-lambda-function.md)
    + [AWS Lambda Execution Model](running-lambda-code.md)
 + [Invoking Lambda Functions](invoking-lambda-functions.md)
-   + [Invocation Types](invocation-options.md)
+   + [Invocation Types](java-invocation-options.md)
    + [Understanding Retry Behavior](retries-on-errors.md)
    + [Understanding Scaling Behavior](scaling.md)
    + [Supported Event Sources](invoking-lambda-function.md)
@@ -149,7 +149,7 @@ Amazon's trademarks and trade dress may not be used in
             + [Step 2.3: Create the Lambda Function and Test It Manually](with-on-demand-https-example-upload-deployment-pkg_1.md)
          + [Step 3: Create an API Using Amazon API Gateway and Test It](with-on-demand-https-example-configure-event-source.md)
          + [Step 4: Deploy With AWS SAM and AWS CloudFormation](with-api-example-use-app-spec.md)
-      + [Create a Simple Microservice using Lambda and API Gateway](with-on-demand-https-example-configure-event-source_1.md)
+      + [Step 3: Create a Simple Microservice using Lambda and API Gateway](with-on-demand-https-example-configure-event-source_1.md)
          + [Step 3.1: Create an API Using Amazon API Gateway](with-on-demand-https-example-configure-event-source_2.md)
          + [Step 3.2: Test Sending an HTTPS Request](with-on-demand-https-example-configure-event-source-test-end-to-end_1.md)
          + [Step 3.3: (Optional) Try Other Blueprints](get-started-step3-optional.md)
@@ -182,7 +182,6 @@ Amazon's trademarks and trade dress may not be used in
          + [Step 3: Invoke the Lambda Function (AWS CLI)](with-userapp-walkthrough-custom-events-invoke.md)
          + [Step 4: Try More CLI Commands (AWS CLI)](with-userapp-walkthrough-custom-events-try-more-api.md)
          + [Step 5: Delete the Lambda Function and IAM Role (AWS CLI)](with-userapp-walkthrough-custom-events-delete-function.md)
-   + [AWS Lambda@Edge](lambda-edge.md)
 + [Deploying Lambda-based Applications](deploying-lambda-apps.md)
    + [AWS Lambda Function Versioning and Aliases](versioning-aliases.md)
       + [Introduction to AWS Lambda Versioning](versioning-intro.md)
@@ -231,6 +230,7 @@ Amazon's trademarks and trade dress may not be used in
    + [Runtime Support Policy](runtime-support-policy.md)
 + [Lambda Execution Environment and Available Libraries](current-supported-versions.md)
 + [AWS Lambda Limits](limits.md)
++ [AWS Lambda@Edge](lambda-edge.md)
 + [API Reference](API_Reference.md)
    + [Actions](API_Operations.md)
       + [AddPermission](API_AddPermission.md)
diff --git a/doc_source/intro-permission-model.md b/doc_source/intro-permission-model.md
index a15e43d..baaea51 100644
--- a/doc_source/intro-permission-model.md
+++ b/doc_source/intro-permission-model.md
@@ -1,17 +1,20 @@
 # AWS Lambda Permissions Model<a name="intro-permission-model"></a>
 
 For the end\-to\-end AWS Lambda\-based applications to work, you have to manage various permissions\. For example:
+
 + For event sources, except for the stream\-based services \(Amazon Kinesis Data Streams and DynamoDB streams\), you must grant the event source permissions to invoke your AWS Lambda function\. 
 
    
+
 + For stream\-based event sources \(Amazon Kinesis Data Streams and DynamoDB streams\), AWS Lambda polls the streams on your behalf and reads new records on the stream, so you need to grant AWS Lambda permissions for the relevant stream actions\.
 
    
+
 + When your Lambda function executes, it can access AWS resources in your account \(for example, read an object from your S3 bucket\)\. AWS Lambda executes your Lambda function on your behalf by assuming the role you provided at the time of creating the Lambda function\. Therefore, you need to grant the role the necessary permissions that your Lambda function needs, such as permissions for Amazon S3 actions to read an object\.
 
 The following sections describe permissions management\.
 
-**Topics**
+
 + [Manage Permissions: Using an IAM Role \(Execution Role\)](#lambda-intro-execution-role)
 + [Manage Permissions: Using a Lambda Function Policy](#intro-permission-model-access-policy)
 + [Suggested Reading](#w3ab1c67c11c20c21)
@@ -19,9 +22,11 @@ The following sections describe permissions management\.
 ## Manage Permissions: Using an IAM Role \(Execution Role\)<a name="lambda-intro-execution-role"></a>
 
 Each Lambda function has an IAM role \(execution role\) associated with it\. You specify the IAM role when you create your Lambda function\. Permissions you grant to this role determine what AWS Lambda can do when it assumes the role\. There are two types of permissions that you grant to the IAM role:
+
 + If your Lambda function code accesses other AWS resources, such as to read an object from an S3 bucket or write logs to CloudWatch Logs, you need to grant permissions for relevant Amazon S3 and CloudWatch actions to the role\.
 
    
+
 + If the event source is stream\-based \(Amazon Kinesis Data Streams and DynamoDB streams\), AWS Lambda polls these streams on your behalf\. AWS Lambda needs permissions to poll the stream and read new records on the stream so you need to grant the relevant permissions to this role\. 
 
 For more information about IAM roles, see [Roles \(Delegation and Federation\)](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) in the *IAM User Guide*\. 
@@ -30,15 +35,19 @@ For more information about IAM roles, see [Roles \(Delegation and Federation\)](
 The user that creates the IAM role is, in effect, passing permissions to AWS Lambda to assume this role, which requires the user to have permissions for the `iam:PassRole` action\. If an administrator user is creating this role, you don't need to do anything extra to set up permissions for the `iam:PassRole` action because the administrator user has full permissions, including the `iam:PassRole` action\.
 
 To simplify the process for creating an execution role, AWS Lambda provides the following AWS managed \(predefined\) permissions policies that you can use\. These policies include common permissions for specific scenarios:
+
 + **AWSLambdaBasicExecutionRole** – Grants permissions only for the Amazon CloudWatch Logs actions to write logs\. You can use this policy if your Lambda function does not access any other AWS resources except writing logs\. 
 
    
+
 + **AWSLambdaKinesisExecutionRole** – Grants permissions for Amazon Kinesis Data Streams actions, and CloudWatch Logs actions\. If you are writing a Lambda function to process Kinesis stream events you can attach this permissions policy\.
 
    
+
 + **AWSLambdaDynamoDBExecutionRole** – Grants permissions for DynamoDB streams actions and CloudWatch Logs actions\. If you are writing a Lambda function to process DynamoDB stream events you can attach this permissions policy\.
 
    
+
 + **AWSLambdaVPCAccessExecutionRole** – Grants permissions for Amazon Elastic Compute Cloud \(Amazon EC2\) actions to manage elastic network interfaces \(ENIs\)\. If you are writing a Lambda function to access resources in a VPC in the Amazon Virtual Private Cloud \(Amazon VPC\) service, you can attach this permissions policy\. The policy also grants permissions for CloudWatch Logs actions to write logs\.
 
   You can find these AWS managed permissions policies in the IAM console\. Search for these policies and you can see the permissions each of these policies grant\.
diff --git a/doc_source/invocation-options.md b/doc_source/invocation-options.md
deleted file mode 100644
index 6ab851e..0000000
--- a/doc_source/invocation-options.md
+++ /dev/null
@@ -1,88 +0,0 @@
-# Invocation Types<a name="invocation-options"></a>
-
-AWS Lambda supports synchronous and asynchronous invocation of a Lambda function\. You can control the invocation type only when you invoke a Lambda function \(referred to as *on\-demand invocation*\)\. The following examples illustrate on\-demand invocations:
-+ Your custom application invokes a Lambda function\.
-
-   
-+ You manually invoke a Lambda function \(for example, using the AWS CLI\) for testing purposes\.
-
-In both cases, you invoke your Lambda function using the [Invoke](API_Invoke.md) operation, and you can specify the invocation type as synchronous or asynchronous\. 
-
-However, when you are using AWS services as event sources, the invocation type is predetermined for each of these services\. You don't have any control over the invocation type that these event sources use when they invoke your Lambda function\. For example, Amazon S3 always invokes a Lambda function asynchronously and Amazon Cognito always invokes a Lambda function synchronously\. For stream\-based AWS services \(Amazon Kinesis Streams and Amazon DynamoDB Streams\), AWS Lambda polls the stream and invokes your Lambda function synchronously\.
-
-## Event Source Mapping<a name="intro-invocation-modes"></a>
-
-In AWS Lambda, Lambda functions and event sources are the core components in AWS Lambda\.  An event source is the entity that publishes events, and a Lambda function is the custom code that processes the events\. Supported event sources refer to those AWS services that can be preconfigured to work with AWS Lambda\. The configuration is referred to as *event source mapping*, which maps an event source to a Lambda function\. It enables automatic invocation of your Lambda function when events occur\. 
-
-Each event source mapping identifies the type of events to publish and the Lambda function to invoke when events occur\. The specific Lambda function then receives the event information as a parameter, your Lambda function code can then process the event\. 
-
-Note the following about the event sources\. These event sources can be any of the following:
-+ **AWS services** – These are the supported AWS services that can be preconfigured to work with AWS Lambda\. You can group these services as regular AWS services or stream\-based services\. Amazon Kinesis Data Streams and Amazon DynamoDB Streams are stream\-based event sources, all others AWS services do not use stream\-based event sources\. Where you maintain the event source mapping and how the Lambda function is invoked depends on whether or not you're using a stream\-based event source\.
-+ **Custom applications** – You can have your custom applications publish events and invoke a Lambda function\.
-
-You may be wondering—where do I keep the event mapping information? Do I keep it within the event source or within AWS Lambda? The following sections explain event source mapping for each of these event source categories\. These sections also explain how the Lambda function is invoked and how you manage permissions to allow invocation of your Lambda function\. 
-
-**Topics**
-+ [Event Source Mapping for AWS Services](#non-streaming-event-source-mapping)
-+ [Event Source Mapping for AWS Stream\-Based Services](#streaming-event-source-mapping)
-+ [Event Source Mapping for Custom Applications](#custom-app-event-source-mapping)
-
-### Event Source Mapping for AWS Services<a name="non-streaming-event-source-mapping"></a>
-
-Except for the stream\-based AWS services \(Amazon Kinesis Data Streams and DynamoDB streams\), other supported AWS services publish events and can also invoke your Lambda function \(referred to as the *push model*\)\. In the push model, note the following:
-+ Event source mappings are maintained within the event source\. Relevant API support in the event sources enables you to create and manage event source mappings\. For example, Amazon S3 provides the bucket notification configuration API\. Using this API, you can configure an event source mapping that identifies the bucket events to publish and the Lambda function to invoke\.
-+ Because the event sources invoke your Lambda function, you need to grant the event source the necessary permissions using a resource\-based policy \(referred to as the *Lambda function policy*\)\. For more information, see [AWS Lambda Permissions Model](intro-permission-model.md)\.
-
-The following example illustrates how this model works\.
-
-**Example – Amazon S3 Pushes Events and Invokes a Lambda Function**  
-Suppose that you want your AWS Lambda function invoked for each *object created* bucket event\. You add the necessary event source mapping in the bucket notification configuration\.   
-
-![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/push-s3-example-10.png)
-The diagram illustrates the flow:   
-
-1. The user creates an object in a bucket\.
-
-1. Amazon S3 detects the object created event\.
-
-1. Amazon S3 invokes your Lambda function according to the event source mapping described in the bucket notification configuration\. 
-
-1. AWS Lambda verifies the permissions policy attached to the Lambda function to ensure that Amazon S3 has the necessary permissions\. For more information on permissions policies, see [Authentication and Access Control for AWS Lambda](lambda-auth-and-access-control.md)
-
-1. Once AWS Lambda verifies the attached permissions policy, it executes the Lambda function\. Remember that your Lambda function receives the event as a parameter\.
-
-### Event Source Mapping for AWS Stream\-Based Services<a name="streaming-event-source-mapping"></a>
-
-The Amazon Kinesis Data Streams and DynamoDB streams are the stream\-based services that you can preconfigure to use with AWS Lambda\. After you do the necessary event source mapping, AWS Lambda polls the streams and invokes your Lambda function \(referred to as the *pull model*\)\. In the pull model, note the following:
-+ The event source mappings are maintained within the AWS Lambda\. AWS Lambda provides the relevant APIs to create and manage event source mappings\. For more information, see [CreateEventSourceMapping](API_CreateEventSourceMapping.md)\. 
-+ AWS Lambda needs your permission to poll the stream and read records\. You grant these permissions via the execution role, using the permissions policy associated with role that you specify when you create your Lambda function\. AWS Lambda does not need any permissions to invoke your Lambda function\. 
-
-The following example illustrates how this model works\.
-
-**Example – AWS Lambda Pulls Events from an Kinesis Stream and Invokes a Lambda Function**  
-The following diagram shows a custom application that writes records to an Kinesis stream and how AWS Lambda polls the stream\. When AWS Lambda detects a new record on the stream, it invokes your Lambda function\.  
-Suppose you have a custom application that writes records to a Kinesis stream\. You want to invoke a Lambda function when new records are detected on the stream\. You create a Lambda function and the necessary event source mapping in AWS Lambda\.   
-
-![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/kinesis-pull-10.png)
-The diagram illustrates the following sequence:  
-
-1. The custom application writes records to an Kinesis stream\.
-
-1. AWS Lambda continuously polls the stream, and invokes the Lambda function when the service detects new records on the stream\. AWS Lambda knows which stream to poll and which Lambda function to invoke based on the event source mapping you create in AWS Lambda\. 
-
-1. Assuming the attached permission policy, which allows AWS Lambda to poll the stream, is verified, AWS Lambda then executes the Lambda function\. For more information on permissions policies, see [Authentication and Access Control for AWS Lambda](lambda-auth-and-access-control.md)
-The example uses a Kinesis stream but the same applies when working with a DynamoDB stream\.
-
-### Event Source Mapping for Custom Applications<a name="custom-app-event-source-mapping"></a>
-
-If you have custom applications that publish and process events, you can create a Lambda function to process these events\. In this case, there is no preconfiguration required—you don't have to set up an event source mapping\. Instead, the event source uses the AWS Lambda `Invoke` API\. If the application and Lambda function are owned by different AWS accounts, the AWS account that owns the Lambda function must allow cross\-account permissions in the permissions policy associated with the Lambda function\.
-
-The following example illustrates how this works\.
-
-**Example – Custom Application Publishes Events and Invokes a Lambda Function**  
-The following diagram shows how a custom application in your account can invoke a Lambda function\. In this example, the custom application is using the same account credentials as the account that owns the Lambda function, and, therefore, does not require additional permissions to invoke the function\.  
-
-![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/push-user-app-example-10.png)
-In the following example, the user application and Lambda function are owned by different AWS accounts\. In this case, the AWS account that owns the Lambda function must have cross\-account permissions in the permissions policy associated with the Lambda function\. For more information, see [AWS Lambda Permissions Model](intro-permission-model.md)\.   
-
-![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/push-user-cross-account-app-example-10.png)
\ No newline at end of file
diff --git a/doc_source/invoking-lambda-function.md b/doc_source/invoking-lambda-function.md
index dd884c5..ebb4359 100644
--- a/doc_source/invoking-lambda-function.md
+++ b/doc_source/invoking-lambda-function.md
@@ -1,14 +1,17 @@
 # Supported Event Sources<a name="invoking-lambda-function"></a>
 
-This topic lists the supported AWS services that you can configure as event sources for AWS Lambda functions\. After you preconfigure the event source mapping, your Lambda function gets invoked automatically when these event sources detect events\. For more information about invocation modes, see [Event Source Mapping](invocation-options.md#intro-invocation-modes)\.
+This topic lists the supported AWS services that you can configure as event sources for AWS Lambda functions\. After you preconfigure the event source mapping, your Lambda function gets invoked automatically when these event sources detect events\. For more information about invocation modes, see [Event Source Mapping](java-invocation-options.md#intro-invocation-modes)\.
 
 For all of the event sources listed in this topic, note the following:
-+ Event sources maintain the event source mapping, except for the stream\-based services \(Amazon Kinesis Data Streams and Amazon DynamoDB Streams\)\. For the stream\-based services, AWS Lambda maintains the event source mapping\. AWS Lambda provides the [CreateEventSourceMapping](API_CreateEventSourceMapping.md) operation for you to create and manage the event source mapping\. For more information, see [Event Source Mapping](invocation-options.md#intro-invocation-modes)\.
+
++ Event sources maintain the event source mapping, except for the stream\-based services \(Amazon Kinesis Data Streams and Amazon DynamoDB Streams\)\. For the stream\-based services, AWS Lambda maintains the event source mapping\. AWS Lambda provides the [CreateEventSourceMapping](API_CreateEventSourceMapping.md) operation for you to create and manage the event source mapping\. For more information, see [Event Source Mapping](java-invocation-options.md#intro-invocation-modes)\.
 
    
+
 + The invocation type that these event sources use when invoking a Lambda function is also preconfigured\. For example, Amazon S3 always invokes a Lambda function asynchronously and Amazon Cognito invokes a Lambda function synchronously\. The only time you can control the invocation type is when you are invoking the Lambda function yourself using the [Invoke](API_Invoke.md) operation \(for example, invoking a Lambda function on demand from your custom application\)\.
 
    
+
 + In order to process AWS events, your Lambda functions may need to include additional libraries, depending on the programming language used to create the function\. Functions written in Node\.js or Python do not require any additional libraries\. For C\#, you need to include [AWS Lambda for \.NET Core](https://github.com/aws/aws-lambda-dotnet)\. For Java, you need to include [aws\-lambda\-java\-libs](https://github.com/aws/aws-lambda-java-libs)\.
 **Important**  
 Each of the included packages should be used without modification\. Removing dependencies, adding conflicting dependencies, or selectively including classes from the packages can result in unexpected behavior\. 
@@ -17,7 +20,7 @@ You can also invoke a Lambda function on demand\. For details, see [Other Event
 
 For examples of events that are published by these event sources, see [Sample Events Published by Event Sources](eventsources.md)\.
 
-**Topics**
+
 + [Amazon S3](#supported-event-source-s3)
 + [Amazon DynamoDB](#supported-event-source-dynamo-db)
 + [Amazon Kinesis Data Streams](#supported-event-source-kinesis-streams)
@@ -55,7 +58,7 @@ You can use Lambda functions as triggers for your Amazon DynamoDB table\. Trigge
 
 This is a stream\-based event source\. For stream\-based service, you create event source mapping in AWS Lambda, identifying the stream to poll and which Lambda function to invoke\.
 
-For an example DynamoDB event, see [Step 2\.3\.2: Test the Lambda Function \(Invoke Manually\)](with-dynamodb-create-function.md#with-dbb-invoke-manually) and [Amazon DynamoDB Update Sample Event](eventsources.md#eventsources-ddb-update)\. For general format, see [GetRecord](http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Operations_Amazon_DynamoDB_Streams.htmlAPI_GetRecords.html) in the *Amazon DynamoDB API Reference*\. For an example use case, see [Using AWS Lambda with Amazon DynamoDB](with-ddb.md)\.
+For an example DynamoDB event, see [Step 2\.3\.2: Test the Lambda Function \(Invoke Manually\)](with-dynamodb-create-function.md#with-dbb-invoke-manually) and [Amazon DynamoDB Update Sample Event](eventsources.md#eventsources-ddb-update)\. For general format, see [GetRecord](http://docs.aws.amazon.com/dynamodbstreams/latest/APIReference/API_GetRecords.html) in the *Amazon DynamoDB API Reference*\. For an example use case, see [Using AWS Lambda with Amazon DynamoDB](with-ddb.md)\.
 
 Error handling for a given event source depends on how Lambda is invoked\. DynamoDB is a stream\-based event source\. For more information on how errors are retried, see [Understanding Retry Behavior](retries-on-errors.md)\.
 
@@ -88,7 +91,9 @@ Error handling for a given event source depends on how Lambda is invoked\. Amazo
 Amazon Simple Email Service \(Amazon SES\) is a cost\-effective email service\. With Amazon SES, in addition to sending emails, you can also use the service to receive messages\. For more information about Amazon SES, see [Amazon Simple Email Service](https://aws.amazon.com/ses/)\. When you use Amazon SES to receive messages, you can configure Amazon SES to call your Lambda function when messages arrive\. The service can then invoke your Lambda function by passing in the incoming email event, which in reality is an Amazon SES message in an Amazon SNS event, as a parameter\. For example scenarios, see [Considering Your Use Case for Amazon SES Email Receiving](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-consider-use-case.html)\.
 
 You configure event source mapping using the rule configuration in Amazon SES\. The following topics provide additional information in the *Amazon Simple Email Service Developer Guide*:
+
 + For sample events, see [Lambda Action](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-lambda.html) and [Amazon SES Email Receiving Sample Event](eventsources.md#eventsources-ses-email-receiving)\.
+
 + For Lambda function examples, see [Lambda Function Examples](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-lambda-example-functions.html)\.
 
 Error handling for a given event source depends on how Lambda is invoked\. Amazon SES invokes your Lambda function asynchronously\. For more information on how errors are retried, see [Understanding Retry Behavior](retries-on-errors.md)\.
@@ -164,8 +169,11 @@ Error handling for a given event source depends on how Lambda is invoked\. AWS C
 ## Amazon Alexa<a name="supported-event-source-echo"></a>
 
 You can use Lambda functions to build services that give new skills to Alexa, the Voice assistant on Amazon Echo\. The Alexa Skills Kit provides the APIs, tools, and documentation to create these new skills, powered by your own services running as Lambda functions\. Amazon Echo users can access these new skills by asking Alexa questions or making requests\. For more information, see:
+
 + [Getting Started with Alexa Skills Kit](https://developer.amazon.com/appsandservices/solutions/alexa/alexa-skills-kit/getting-started-guide)\.
+
 + [alexa\-skills\-kit\-sdk\-for\-nodejs ](https://github.com/alexa/alexa-skills-kit-sdk-for-nodejs)
+
 + [alexa\-skills\-kit\-java ](https://github.com/amzn/alexa-skills-kit-java)
 
 Error handling for a given event source depends on how Lambda is invoked\. Amazon Echo is configured to invoke a Lambda function synchronously\. For more information on how errors are retried, see [Understanding Retry Behavior](retries-on-errors.md)\.
@@ -180,14 +188,16 @@ Error handling for a given event source depends on how Lambda is invoked\. Amazo
 
 ## Amazon API Gateway<a name="supported-event-source-api-gateway"></a>
 
-You can invoke a Lambda function over HTTPS\. You can do this by defining a custom REST API endpoint using Amazon API Gateway\. You map individual API operations, such as `GET` and `PUT`, to specific Lambda functions\. When you send an HTTPS request to the API endpoint, the Amazon API Gateway service invokes the corresponding Lambda function\.
+You can invoke a Lambda function over HTTPS\. You can do this by defining a custom REST API and endpoint using Amazon API Gateway\. You map individual API operations, such as `GET` and `PUT`, to specific Lambda functions\. When you send an HTTPS request to the API endpoint, the Amazon API Gateway service invokes the corresponding Lambda function\.
 
 For more information, see [Make Synchronous Calls to Lambda Functions](http://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started.html)\. For an example use case, see [Using AWS Lambda with Amazon API Gateway \(On\-Demand Over HTTPS\)](with-on-demand-https.md)\.
 
 Error handling for a given event source depends on how Lambda is invoked\. Amazon API Gateway is configured to invoke a Lambda function synchronously\. For more information on how errors are retried, see [Understanding Retry Behavior](retries-on-errors.md)\.
 
 In addition, you can also use Lambda functions with other AWS services that publish data to one of the supported AWS event sources listed in this topic\. For example, you can:
+
 + Trigger Lambda functions in response to CloudTrail updates because it records all API access events to an Amazon S3 bucket\.
+
 + Trigger Lambda functions in response to CloudWatch alarms because it publishes alarm events to an Amazon SNS topic\.
 
 ## AWS IoT Button<a name="supported-event-source-iot-button"></a>
@@ -201,9 +211,13 @@ Error handling for a given event source depends on how Lambda is invoked\. AWS I
 ## Amazon CloudFront<a name="supported-event-source-cloudfront"></a>
 
 Lambda@Edge lets you run Lambda functions at AWS Regions and Amazon CloudFront edge locations in response to CloudFront events, without provisioning or managing servers\. You can use Lambda functions to change CloudFront requests and responses at the following points:
+
 + After CloudFront receives a request from a viewer \(viewer request\)
+
 + Before CloudFront forwards the request to the origin \(origin request\)
+
 + After CloudFront receives the response from the origin \(origin response\)
+
 + Before CloudFront forwards the response to the viewer \(viewer response\)
 
 For more information, see [AWS Lambda@Edge](lambda-edge.md)
diff --git a/doc_source/invoking-lambda-functions.md b/doc_source/invoking-lambda-functions.md
index f4a2fee..ddd851c 100644
--- a/doc_source/invoking-lambda-functions.md
+++ b/doc_source/invoking-lambda-functions.md
@@ -1,9 +1,13 @@
 # Invoking Lambda Functions<a name="invoking-lambda-functions"></a>
 
  When building applications on AWS Lambda, including [serverless](https://aws.amazon.com/serverless) applications, the core components are Lambda functions and event sources\. An *event source* is the AWS service or custom application that publishes events, and a *Lambda function* is the custom code that processes the events\. To illustrate, consider the following scenarios:
+
 + **File processing** – Suppose you have a photo sharing application\. People use your application to upload photos, and the application stores these user photos in an Amazon S3 bucket\. Then, your application creates a thumbnail version of each user's photos and displays them on the user's profile page\. In this scenario, you may choose to create a Lambda function that creates a thumbnail automatically\. Amazon S3 is one of the supported AWS event sources that can publish *object\-created events* and invoke your Lambda function\. Your Lambda function code can read the photo object from the S3 bucket, create a thumbnail version, and then save it in another S3 bucket\. 
+
 + **Data and analytics** – Suppose you are building an analytics application and storing raw data in a DynamoDB table\. When you write, update, or delete items in a table, DynamoDB streams can publish item update events to a stream associated with the table\. In this case, the event data provides the item key, event name \(such as insert, update, and delete\), and other relevant details\. You can write a Lambda function to generate custom metrics by aggregating raw data\.
+
 + **Websites** – Suppose you are creating a website and you want to host the backend logic on Lambda\. You can invoke your Lambda function over HTTP using Amazon API Gateway as the HTTP endpoint\. Now, your web client can invoke the API, and then API Gateway can route the request to Lambda\.
+
 + **Mobile applications** – Suppose you have a custom mobile application that produces events\. You can create a Lambda function to process events published by your custom application\. For example, in this scenario you can configure a Lambda function to process the clicks within your custom mobile application\. 
 
 Each of these event sources uses a specific format for the event data\. For more information, see [Sample Events Published by Event Sources](eventsources.md)\. When a Lambda function is invoked, it receives the event as a parameter for the Lambda function\. 
@@ -31,29 +35,37 @@ The diagram illustrates the following sequence:
 1. AWS Lambda executes the Lambda function, specifying the event as a parameter\.
 
 Note the following:
+
 + The event source mapping is maintained within the event source service, Amazon S3 in this scenario\. This is true for all supported AWS event sources except the stream\-based sources \(Kinesis and DynamoDB streams\)\. The next example explains stream\-based event sources\.
+
 + The event source \(Amazon S3\) invokes the Lambda function \(referred to as the *push model*\)\. Again, this is true for all supported AWS services except the stream\-based event sources\.
+
 + In order for the event source \(Amazon S3\) to invoke your Lambda function, you must grant permissions using the permissions policy attached to the Lambda function\.
 
 ## Example 2: AWS Lambda Pulls Events from an Kinesis Stream and Invokes a Lambda Function<a name="example-lambda-pulls-kinesis-streams-events-invokes-function"></a>
 
 For stream\-based event sources, AWS Lambda polls the stream and invokes the Lambda function when records are detected on the stream\. These stream sources are special in that event source mapping information is stored in Lambda\. AWS Lambda provides an API for you to create and manage these event source mappings\. 
 
-The following diagram shows how a custom application writes records to a Kinesis stream\.
+The following diagram shows how a custom application writes records to an Kinesis stream\.
 
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/kinesis-pull-10.png)
 
 The diagram illustrates the following sequence:
 
-1. The custom application writes records to a Kinesis stream\.
+1. The custom application writes records to an Kinesis stream\.
 
 1. AWS Lambda continuously polls the stream, and invokes the Lambda function when the service detects new records on the stream\. AWS Lambda knows which stream to poll and which Lambda function to invoke based on the event source mapping you create in Lambda\.
 
 1. The Lambda function is invoked with the incoming event\.
 
 Note the following:
+
 + When working with stream\-based event sources, the following is true:
+
   + You create event source mappings in AWS Lambda\.
+
   + AWS Lambda invokes the Lambda function \(referred to as the *pull model*\)\.
+
 + AWS Lambda does not need permission to invoke your Lambda function, therefore you don't need to add any permissions to the permissions policy attached to your Lambda function\. 
+
 + Your Lambda role needs permission to read from the stream\.
\ No newline at end of file
diff --git a/doc_source/java-author-using-eclipse-sdk-plugin.md b/doc_source/java-author-using-eclipse-sdk-plugin.md
index 34c6b53..047a9b0 100644
--- a/doc_source/java-author-using-eclipse-sdk-plugin.md
+++ b/doc_source/java-author-using-eclipse-sdk-plugin.md
@@ -1,5 +1,5 @@
 # Authoring Lambda Functions Using Eclipse IDE and AWS SDK Plugin \(Java\)<a name="java-author-using-eclipse-sdk-plugin"></a>
 
-**Topics**
+
 
 AWS SDK Eclipse Toolkit provides an Eclipse plugin for you to both create a deployment package and also upload it to create a Lambda function\. If you can use Eclipse IDE as your development environment, this plugin enables you to author Java code, create and upload a deployment package, and create your Lambda function\. For more information, see the [AWS Toolkit for Eclipse Getting Started Guide](http://docs.aws.amazon.com/AWSToolkitEclipse/latest/GettingStartedGuide/)\. For an example of using the toolkit for authoring Lambda functions, see [Using AWS Lambda with the AWS Toolkit for Eclipse](http://docs.aws.amazon.com/AWSToolkitEclipse/latest/GettingStartedGuide//lambda.html)\. 
\ No newline at end of file
diff --git a/doc_source/java-context-object.md b/doc_source/java-context-object.md
index afddd7b..60bbdec 100644
--- a/doc_source/java-context-object.md
+++ b/doc_source/java-context-object.md
@@ -3,16 +3,27 @@
 You interact with AWS Lambda execution environment via the context parameter\. The context object allows you to access useful information available within the Lambda execution environment\. For example, you can use the context parameter to determine the CloudWatch log stream associated with the function, or use the clientContext property of the context object to learn more about the application calling the Lambda function \(when invoked through the AWS Mobile SDK\)\.
 
 The context object properties are:
+
 + `getMemoryLimitInMB()`: Memory limit, in MB, you configured for the Lambda function\.
+
 + `getFunctionName()`: Name of the Lambda function that is running\.
+
 + `getFunctionVersion()`: The Lambda function version that is executing\. If an alias is used to invoke the function, then `getFunctionVersion` will be the version the alias points to\.
+
 + `getInvokedFunctionArn()`: The ARN used to invoke this function\. It can be function ARN or alias ARN\. An unqualified ARN executes the `$LATEST` version and aliases execute the function version it is pointing to\. 
+
 +  `getAwsRequestId()`: AWS request ID associated with the request\. This is the ID returned to the client that called invoke\(\)\. You can use the request ID for any follow up enquiry with AWS support\. Note that if AWS Lambda retries the function \(for example, in a situation where the Lambda function processing Kinesis records throw an exception\), the request ID remains the same\.
+
 + `getLogStreamName()`: The CloudWatch log stream name for the particular Lambda function execution\. It can be null if the IAM user provided does not have permission for CloudWatch actions\.
+
 + `getLogGroupName()`: The CloudWatch log group name associated with the Lambda function invoked\. It can be null if the IAM user provided does not have permission for CloudWatch actions\.
+
 + `getClientContext()`: Information about the client application and device when invoked through the AWS Mobile SDK\. It can be null\.  Client context provides client information such as client ID, application title, version name, version code, and the application package name\.
+
 +  `getIdentity()`: Information about the Amazon Cognito identity provider when invoked through the AWS Mobile SDK\. It can be null\.
+
 + `getRemainingTimeInMillis()`: Remaining execution time till the function will be terminated, in milliseconds\. At the time you create the Lambda function you set maximum time limit, at which time AWS Lambda will terminate the function execution\. Information about the remaining time of function execution can be used to specify function behavior when nearing the timeout\.
+
 + `getLogger()`: Returns the Lambda logger associated with the Context object\. For more information, see [Logging \(Java\)](java-logging.md)\.
 
  The following Java code snippet shows a handler function that prints some of the context information\. 
@@ -66,12 +77,17 @@ public class Hello {
 ```
 
 You can do the following to test the code:
+
 + Using the preceding code, create a deployment package\.
+
 + Upload the deployment package to AWS Lambda to create your Lambda function\. You can do this using the console or AWS CLI\.
+
 + To test your Lambda function use the "Hello World" **Sample event** that the Lambda console provides\. 
 
   You can type any string and the function will return the same string in uppercase\. In addition, you will also get the useful function information provided by the `context` object\.
 
 Follow the instructions provided in the Getting Started\. For more information, see  [\(Optional\) Create a Lambda Function Authored in Java](get-started-step4-optional.md)\. Note the following differences:
+
 + When you create a deployment package, don't forget the `aws-lambda-java-core` library dependency\.
+
 + When you create the Lambda function, specify `example.Hello::myHandler (package.class::method)` as the handler value\.
\ No newline at end of file
diff --git a/doc_source/java-create-jar-pkg-maven-and-eclipse.md b/doc_source/java-create-jar-pkg-maven-and-eclipse.md
index b7a6743..fdc0e09 100644
--- a/doc_source/java-create-jar-pkg-maven-and-eclipse.md
+++ b/doc_source/java-create-jar-pkg-maven-and-eclipse.md
@@ -2,7 +2,7 @@
 
 This section shows how to package your Java code into a deployment package using Eclipse IDE and Maven plugin for Eclipse\. 
 
-**Topics**
+
 + [Before You Begin](#java-create-jar-pkg-maven-and-eclipse-before-you-begin)
 + [Step 1: Create and Build a Project](#java-create-jar-pkg-maven-and-eclipse-create-project)
 
@@ -29,10 +29,15 @@ In this step, you start Eclipse and create a Maven project\. You will add the ne
    1. In the **New Maven Project** window, choose **Create a simple project**, and leave other default selections\.
 
    1. In the **New Maven Project**, **Configure project** windows, type the following **Artifact** information:
+
       + **Group Id**: doc\-examples
+
       + **Artifact Id**: lambda\-java\-example
+
       + **Version**: 0\.0\.1\-SNAPSHOT
+
       + **Packaging**: jar
+
       + **Name**: lambda\-java\-example
 
 1. Add the `aws-lambda-java-core` dependency to the `pom.xml` file\. 
@@ -56,7 +61,9 @@ If you are following other tutorial topics in this guide, the specific tutorials
    1. Open the context \(right\-click\) menu for the `src/main/java` subdirectory in the project, choose **New**, and then choose **Class**\.
 
    1. In the **New Java Class** window, type the following values:
+
       + **Package**: **example** 
+
       + **Name**: **Hello**
 **Note**  
 If you are following other tutorial topics in this guide, the specific tutorials might recommend different package name or class name\.
@@ -76,8 +83,11 @@ The resulting \.jar, `lambda-java-example-0.0.1-SNAPSHOT.jar`, is not the final
    1. Open the context \(right\-click\) menu for the `pom.xml` file, choose **Maven**, and then choose **Add Plugin**\.
 
    1. In the **Add Plugin** window, type the following values:
+
       + **Group Id:** org\.apache\.maven\.plugins
+
       + **Artifact Id:** maven\-shade\-plugin
+
       + **Version:** 2\.3
 
    1. Now build again\.
diff --git a/doc_source/java-create-jar-pkg-maven-no-ide.md b/doc_source/java-create-jar-pkg-maven-no-ide.md
index 569da65..e62778d 100644
--- a/doc_source/java-create-jar-pkg-maven-no-ide.md
+++ b/doc_source/java-create-jar-pkg-maven-no-ide.md
@@ -2,7 +2,7 @@
 
 This section shows how to package your Java code into a deployment package using Maven at the command line\.
 
-**Topics**
+
 + [Before You Begin](#java-create-jar-pkg-maven-no-ide-pre-req)
 + [Project Structure Overview](#java-create-jar-pkg-maven-no-ide-overview)
 + [Step 1: Create Project](#java-create-jar-pkg-maven-no-ide-create-project)
@@ -46,6 +46,7 @@ Follow the steps in this section to create a Java project\.
 1. Create a project directory \(*project\-dir*\)\. 
 
 1. In the *project\-dir* directory, create the following:
+
    + Project Object Model file, `pom.xml`\. Add the following project information and configuration details for Maven to build the project\.
 
      ```
diff --git a/doc_source/java-exceptions.md b/doc_source/java-exceptions.md
index ce09237..83c48cc 100644
--- a/doc_source/java-exceptions.md
+++ b/doc_source/java-exceptions.md
@@ -19,10 +19,12 @@ If your Lambda function throws an exception, AWS Lambda recognizes the failure a
 Note that the stack trace is returned as the `stackTrace` JSON array of stack trace elements\. 
 
 The method in which you get the error information back depends on the invocation type that you specified at the time you invoked the function: 
+
 + `RequestResponse` invocation type \(that is, synchronous execution\): In this case, you get the error message back\. 
 
   For example, if you invoke a Lambda function using the Lambda console, the `RequestResponse` is always the invocation type and the console displays the error information returned by AWS Lambda in the **Execution result** section as shown in the following image\.  
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/exception-shown-in-console.png)
+
 + `Event` invocation type \(that is, asynchronous execution\): In this case AWS Lambda does not return anything\. Instead, it logs the error information in CloudWatch Logs and CloudWatch metrics\.
 
 Depending on the event source, AWS Lambda may retry the failed Lambda function\. For example, if Kinesis is the event source for the Lambda function, AWS Lambda retries the failed function until the Lambda function succeeds or the records in the stream expire\. 
@@ -32,7 +34,9 @@ Depending on the event source, AWS Lambda may retry the failed Lambda function\.
 You can create custom error handling to raise an exception directly from your Lambda function and handle it directly \(Retry or Catch\) within an AWS Step Functions State Machine\. For more information, see [Handling Error Conditions Using a State Machine](http://docs.aws.amazon.com/step-functions/latest/dg/tutorial-handling-error-conditions.html)\. 
 
 Consider a `CreateAccount` [state](http://docs.aws.amazon.com/step-functions/latest/dg/awl-ref-states.html) is a [task](http://docs.aws.amazon.com/step-functions/latest/dg/awl-ref-states-task.html) that writes a customer's details to a database using a Lambda function\.
+
 + If the task succeeds, an account is created and a welcome email is sent\.
+
 + If a user tries to create an account for a username that already exists, the Lambda function raises an error, causing the state machine to suggest a different username and to retry the account\-creation process\.
 
 The following code samples demonstrate how to do this\. Note that custom errors in Java must extend the `Exception` class\.
diff --git a/doc_source/java-handler-io-type-pojo.md b/doc_source/java-handler-io-type-pojo.md
index 95d7b7a..0939fd0 100644
--- a/doc_source/java-handler-io-type-pojo.md
+++ b/doc_source/java-handler-io-type-pojo.md
@@ -97,8 +97,11 @@ package example;
  The `get` and `set` methods are required in order for the POJOs to work with AWS Lambda's built in JSON serializer\. The constructors that take no arguments are usually not required, however in this example we provided other constructors and therefore we need to explicitly provide the zero argument constructors\.
 
 You can upload this code as your Lambda function and test as follows:
+
 + Using the preceding code files, create a deployment package\.
+
 + Upload the deployment package to AWS Lambda and create your Lambda function\. You can do this using the console or AWS CLI\.
+
 + Invoke the Lambda function manually using the console or the CLI\. You can use provide sample JSON event data when you manually invoke your Lambda function\. For example: 
 
   ```
@@ -106,5 +109,7 @@ You can upload this code as your Lambda function and test as follows:
   ```
 
 For more information, see  [\(Optional\) Create a Lambda Function Authored in Java](get-started-step4-optional.md)\. Note the following differences:
+
 + When you create a deployment package, don't forget the `aws-lambda-java-core` library dependency\.
+
 + When you create the Lambda function, specify `example.HelloPojo::handleRequest` \(*package*\.*class*::*method*\) as the handler value\.
\ No newline at end of file
diff --git a/doc_source/java-handler-io-type-stream.md b/doc_source/java-handler-io-type-stream.md
index 4f530d6..0c62f2f 100644
--- a/doc_source/java-handler-io-type-stream.md
+++ b/doc_source/java-handler-io-type-stream.md
@@ -35,8 +35,11 @@ public class Hello implements RequestStreamHandler{
 ```
 
 You can do the following to test the code:
+
 + Using the preceding code, create a deployment package\.
+
 + Upload the deployment package to AWS Lambda and create your Lambda function\. You can do this using the console or AWS CLI\.
+
 + You can manually invoke the code by providing sample input\. For example:
 
   ```
@@ -44,5 +47,7 @@ You can do the following to test the code:
   ```
 
 Follow instructions provided in the Getting Started\. For more information, see  [\(Optional\) Create a Lambda Function Authored in Java](get-started-step4-optional.md)\. Note the following differences:
+
 + When you create a deployment package, don't forget the `aws-lambda-java-core` library dependency\.
+
 + When you create the Lambda function, specify `example.Hello::handler` \(*package*\.*class*::*method*\) as the handler value\.
\ No newline at end of file
diff --git a/doc_source/java-handler-using-predefined-interfaces.md b/doc_source/java-handler-using-predefined-interfaces.md
index 7ae8e2f..79cda1d 100644
--- a/doc_source/java-handler-using-predefined-interfaces.md
+++ b/doc_source/java-handler-using-predefined-interfaces.md
@@ -133,8 +133,11 @@ public class Response {
 ```
 
 You can create a Lambda function from this code and test the end\-to\-end experience as follows:
+
 + Using the preceding code, create a deployment package\. For more information, see [Creating a Deployment Package \(Java\)](lambda-java-how-to-create-deployment-package.md)
+
 + Upload the deployment package to AWS Lambda and create your Lambda function\.
+
 + Test the Lambda function using either the console or CLI\. You can specify any sample JSON data that conform to the getter and setter in your `Request` class, for example:
 
   ```
@@ -153,7 +156,9 @@ You can create a Lambda function from this code and test the end\-to\-end experi
   ```
 
 Follow instructions provided in the getting started \(see  [\(Optional\) Create a Lambda Function Authored in Java](get-started-step4-optional.md)\)\. Note the following differences:
+
 + When you create a deployment package, don't forget the `aws-lambda-java-core` library dependency\.
+
 + When you create the Lambda function specify `example.Hello` \(*package*\.*class*\) as the handler value\.
 
 ## Example 2: Creating Handler with Stream Input/Output \(Leverage the `RequestStreamHandler` Interface\)<a name="java-handler-using-predefined-interfaces-stream-handler-class"></a>
@@ -192,8 +197,11 @@ public class Hello implements RequestStreamHandler {
 ```
 
 You can create a Lambda function from this code and test the end\-to\-end experience as follows:
+
 + Use the preceding code to create deployment package\.
+
 + Upload the deployment package to AWS Lambda and create your Lambda function\.
+
 + Test the Lambda function using either the console or CLI\. You can specify any sample string data, for example:
 
   ```
@@ -203,5 +211,7 @@ You can create a Lambda function from this code and test the end\-to\-end experi
   The Lambda function will return `TEST` in response\. 
 
 Follow instructions provided in the getting started \(see  [\(Optional\) Create a Lambda Function Authored in Java](get-started-step4-optional.md)\)\. Note the following differences:
+
 + When you create a deployment package, don't forget the `aws-lambda-java-core` library dependency\.
+
 + When you create the Lambda function specify `example.Hello` \(*package*\.*class*\) as the handler value\.
\ No newline at end of file
diff --git a/doc_source/java-invocation-options.md b/doc_source/java-invocation-options.md
index 821a41d..ca56de9 100644
--- a/doc_source/java-invocation-options.md
+++ b/doc_source/java-invocation-options.md
@@ -1,40 +1,42 @@
 # Invocation Types<a name="java-invocation-options"></a>
 
 AWS Lambda supports synchronous and asynchronous invocation of a Lambda function\. You can control the invocation type only when you invoke a Lambda function \(referred to as *on\-demand invocation*\)\. The following examples illustrate on\-demand invocations:
+
 + Your custom application invokes a Lambda function\.
 
    
+
 + You manually invoke a Lambda function \(for example, using the AWS CLI\) for testing purposes\.
 
 In both cases, you invoke your Lambda function using the [Invoke](API_Invoke.md) operation, and you can specify the invocation type as synchronous or asynchronous\. 
 
-However, when you are using AWS services as event sources, the invocation type is predetermined for each service\. You have no control over the invocation type that these event sources use when they invoke your Lambda function\.
-
-For example, Amazon S3 always invokes a Lambda function asynchronously and Amazon Cognito always invokes a Lambda function synchronously\. For poll\-based AWS services \(Amazon Kinesis, Amazon DynamoDB, Amazon Simple Queue Service\), AWS Lambda polls the stream or message queue and invokes your Lambda function synchronously\.
-
-To view a full list of Lambda\-supported event sources and their respective invocation types, see [Supported Event Sources](invoking-lambda-function.md)\.
+However, when you are using AWS services as event sources, the invocation type is predetermined for each of these services\. You don't have any control over the invocation type that these event sources use when they invoke your Lambda function\. For example, Amazon S3 always invokes a Lambda function asynchronously and Amazon Cognito always invokes a Lambda function synchronously\. For stream\-based AWS services \(Amazon Kinesis Streams and Amazon DynamoDB Streams\), AWS Lambda polls the stream and invokes your Lambda function synchronously\.
 
 ## Event Source Mapping<a name="intro-invocation-modes"></a>
 
-Lambda functions and event sources are the core components of AWS Lambda\.  An event source is the entity that publishes events, and a Lambda function is the custom code that processes the events\. Supported event sources are the AWS services that can be preconfigured to work with AWS Lambda\. The configuration is referred to as *event source mapping*, which maps an event source to a Lambda function\. It enables automatic invocation of your Lambda function when events occur\. 
+In AWS Lambda, Lambda functions and event sources are the core components in AWS Lambda\.  An event source is the entity that publishes events, and a Lambda function is the custom code that processes the events\. Supported event sources refer to those AWS services that can be preconfigured to work with AWS Lambda\. The configuration is referred to as *event source mapping*, which maps an event source to a Lambda function\. It enables automatic invocation of your Lambda function when events occur\. 
 
 Each event source mapping identifies the type of events to publish and the Lambda function to invoke when events occur\. The specific Lambda function then receives the event information as a parameter, your Lambda function code can then process the event\. 
 
 Note the following about the event sources\. These event sources can be any of the following:
-+ **AWS services** – These are the supported AWS services that can be preconfigured to work with AWS Lambda\. You can group these services as regular AWS services or poll\-based services\. Amazon Kinesis Data Streams Amazon DynamoDB Streams and Amazon Simple Queue Service are poll\-based event sources\. Where you maintain the event source mapping and how the Lambda function is invoked depends on whether or not you're using a poll\-based event source\.
+
++ **AWS services** – These are the supported AWS services that can be preconfigured to work with AWS Lambda\. You can group these services as regular AWS services or stream\-based services\. Amazon Kinesis Data Streams and Amazon DynamoDB Streams are stream\-based event sources, all others AWS services do not use stream\-based event sources\. Where you maintain the event source mapping and how the Lambda function is invoked depends on whether or not you're using a stream\-based event source\.
+
 + **Custom applications** – You can have your custom applications publish events and invoke a Lambda function\.
 
 You may be wondering—where do I keep the event mapping information? Do I keep it within the event source or within AWS Lambda? The following sections explain event source mapping for each of these event source categories\. These sections also explain how the Lambda function is invoked and how you manage permissions to allow invocation of your Lambda function\. 
 
-**Topics**
+
 + [Event Source Mapping for AWS Services](#non-streaming-event-source-mapping)
-+ [Event Source Mapping for AWS Poll\-Based Services](#streaming-event-source-mapping)
++ [Event Source Mapping for AWS Stream\-Based Services](#streaming-event-source-mapping)
 + [Event Source Mapping for Custom Applications](#custom-app-event-source-mapping)
 
 ### Event Source Mapping for AWS Services<a name="non-streaming-event-source-mapping"></a>
 
-Except for the poll\-based AWS services \(Amazon Kinesis Data Streams and DynamoDB streams or Amazon SQS queues\), other supported AWS services publish events and can also invoke your Lambda function \(referred to as the *push model*\)\. In the push model, note the following:
+Except for the stream\-based AWS services \(Amazon Kinesis Data Streams and DynamoDB streams\), other supported AWS services publish events and can also invoke your Lambda function \(referred to as the *push model*\)\. In the push model, note the following:
+
 + Event source mappings are maintained within the event source\. Relevant API support in the event sources enables you to create and manage event source mappings\. For example, Amazon S3 provides the bucket notification configuration API\. Using this API, you can configure an event source mapping that identifies the bucket events to publish and the Lambda function to invoke\.
+
 + Because the event sources invoke your Lambda function, you need to grant the event source the necessary permissions using a resource\-based policy \(referred to as the *Lambda function policy*\)\. For more information, see [AWS Lambda Permissions Model](intro-permission-model.md)\.
 
 The following example illustrates how this model works\.
@@ -55,29 +57,26 @@ The diagram illustrates the flow:
 
 1. Once AWS Lambda verifies the attached permissions policy, it executes the Lambda function\. Remember that your Lambda function receives the event as a parameter\.
 
-### Event Source Mapping for AWS Poll\-Based Services<a name="streaming-event-source-mapping"></a>
+### Event Source Mapping for AWS Stream\-Based Services<a name="streaming-event-source-mapping"></a>
 
-AWS Lambda supports the following poll\-based services:
-+ [Amazon Kinesis](http://docs.aws.amazon.com/kinesis/latest/dev/)
-+ [Amazon DynamoDB](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/)
-+ [Amazon SQS](http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/)
+The Amazon Kinesis Data Streams and DynamoDB streams are the stream\-based services that you can preconfigure to use with AWS Lambda\. After you do the necessary event source mapping, AWS Lambda polls the streams and invokes your Lambda function \(referred to as the *pull model*\)\. In the pull model, note the following:
 
-Once you have configured the necessary [CreateEventSourceMapping](API_CreateEventSourceMapping.md), AWS Lambda polls the event source and invokes your Lambda function \(referred to as the *pull model*\)\. In the pull model, note the following:
 + The event source mappings are maintained within the AWS Lambda\. AWS Lambda provides the relevant APIs to create and manage event source mappings\. For more information, see [CreateEventSourceMapping](API_CreateEventSourceMapping.md)\. 
-+ AWS Lambda needs your permission to poll Kinesis and DynamoDB streams or Amazon SQS queues and read records\. You grant these permissions via the execution role, using the permissions policy associated with role that you specify when you create your Lambda function\. AWS Lambda does not need any permissions to invoke your Lambda function\. 
+
++ AWS Lambda needs your permission to poll the stream and read records\. You grant these permissions via the execution role, using the permissions policy associated with role that you specify when you create your Lambda function\. AWS Lambda does not need any permissions to invoke your Lambda function\. 
 
 The following example illustrates how this model works\.
 
-**Example – AWS Lambda Pulls Events from an Amazon Kinesis Stream and Invokes a Lambda Function**  
+**Example – AWS Lambda Pulls Events from an Kinesis Stream and Invokes a Lambda Function**  
 The following diagram shows a custom application that writes records to an Kinesis stream and how AWS Lambda polls the stream\. When AWS Lambda detects a new record on the stream, it invokes your Lambda function\.  
-Suppose you have a custom application that writes records to an Amazon Kinesis stream\. You want to invoke a Lambda function when new records are detected on the stream\. You create a Lambda function and the necessary event source mapping in AWS Lambda\.   
+Suppose you have a custom application that writes records to an Kinesis stream\. You want to invoke a Lambda function when new records are detected on the stream\. You create a Lambda function and the necessary event source mapping in AWS Lambda\.   
 
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/kinesis-pull-10.png)
 The diagram illustrates the following sequence:  
 
-1. The custom application writes records to an Amazon Kinesis stream\.
+1. The custom application writes records to an Kinesis stream\.
 
-1. AWS Lambda continuously polls the stream and invokes the Lambda function once the service detects new records on the stream\. AWS Lambda knows which stream to poll and which Lambda function to invoke based on the event source mapping you create in AWS Lambda\. 
+1. AWS Lambda continuously polls the stream, and invokes the Lambda function when the service detects new records on the stream\. AWS Lambda knows which stream to poll and which Lambda function to invoke based on the event source mapping you create in AWS Lambda\. 
 
 1. Assuming the attached permission policy, which allows AWS Lambda to poll the stream, is verified, AWS Lambda then executes the Lambda function\. For more information on permissions policies, see [Authentication and Access Control for AWS Lambda](lambda-auth-and-access-control.md)
 The example uses a Kinesis stream but the same applies when working with a DynamoDB stream\.
diff --git a/doc_source/java-logging-log4j1.md b/doc_source/java-logging-log4j1.md
index 6990d43..7c23a28 100644
--- a/doc_source/java-logging-log4j1.md
+++ b/doc_source/java-logging-log4j1.md
@@ -59,15 +59,23 @@ The following is sample of log entries in CloudWatch Logs\.
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/logging-java-log4j-10.png)
 
 Note:
+
 + AWS Lambda parses the log string in each of the `System.out.println()` and `System.err.println()` statements logs as two separate events \(note the two down arrows in the screenshot\) because of the line break\.
+
 + The Log4j methods \(`log.debug()` and `log.error()`\) produce one CloudWatch event\.
+
 + AWS Lambda runtime adds the `AWSRequestId` in the [MDC](https://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/MDC.html) to the log4j context \(see [Class MDC for log4j v 1\.2 and Class ThreadContext](https://logging.apache.org/log4j/2.x/log4j-api/apidocs/org/apache/logging/log4j/ThreadContext.html)\)\. To get this value in the log as shown, we added `%X{AWSRequestId}` in the conversion pattern in the `log4.properties` file\.
 
 You can do the following to test the code:
+
 + Using the code, create a deployment package\. In your project, don't forget to add the `log4j.properties` file in the *project\-dir*/src/main/resources/ directory\.
+
 + Upload the deployment package to AWS Lambda to create your Lambda function\. 
+
 + To test your Lambda function use a string \("this is a test"\) as sample event\. The handler code receives the sample event but does nothing with it\. It only shows how to write logs\.
 
 Follow the instructions provided in the Getting Started\. For more information, see  [\(Optional\) Create a Lambda Function Authored in Java](get-started-step4-optional.md)\. Note the following differences:
+
 + When you create a deployment package, don't forget the `aws-lambda-java-log4j` dependency for Log4j 1\.2 dependency\. 
+
 + When you create the Lambda function, specify `example.Hello::myHandler (package.class::method)` as the handler value\.
\ No newline at end of file
diff --git a/doc_source/java-logging.md b/doc_source/java-logging.md
index 66d8439..f3d5892 100644
--- a/doc_source/java-logging.md
+++ b/doc_source/java-logging.md
@@ -11,7 +11,9 @@
  Each call to `LambdaLogger.log()` results in a CloudWatch Logs event, provided the event size is within the allowed limits\. For information about CloudWatch Logs limits, see [CloudWatch Logs Limits](http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/cloudwatch_limits_cwl.html) in the *Amazon CloudWatch User Guide*\. For an example, see [Example 2: Writing Logs Using LambdaLogger \(Java\)](#java-wt-logging)\.
 
 In addition, you can also use the following statements in your Lambda function code to generate log entries:
+
 + System\.out\(\)
+
 + System\.err\(\)
 
 However, note that AWS Lambda treats each line returned by `System.out` and `System.err` as a separate event\. This works well when each output line corresponds to a single log entry\. When a log entry has multiple lines of output, AWS Lambda attempts to parse them using line breaks to identify separate events\. For example, the following logs the two words \("Hello" and "world"\) as two separate events:
@@ -23,8 +25,11 @@ System.out.println("Hello \n world");
 ## How to Find Logs<a name="how-to-find-logs-java"></a>
 
 You can find the logs that your Lambda function writes, as follows:
+
 + Find logs in CloudWatch Logs\. The `context` object \(in the `aws-lambda-java-core` library\) provides the `getLogStreamName()` and the `getLogGroupName()` methods\. Using these methods, you can find the specific log stream where logs are written\.
+
 + If you invoke a Lambda function via the console, the invocation type is always `RequestResponse` \(that is, synchronous execution\) and the console displays the logs that the Lambda function writes using the `LambdaLogger` object\. AWS Lambda also returns logs from `System.out` and `System.err` methods\.
+
 + If you invoke a Lambda function programmatically, you can add the `LogType` parameter to retrieve the last 4 KB of log data that is written to CloudWatch Logs\. For more information, see [Invoke](API_Invoke.md)\. AWS Lambda returns this log information in the `x-amz-log-results` header in the response\. If you use the AWS Command Line Interface to invoke the function, you can specify the `--log-type` parameter with value `Tail`\. 
 
 ## Logging Examples \(Java\)<a name="logging-java-examples"></a>
@@ -32,7 +37,9 @@ You can find the logs that your Lambda function writes, as follows:
 This section provides examples of using Custom Appender for Log4j and the `LambdaLogger` objects for logging information\. 
 
 ### Example 1: Writing Logs Using Log4J v2\.8<a name="java-wt-logging-using-log4j2.8"></a>
+
 + The following shows how to build your artifact with Maven to correctly include the Log4j v2\.8 plugins: 
+
   + For Maven pom\.xml:
 
     ```
@@ -56,6 +63,7 @@ This section provides examples of using Custom Appender for Log4j and the `Lambd
       ....
     </dependencies>
     ```
+
   + If using the Maven shade plugin, set the plugin configuration as follows:
 
     ```
@@ -91,6 +99,7 @@ This section provides examples of using Custom Appender for Log4j and the `Lambd
       ...
     </plugins>
     ```
+
   + The following Java code example shows how to use Log4j with Lambda:
 
     ```
@@ -123,6 +132,7 @@ This section provides examples of using Custom Appender for Log4j and the `Lambd
         }
     }
     ```
+
   + The example preceding uses the following log4j2\.xml file to load properties
 
     ```
@@ -178,14 +188,21 @@ The following is sample of log entries in CloudWatch Logs\.
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/logging-java-lambda-logger-10.png)
 
 Note:
+
 + AWS Lambda parses the log string in each of the `System.out.println()` and `System.err.println()` statements logs as two separate events \(note the two down arrows in the screenshot\) because of the line break\.
+
 + The `LambdaLogger.log()` produce one CloudWatch event\.
 
 You can do the following to test the code:
+
 + Using the code, create a deployment package\. 
+
 + Upload the deployment package to AWS Lambda to create your Lambda function\. 
+
 + To test your Lambda function use a string \("this is a test"\) as sample event\. The handler code receives the sample event but does nothing with it\. It only shows how to write logs\.
 
 Follow the instructions provided in the Getting Started\. For more information, see  [\(Optional\) Create a Lambda Function Authored in Java](get-started-step4-optional.md)\. Note the following differences:
+
 + When you create a deployment package, don't forget the `aws-lambda-java-core` library dependency\. 
+
 + When you create the Lambda function, specify `example.Hello::myHandler (package.class::method)` as the handler value\.
\ No newline at end of file
diff --git a/doc_source/java-programming-model-handler-types.md b/doc_source/java-programming-model-handler-types.md
index d9d0d37..25cdbd7 100644
--- a/doc_source/java-programming-model-handler-types.md
+++ b/doc_source/java-programming-model-handler-types.md
@@ -3,7 +3,9 @@
 At the time you create a Lambda function you specify a handler that AWS Lambda can invoke when the service executes the Lambda function on your behalf\. 
 
 Lambda supports two approaches for creating a handler: 
+
 + Loading the handler method directly without having to implement an interface\. This section describes this approach\.
+
 +  Implementing standard interfaces provided as part of `aws-lambda-java-core` library \(interface approach\)\. For more information, see [Leveraging Predefined Interfaces for Creating Handler \(Java\)](java-handler-using-predefined-interfaces.md)\. 
 
 The general syntax for the handler is as follows:
@@ -17,18 +19,25 @@ outputType handler-name(inputType input, Context context) {
 In order for AWS Lambda to successfully invoke a handler it must be invoked with input data that can be serialized into the data type of the `input` parameter\. 
 
 In the syntax, note the following:
+
 +  *inputType* – The first handler parameter is the input to the handler, which can be event data \(published by an event source\) or custom input that you provide such as a string or any custom data object\. In order for AWS Lambda to successfully invoke this handler, the function must be invoked with input data that can be serialized into the data type of the `input` parameter\.
+
 + *outputType* – If you plan to invoke the Lambda function synchronously \(using the `RequestResponse` invocation type\), you can return the output of your function using any of the supported data types\. For example, if you use a Lambda function as a mobile application backend, you are invoking it synchronously\. Your output data type will be serialized into JSON\. 
 
   If you plan to invoke the Lambda function asynchronously \(using the `Event` invocation type\), the `outputType` should be `void`\. For example, if you use AWS Lambda with event sources such as Amazon S3 or Amazon SNS, these event sources invoke the Lambda function using the `Event` invocation type\.
+
 + The *inputType* and *outputType* can be one of the following:
+
   + Primitive Java types \(such as String or int\)\.
+
   + Predefined AWS event types defined in the `aws-lambda-java-events` library\. 
 
     For example `S3Event` is one of the POJOs predefined in the library that provides methods for you to easily read information from the incoming Amazon S3 event\.
+
   + You can also write your own POJO class\. AWS Lambda will automatically serialize and deserialize input and output JSON based on the POJO type\. 
 
   For more information, see [Handler Input/Output Types \(Java\)](java-programming-model-req-resp.md)\.
+
 + You can omit the `Context` object from the handler method signature if it isn't needed\. For more information, see [The Context Object \(Java\)](java-context-object.md)\.
 
 For example, consider the following Java example code\. 
@@ -65,8 +74,11 @@ If your Java code contains multiple methods with same name as the `handler` name
 ## Additional Information<a name="java-programming-model-handler-types-additional-info"></a>
 
 The following topics provide more information about the handler\.
+
 + For more information about the handler input and output types, see [Handler Input/Output Types \(Java\)](java-programming-model-req-resp.md)\.
+
 + For information about using predefined interfaces to create a handler, see [Leveraging Predefined Interfaces for Creating Handler \(Java\)](java-handler-using-predefined-interfaces.md)\. 
 
   If you implement these interfaces, you can validate your handler method signature at compile time\. 
+
 + If your Lambda function throws an exception, AWS Lambda records metrics in CloudWatch indicating that an error occurred\. For more information, see [Function Errors \(Java\)](java-exceptions.md)\.
\ No newline at end of file
diff --git a/doc_source/java-programming-model-req-resp.md b/doc_source/java-programming-model-req-resp.md
index e4371bb..3400a6a 100644
--- a/doc_source/java-programming-model-req-resp.md
+++ b/doc_source/java-programming-model-req-resp.md
@@ -3,8 +3,11 @@
 When AWS Lambda executes the Lambda function, it invokes the handler\. The first parameter is the input to the handler which can be event data \(published by an event source\) or custom input you provide such as a string or any custom data object\. 
 
 AWS Lambda supports the following input/output types for a handler:
+
 + Simple Java types \(AWS Lambda supports the String, Integer, Boolean, Map, and List types\)
+
 + POJO \(Plain Old Java Object\) type
+
 + Stream type \(If you do not want to use POJOs or if Lambda's serialization approach does not meet your needs, you can use the byte stream implementation\. For more information, see [Example: Using Stream for Handler Input/Output \(Java\)](java-handler-io-type-stream.md)\.\)
 
 ## Handler Input/Output: String Type<a name="java-programming-model-req-resp-string"></a>
diff --git a/doc_source/java-programming-model.md b/doc_source/java-programming-model.md
index e50818a..8ddb8eb 100644
--- a/doc_source/java-programming-model.md
+++ b/doc_source/java-programming-model.md
@@ -2,7 +2,7 @@
 
 The following sections explain how [common programming patterns and core concepts](http://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html) apply when authoring Lambda function code in Java\.
 
-**Topics**
+
 + [Lambda Function Handler \(Java\)](java-programming-model-handler-types.md)
 + [The Context Object \(Java\)](java-context-object.md)
 + [Logging \(Java\)](java-logging.md)
@@ -11,9 +11,13 @@ The following sections explain how [common programming patterns and core concept
 + [\(Optional\) Create a Lambda Function Authored in Java](get-started-step4-optional.md)
 
 Additionally, note that AWS Lambda provides the following libraries:
+
 + **aws\-lambda\-java\-core** – This library provides the Context object, `RequestStreamHandler`, and the `RequestHandler` interfaces\. The `Context` object \([The Context Object \(Java\)](java-context-object.md)\) provides runtime information about your Lambda function\. The predefined interfaces provide one way of defining your Lambda function handler\. For more information, see [Leveraging Predefined Interfaces for Creating Handler \(Java\)](java-handler-using-predefined-interfaces.md)\.
+
 + **aws\-lambda\-java\-events** – This library provides predefined types that you can use when writing Lambda functions to process events published by Amazon S3, Kinesis, Amazon SNS, and Amazon Cognito\. These classes help you process the event without having to write your own custom serialization logic\.
+
 + **Custom Appender for Log4j2\.8** – You can use the custom Log4j \(see [Apache Log4j 2](http://logging.apache.org/log4j/2.x)\) appender provided by AWS Lambda for logging from your lambda functions\. Every call to Log4j methods, such as log\.debug\(\) or log\.error\(\), will result in a CloudWatch Logs event\. The custom appender is called LambdaAppender and must be used in the log4j2\.xml file\. You must include the aws\-lambda\-java\-log4j2 artifact \(artifactId:aws\-lambda\-java\-log4j2\) in the deployment package \(\.jar file\)\.For more information, see [Logging \(Java\)](java-logging.md)\.
+
 + **Custom Appender for Log4j1\.2 ** – You can use the custom Log4j \(see [Apache Log4j 1\.2](http://logging.apache.org/log4j/1.2)\) appender provided by AWS Lambda for logging from your lambda functions\. For more information, see [Logging \(Java\)](java-logging.md)\.
 **Note**  
 Support for the Log4j v1\.2 custom appender is marked for End\-Of\-Life\. It will not receive ongoing updates and is not recommended for use\.
diff --git a/doc_source/lambda-api-permissions-ref.md b/doc_source/lambda-api-permissions-ref.md
index 7e03466..8550366 100644
--- a/doc_source/lambda-api-permissions-ref.md
+++ b/doc_source/lambda-api-permissions-ref.md
@@ -10,9 +10,13 @@ Permissions for the AWS Lambda `Invoke` API in the following table can also be g
 You can use AWS\-wide condition keys in your AWS Lambda policies to express conditions\. For a complete list of AWS\-wide keys, see [Available Keys for Conditions](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html#AvailableKeys) in the *IAM User Guide*\. 
 
 AWS Lambda also offers predefined condition keys to a limited set of API operations\. For example, you can: 
+
 + Restrict access based on the Lambda function ARN \(Amazon Resource Name\) to the following operations: 
+
   + CreateEventSourceMapping
+
   + DeleteEventSourceMapping
+
   + UpdateEventSourceMapping
 
   The following is an example policy that applies this condition:
@@ -31,8 +35,11 @@ AWS Lambda also offers predefined condition keys to a limited set of API operati
         }
     ]
   ```
+
 + Restrict mapping based on the AWS service principal to the following operations:
+
   + AddPermission
+
   + RemovePermission
 
    The following is an example policy that applies this condition:
@@ -62,7 +69,7 @@ If you see an expand arrow \(**↗**\) in the upper\-right corner of the table,
 |   **API:** [AddPermission](API_AddPermission.md) **Required Permission:** `lambda:AddPermission` |   `arn:aws:lambda:region:account-id:function:function-name`  | lambda:Principal | 
 |   **API:** [CreateAlias](API_CreateAlias.md) **Required Permission:** `lambda:CreateAlias`  |   `arn:aws:lambda:region:account-id:function:function-name`  | N/A  | 
 |   **API:** [CreateEventSourceMapping](API_CreateEventSourceMapping.md)  **Required Permissions:** `lambda:CreateEventSourceMapping`  | \* |   `lambda:FunctionArn` | 
-|  The following permissions should be added to the Lambda function execution role \(IAM role\)\. If you are mapping to a Kinesis stream event source, use: `kinesis:DescribeStreams`,` kinesis:DescribeStream`, `kinesis:ListStreams`, `kinesis:GetShardIterator`, and `Kinesis:GetRecords`  If you are mapping to a DynamoDB stream event source, use: `dynamodb:DescribeStreams`,` dynamodb:DescribeStream`, `dynamodb:ListStreams`, `dynamodb:GetShardIterator`, and `dynamodb:GetRecords`  \(To create an event source mapping in AWS Lambda, you need an existing Lambda function for which you are creating an event source mapping\. The execution role \(IAM role\) of the Lambda function must have permissions to access the API of the event source to which the Lambda function is being mapped\.   | `arn:aws:kinesis:region:account-id:stream/stream-name` | N/A | 
+|  The following permissions should be added to the Lambda function execution role \(IAM role\)\. If you are mapping to an Kinesis stream event source, use: `kinesis:DescribeStreams`,` kinesis:DescribeStream`, `kinesis:ListStreams`, `kinesis:GetShardIterator`, and `Kinesis:GetRecords`  If you are mapping to a DynamoDB stream event source, use: `dynamodb:DescribeStreams`,` dynamodb:DescribeStream`, `dynamodb:ListStreams`, `dynamodb:GetShardIterator`, and `dynamodb:GetRecords`  \(To create an event source mapping in AWS Lambda, you need an existing Lambda function for which you are creating an event source mapping\. The execution role \(IAM role\) of the Lambda function must have permissions to access the API of the event source to which the Lambda function is being mapped\.   | `arn:aws:kinesis:region:account-id:stream/stream-name` | N/A | 
 |  **API:** [CreateFunction](API_CreateFunction.md) **Required Permissions:** `lambda:CreateFunction` |  arn:aws:lambda:region:account\-id: function:function\-name  | N/A  | 
 |  `iam:PassRole`  The user creating the function must have permissions for this action on the IAM role that the user specifies as the execution role at the time that the Lambda function is created\. This is the role that AWS Lambda assumes to execute the Lambda function\. The user must have permissions to pass the role to AWS Lambda\.  |   `arn:aws:iam::account-id:role/role-name`   | N/A | 
 |  `ec2:DescribeSecurityGroups`  Required only if you are specifying VPC configuration information when creating a Lambda function\.  |  \* | N/A | 
diff --git a/doc_source/lambda-app.md b/doc_source/lambda-app.md
index 301b7a7..635679f 100644
--- a/doc_source/lambda-app.md
+++ b/doc_source/lambda-app.md
@@ -1,14 +1,17 @@
 # Building Lambda Functions<a name="lambda-app"></a>
 
-You upload your application code in the form of one or more *Lambda functions* to AWS Lambda, a compute service\. In turn, AWS Lambda executes the code on your behalf\. AWS Lambda takes care of provisioning and managing the servers to run the code upon invocation\.
+You upload your application code in the form of one or more *Lambda functions* to AWS Lambda, a compute service, and the service can run the code on your behalf\. AWS Lambda takes care of provisioning and managing the servers to run the code upon invocation\.
 
 Typically, the lifecycle for an AWS Lambda\-based application includes authoring code, deploying code to AWS Lambda, and then monitoring and troubleshooting\. The following are general questions that come up in each of these lifecycle phases:
+
 + **Authoring code for your Lambda function** – What languages are supported? Is there a programming model that I need to follow? How do I package my code and dependencies for uploading to AWS Lambda? What tools are available?
 
    
+
 + **Uploading code and creating Lambda functions** – How do I upload my code package to AWS Lambda? How do I tell AWS Lambda where to begin executing my code? How do I specify compute requirements like memory and timeout? 
 
    
+
 + **Monitoring and troubleshooting** – For my Lambda function that is in production, what metrics are available? If there are any failures, how do I get logs or troubleshoot issues?
 
 The following sections provide introductory information and the Example section at the end provides working examples for you to explore\.
@@ -16,7 +19,9 @@ The following sections provide introductory information and the Example section
 ## Authoring Code for Your Lambda Function<a name="lambda-app-author"></a>
 
 You can author your Lambda function code in the languages that are supported by AWS Lambda\. For a list of supported languages, see [Lambda Execution Environment and Available Libraries](current-supported-versions.md)\. There are tools for authoring code, such as the AWS Lambda console, Eclipse IDE, and Visual Studio IDE\. But the available tools and options depend on the following:
+
 + Language you choose to write your Lambda function code\. 
+
 + Libraries that you use in your code\. AWS Lambda runtime provides some of the libraries and you must upload any additional libraries that you use\. 
 
 The following table lists languages, and the available tools and options that you can use\.
@@ -41,10 +46,7 @@ After you familiarize yourself with AWS Lambda, see the [Use Cases](use-cases.md
 
 To create a Lambda function, you first package your code and dependencies in a deployment package\. Then, you upload the deployment package to AWS Lambda to create your Lambda function\. 
 
-**Topics**
-+ [Creating a Deployment Package](#lambda-app-structure-code)
-+ [Uploading a Deployment Package](#lambda-app-upload-deployment-pkg)
-+ [Testing a Lambda Function](#lambda-app-test-code)
+
 
 ### Creating a Deployment Package – Organizing Code and Dependencies<a name="lambda-app-structure-code"></a>
 
@@ -61,8 +63,11 @@ In addition to providing your deployment package, you can provide configuration
 ### Testing a Lambda Function<a name="lambda-app-test-code"></a>
 
 If your Lambda function is designed to process events of a specific type, you can use sample event data to test your Lambda function using one of the following methods:
+
 + Test your Lambda function in the console\. 
+
 + Test your Lambda function using the AWS CLI\. You can use the `Invoke` method to invoke your Lambda function and pass in sample event data\.
+
 + Test your Lambda function locally using [Test Your Serverless Applications Locally Using SAM Local \(Public Beta\)](test-sam-local.md)\.
 
 The console provides sample event data\. The same data is also provided in the [Sample Events Published by Event Sources](eventsources.md) topic, which you can use in the AWS CLI to invoke your Lambda function\.
@@ -76,9 +81,11 @@ To help you troubleshoot failures in a function, Lambda logs all requests handle
 ## AWS Lambda\-Based Application Examples<a name="lambda-app-examples"></a>
 
 This guide provides several examples with step\-by\-step instructions\. If you are new to AWS Lambda, we recommend you try the following exercises:
+
 + [Getting Started](getting-started.md) – The Getting Started exercise provides a console\-based experience\. Sample code is provided for your preferred runtimes\. You can also code within the console, using the [Code Editor](https://docs.aws.amazon.com/lambda/latest/dg/code-editor.html) and upload it to AWS Lambda, and test it using sample event data provided in the console\.
 
    
+
 + [Use Cases](use-cases.md) – If you cannot author your code using the console, you must create your own deployment packages and use the AWS CLI \(or SDKs\) to create your Lambda function\. For more information, see [Authoring Code for Your Lambda Function](#lambda-app-author)\. Most examples in the Use Cases section use the AWS CLI\. If you are new to AWS Lambda, we recommend that you try one of these exercises\. 
 
 ## Related Topics<a name="building-apps-related-topics"></a>
diff --git a/doc_source/lambda-auth-and-access-control.md b/doc_source/lambda-auth-and-access-control.md
index 2c2eb44..e5c5cae 100644
--- a/doc_source/lambda-auth-and-access-control.md
+++ b/doc_source/lambda-auth-and-access-control.md
@@ -1,13 +1,17 @@
 # Authentication and Access Control for AWS Lambda<a name="lambda-auth-and-access-control"></a>
 
 Access to AWS Lambda requires credentials that AWS can use to authenticate your requests\. Those credentials must have permissions to access AWS resources, such as an AWS Lambda function or an Amazon S3 bucket\. The following sections provide details on how you can use [AWS Identity and Access Management \(IAM\)](http://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html) and Lambda to help secure your resources by controlling who can access them:
+
 + [Authentication](#authentication)
+
 + [Access Control](#access-control)
 
 ## Authentication<a name="authentication"></a>
 
 You can access AWS as any of the following types of identities:
+
 + **AWS account root user** – When you first create an AWS account, you begin with a single sign\-in identity that has complete access to all AWS services and resources in the account\. This identity is called the AWS account *root user* and is accessed by signing in with the email address and password that you used to create the account\. We strongly recommend that you do not use the root user for your everyday tasks, even the administrative ones\. Instead, adhere to the [best practice of using the root user only to create your first IAM user](http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#create-iam-users)\. Then securely lock away the root user credentials and use them to perform only a few account and service management tasks\.
+
 + **IAM user** – An [IAM user](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_users.html) is an identity within your AWS account that has specific custom permissions \(for example, permissions to create a function in Lambda\)\. You can use an IAM user name and password to sign in to secure AWS webpages like the [AWS Management Console](https://console.aws.amazon.com/), [AWS Discussion Forums](https://forums.aws.amazon.com/), or the [AWS Support Center](https://console.aws.amazon.com/support/home#/)\.
 
    
@@ -15,15 +19,19 @@ You can access AWS as any of the following types of identities:
   In addition to a user name and password, you can also generate [access keys](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html) for each user\. You can use these keys when you access AWS services programmatically, either through [one of the several SDKs](https://aws.amazon.com/tools/) or by using the [AWS Command Line Interface \(CLI\)](https://aws.amazon.com/cli/)\. The SDK and CLI tools use the access keys to cryptographically sign your request\. If you don’t use AWS tools, you must sign the request yourself\. Lambda supports *Signature Version 4*, a protocol for authenticating inbound API requests\. For more information about authenticating requests, see [Signature Version 4 Signing Process](http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html) in the *AWS General Reference*\.
 
    
+
 + **IAM role** – An [IAM role](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) is an IAM identity that you can create in your account that has specific permissions\. It is similar to an *IAM user*, but it is not associated with a specific person\. An IAM role enables you to obtain temporary access keys that can be used to access AWS services and resources\. IAM roles with temporary credentials are useful in the following situations:
 
    
+
   + **Federated user access** – Instead of creating an IAM user, you can use existing user identities from AWS Directory Service, your enterprise user directory, or a web identity provider\. These are known as *federated users*\. AWS assigns a role to a federated user when access is requested through an [identity provider](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers.html)\. For more information about federated users, see [Federated Users and Roles](http://docs.aws.amazon.com/IAM/latest/UserGuide/introduction_access-management.html#intro-access-roles) in the *IAM User Guide*\. 
 
      
+
   + **AWS service access** – You can use an IAM role in your account to grant an AWS service permissions to access your account’s resources\. For example, you can create a role that allows Amazon Redshift to access an Amazon S3 bucket on your behalf and then load data from that bucket into an Amazon Redshift cluster\. For more information, see [Creating a Role to Delegate Permissions to an AWS Service](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-service.html) in the *IAM User Guide*\. 
 
       
+
   + **Applications running on Amazon EC2** – You can use an IAM role to manage temporary credentials for applications that are running on an EC2 instance and making AWS API requests\. This is preferable to storing access keys within the EC2 instance\. To assign an AWS role to an EC2 instance and make it available to all of its applications, you create an instance profile that is attached to the instance\. An instance profile contains the role and enables programs that are running on the EC2 instance to get temporary credentials\. For more information, see [Using an IAM Role to Grant Permissions to Applications Running on Amazon EC2 Instances](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html) in the *IAM User Guide*\. 
 
 ## Access Control<a name="access-control"></a>
@@ -31,6 +39,9 @@ You can access AWS as any of the following types of identities:
 You can have valid credentials to authenticate your requests, but unless you have permissions you cannot create or access AWS Lambda resources\. For example, you must have permissions to create a Lambda function, add an event source, and publish a version of your Lambda function\.
 
 The following sections describe how to manage permissions for AWS Lambda\. We recommend that you read the overview first\.
+
 + [Overview of Managing Access Permissions to Your AWS Lambda Resources](access-control-overview.md)
+
 +  [Using Identity\-Based Policies \(IAM Policies\) for AWS Lambda](access-control-identity-based.md) 
+
 +  [Using Resource\-Based Policies for AWS Lambda \(Lambda Function Policies\)](access-control-resource-based.md) 
\ No newline at end of file
diff --git a/doc_source/lambda-dotnet-coreclr-deployment-package.md b/doc_source/lambda-dotnet-coreclr-deployment-package.md
index 1f466b0..3c2a314 100644
--- a/doc_source/lambda-dotnet-coreclr-deployment-package.md
+++ b/doc_source/lambda-dotnet-coreclr-deployment-package.md
@@ -59,7 +59,9 @@ So, for example, if you wanted to create a console project, you would do the fol
 1. Enter the following command: `dotnet new console -o myproject`
 
    This will create the following files in your *example* directory:
+
    + Program\.cs, which is where you write your Lambda function code\. 
+
    + MyProject\.csproj, an XML file that lists the files and dependencies that comprise your\.NET application\.
 
 AWS Lambda offers additional templates via the [Amazon\.Lambda\.Templates](https://www.nuget.org/packages/Amazon.Lambda.Templates) nuget package\. To install this package, run the following command:
@@ -136,6 +138,7 @@ string - Optional
 ```
 
 These are optional values you can set when you create your Lambda function and will then be automatically written to the `aws-lambda-tools-defaults.json` file, which is built as part of the function\-creation process\. The following explains what they mean: 
+
 + **\-\-profile: **Your execution role\.
 
   To create an IAM role \(execution role\): 
@@ -143,8 +146,11 @@ These are optional values you can set when you create your Lambda function and w
   1. Sign in to the AWS Management Console and open the IAM console at [https://console\.aws\.amazon\.com/iam/](https://console.aws.amazon.com/iam/)\.
 
   1. Follow the steps in [IAM Roles](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) in the *IAM User Guide* to create an IAM role \(execution role\)\. As you follow the steps to create a role, note the following: 
+
      + In **Select Role Type**, choose **AWS Service Roles**, and then choose **AWS Lambda**\.
+
      + In **Attach Policy**, choose the policy that best fits your Lambda function's requirements\. If it's not interacting with any other AWS services, you would would choose **AWSLambdaBasicExecutionRole**\. However, say your Lambda function is interacting with Kinesis, then you would choose the **AWSLambdaKinesisExecutionRole**\. 
+
 + **\-\-region: **The Amazon Region in which your function will reside\.
 
  For example, to create a Lambda function, run the following command, substituting the values of the `--region` parameter with the region of your choice and `--profile` with your IAM profile: 
@@ -162,6 +168,7 @@ This should create a directory structure similar to the following:
 ```
 
 Under the `src/myfunction` directory, examine the following files:
+
 + **aws\-lambda\-tools\-default\.json**: This is where you specify the command line options when deploying your Lambda function\. For example:
 
   ```
@@ -174,6 +181,7 @@ Under the `src/myfunction` directory, examine the following files:
     "function-timeout" : 30,
     "function-handler" : "MyFunction::MyFunction.Function::FunctionHandler"
   ```
+
 + **Function\.cs**: Your Lambda handler function code\. It's a C\# template that includes the default `Amazon.Lambda.Core` library and a default `LambdaSerializer` attribute\. For more information on serialization requirements and options, see [Serializing Lambda Functions](#lambda-dotnet-add-serializer)\. It also includes a sample function that you can edit to apply your Lambda function code\. 
 
   ```
@@ -199,6 +207,7 @@ Under the `src/myfunction` directory, examine the following files:
       }
   }
   ```
+
 + **MyFunction\.csproj**: An [MSBuild](https://msdn.microsoft.com/en-us/library/dd393574.aspx) file that lists the files and assemblies that comprise your application\. Note specifically that it includes the `Amazon.Lambda.Tools` package, the extension that makes available the Lambda templates described previously\.
 
   ```
@@ -219,9 +228,11 @@ Under the `src/myfunction` directory, examine the following files:
   
   </Project>
   ```
+
 + **Readme**: Use this file to document your Lambda function\.
 
 Under the `myfunction/test directory, examine the following files:`
+
 + **myFunction\.Tests\.csproj**: As noted above, this is an [MSBuild](https://msdn.microsoft.com/en-us/library/dd393574.aspx) file that lists the files and assemblies that comprise your test project\. Note also that it includes the `Amazon.Lambda.Core` library, allowing you to seamlesssly integrate any Lambda templates required to test your function\.
 
   ```
@@ -232,6 +243,7 @@ Under the `myfunction/test directory, examine the following files:`
     
      ...
   ```
+
 + **FunctionTest\.cs**: The same C\# code template file that it is included in the `src` directory\. Edit this file to mirror your function's production code and test it before uploading your Lambda function to a production environment\.
 
   ```
@@ -294,11 +306,15 @@ REPORT RequestId: id  Duration: 0.99 ms       Billed Duration: 100 ms         Me
 ## Serializing Lambda Functions<a name="lambda-dotnet-add-serializer"></a>
 
 For any Lambda functions that use input or output types other than a `Stream` object, you will need to add a serialization library to your application\. You can do this in the following ways:
+
 + Use Json\.NET\. Lambda will provide an implementation for JSON serializer using JSON\.NET as a [NuGet](https://www.nuget.org) package\.
+
 + Create your own serialization library by implementing the `ILambdaSerializer` interface, which is available as part of the `Amazon.Lambda.Core` library\. The interface defines two methods:
+
   + `T Deserialize<T>(Stream requestStream);`
 
      You implement this method to deserialize the request payload from the `Invoke` API into the object that is passed to the Lambda function handler\.
+
   + `T Serialize<T>(T response, Stream responseStream);`\.
 
      You implement this method to serialize the result returned from the Lambda function handler into the response payload that is returned by the `Invoke` API\.
diff --git a/doc_source/lambda-dotnet-create-deployment-package-toolkit.md b/doc_source/lambda-dotnet-create-deployment-package-toolkit.md
index 71f0a82..173cdd2 100644
--- a/doc_source/lambda-dotnet-create-deployment-package-toolkit.md
+++ b/doc_source/lambda-dotnet-create-deployment-package-toolkit.md
@@ -1,6 +1,6 @@
 # AWS Toolkit for Visual Studio<a name="lambda-dotnet-create-deployment-package-toolkit"></a>
 
-You can build \.NET\-based Lambda applications using the Lambda plugin to the [AWS Toolkit for Visual Studio]()\. The plugin is available as part of a [Nuget](https://www.nuget.org/packages/Amazon.Lambda/) package\.
+You can build \.NET\-based Lambda applications using the Lambda plugin to the AWS Toolkit for Visual Studio\. The plugin is available as part of a [Nuget](https://www.nuget.org/packages/Amazon.Lambda/) package\.
 
 ## Step 1: Create and Build a Project<a name="dotnet-vs-create-project"></a>
 
@@ -15,14 +15,19 @@ You can build \.NET\-based Lambda applications using the Lambda plugin to the [A
    1. To create a Lambda application from scratch, choose **Blank Function** and then choose **Finish**\. 
 
 1. Examine the `aws-lambda-tools-defaults.json` file, which is created as part of your project\. You can set the options in this file, which is read by the Lambda tooling by default\. The project templates created in Visual Studio set many of these fields with default values\. Note the following fields:
+
    + **profile:** The IAM role required for your Lambda function's execution\. If you have not yet created an execution role, do the following:
 
      1. Sign in to the AWS Management Console and open the IAM console at [https://console\.aws\.amazon\.com/iam/](https://console.aws.amazon.com/iam/)\.
 
      1. Follow the steps in [Creating a Role to Delegate Permissions to an AWS Service](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-service.html) in the *IAM User Guide* to create an IAM role \(execution role\)\. As you follow the steps to create a role, note the following:
+
         + In **Role Name**, use a name that is unique within your AWS account\. 
+
         + In **Select Role Type**, choose **AWS Service Roles**, and then choose a service role that grants that service permissions to assume the role\.
+
         + In **Attach Policy**, choose a permissions policy that is suitable to execute your Lambda function\.
+
    + **function\-handler:** This is where the `function handler` is specified, which is why you don't have to set it in the wizard\. However, whenever you rename the *Assembly*, *Namespace*, *Class* or *Function* in your function code, you will need to update the corresponding fields in the `aws-lambda-tools-defaults.json file`\.
 
      ```
@@ -46,10 +51,15 @@ You can build \.NET\-based Lambda applications using the Lambda plugin to the [A
 1. In the **Upload Lambda Function** window, type a name for the function or select a previously published function to republish\. Then choose **Next**
 
 1. In the **Advanced Function Details** window, do the following: 
+
    + Specify the **Role Name:**, the IAM role mentioned previously\.
+
    + \(Optional\) In **Environment::** specify any environment variables you wish to use\. For more information, see [Environment Variables](env_variables.md)\.
+
    + \(Optional\) Specify the **Memory \(MB\):** or **Timeout \(Secs\):** configurations\.
+
    + \(Optional\) Specify any **VPC:** configurations if your Lambda function needs to access resources running inside a VPC\. For more information, see [Configuring a Lambda Function to Access Resources in an Amazon VPC](vpc.md)\.
+
    + Choose **Next** and then choose **Upload** to deploy your application\.
 
 For more information, see [Deploying an AWS Lambda Project with the \.NET Core CLI](https://docs.aws.amazon.com/toolkit-for-visual-studio/latest/user-guide/welcome.html)\.
\ No newline at end of file
diff --git a/doc_source/lambda-dotnet-how-to-create-deployment-package.md b/doc_source/lambda-dotnet-how-to-create-deployment-package.md
index ba988b7..e953c5f 100644
--- a/doc_source/lambda-dotnet-how-to-create-deployment-package.md
+++ b/doc_source/lambda-dotnet-how-to-create-deployment-package.md
@@ -5,6 +5,6 @@ A \.NET Core Lambda deployment package is a zip file of your function's compiled
 **Note**  
 Although it is possible to create the deployment package with the `dotnet publish` command, we suggest you create the deployment package with either the [AWS Toolkit for Visual Studio](lambda-dotnet-create-deployment-package-toolkit.md) or the [\.NET Core CLI](lambda-dotnet-coreclr-deployment-package.md)\. These are tools optimized specifically for Lambda to ensure the `lambda-project.runtimeconfig.json` file exists and optimizes the package bundle, including the removal of any non\-Linux\-based dependencies\. 
 
-**Topics**
+
 + [\.NET Core CLI](lambda-dotnet-coreclr-deployment-package.md)
 + [AWS Toolkit for Visual Studio](lambda-dotnet-create-deployment-package-toolkit.md)
\ No newline at end of file
diff --git a/doc_source/lambda-edge.md b/doc_source/lambda-edge.md
index 780b49e..27646e7 100644
--- a/doc_source/lambda-edge.md
+++ b/doc_source/lambda-edge.md
@@ -1,9 +1,13 @@
 # AWS Lambda@Edge<a name="lambda-edge"></a>
 
-Lambda@Edge lets you run Lambda functions to customize content that CloudFront delivers, executing the functions in AWS locations closer to the viewer\. The functions run in response to CloudFront events, without provisioning or managing servers\. You can use Lambda functions to change CloudFront requests and responses at the following points:
+Lambda@Edge lets you run Lambda functions at AWS Regions and Amazon CloudFront edge locations in response to CloudFront events, without provisioning or managing servers\. You can use Lambda functions to change CloudFront requests and responses at the following points:
+
 + After CloudFront receives a request from a viewer \(viewer request\)
+
 + Before CloudFront forwards the request to the origin \(origin request\)
+
 + After CloudFront receives the response from the origin \(origin response\)
+
 + Before CloudFront forwards the response to the viewer \(viewer response\)
 
 ![\[Conceptual graphic that shows how the CloudFront events that can trigger a Lambda function.\]](http://docs.aws.amazon.com/lambda/latest/dg/images/cloudfront-events-that-trigger-lambda-functions.png)
@@ -11,15 +15,20 @@ Lambda@Edge lets you run Lambda functions to customize content that CloudFront d
 You can also generate responses to viewers without ever sending the request to the origin\.
 
 You write Lambda functions for CloudFront in Node\.js 6\.10\. With Lambda@Edge, you can build a variety of solutions, for example:
+
 + Inspect cookies to rewrite URLs to different versions of a site for A/B testing\.
+
 + Send different objects to your users based on the `User-Agent` header, which contains information about the device that submitted the request\. For example, you can send images in different resolutions to users based on their devices\.
+
 + Inspect headers or authorized tokens, inserting a corresponding header and allowing access control before forwarding a request to the origin\.
+
 + Add, delete, and modify headers, and rewrite the URL path to direct users to different objects in the cache\.
+
 + Generate new HTTP responses to do things like redirect unauthenticated users to login pages, or create and deliver static webpages right from the edge\. For more information, see [Using Lambda Functions to Generate HTTP Responses to Viewer and Origin Requests](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/http-response-generation.html) in the *Amazon CloudFront Developer Guide*\.
 
-The subsequent links pertain to content that has been moved to [Using CloudFront with Lambda@Edge](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-at-the-edge.html) in the *Amazon CloudFront Developer Guide*\. If you have bookmarked any of this content, be advised that you should update those bookmarks\. Each section following will provide you with an updated link\.
+For more information about setting up CloudFront with Lambda@Edge, including sample code, see [Using CloudFront with Lambda@Edge](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-at-the-edge.html) in the *Amazon CloudFront Developer Guide*\. 
+
 
-**Topics**
 + [How You Create and Use Lambda Functions for Lambda@Edge](#lambda-edge-how-it-works)
 + [How Replicas of Lambda Functions are Deleted](#lambda-edge-delete-replicas)
 + [Setting IAM Permissions and Roles for Lambda@Edge](#lambda-edge-permissions)
@@ -32,36 +41,400 @@ The subsequent links pertain to content that has been moved to [Using CloudFront
 
 ## How You Create and Use Lambda Functions for Lambda@Edge<a name="lambda-edge-how-it-works"></a>
 
-This content has been moved to [How You Create and Use Lambda Functions for Lambda@Edge](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-edge-how-it-works.html) in the *Amazon CloudFront Developer Guide*\. 
+Here's an overview of how you create and use Lambda functions for Lambda@Edge:
+
+1. You use Node\.js 6\.10 to write the code for your Lambda function\.
+
+1. Using the AWS Lambda console, you create a Lambda function in the US East \(N\. Virginia\) Region\. \(You can also create the function programmatically, for example, by using one of the AWS SDKs\.\) When you create the function, you specify the following values:
+
+   + The CloudFront distribution that you want the function to apply to
+
+   + A cache behavior in the distribution
+
+1. You publish a numbered version of the function\.
+
+   If you want to edit the function, you edit it in the US East \(N\. Virginia\) Region\. You then publish a new numbered version\.
+
+1. You specify one or more CloudFront events, known as *triggers*, that cause the function to execute\. For example, you can create a trigger that causes the function to execute when CloudFront receives a request from a viewer\.
+
+   When you create a trigger, Lambda replicates the function to AWS Regions and CloudFront edge locations around the globe\.
+
+![\[Conceptual graphic that shows how you create Lambda functions that integrate with CloudFront.\]](http://docs.aws.amazon.com/lambda/latest/dg/images/lambda-creation-workflow.png)
 
 ## How Replicas of Lambda Functions are Deleted<a name="lambda-edge-delete-replicas"></a>
 
-This content has been moved to [How Replicas of Lambda Functions are Deleted](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-edge-delete-replicas.html) in the *Amazon CloudFront Developer Guide*\. 
+Replicas of a Lambda function are automatically deleted after you have removed the last association for the function from all your CloudFront distributions\. Replicas are typically deleted within a few hours\. If more than one distribution uses a function, the replicas are removed only after the function is disassociated from the last one\.
+
+Replicas are also removed if you delete the last distribution that a function was associated with\. Replicas, as well as functions, cannot be manually deleted at this time\. This helps prevent a situation where a replica is removed that is still being used, causing an error to be returned\.
+
+Note that it's important not to build applications that use function replicas outside of CloudFront because the replicas will be deleted whenever their associations with distributions are removed, or when distributions themselves are deleted\. So the replica that an outside application depends on could be removed without warning, causing it to fail\.
 
 ## Setting IAM Permissions and Roles for Lambda@Edge<a name="lambda-edge-permissions"></a>
 
-This content has been moved to [Setting IAM Permissions and Roles for Lambda@Edge](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-edge-permissions.html) in the *Amazon CloudFront Developer Guide*\. 
+To configure Lambda@Edge, you need IAM permissions and an IAM execution role:
+
+**IAM Permissions Required to Associate Lambda Functions with CloudFront Distributions**  
+In addition to the IAM permissions that you need to use AWS Lambda, you need the following IAM permissions to associate Lambda functions with CloudFront distributions:  
+
++ `lambda:GetFunction`
+
+  For the resource, specify the ARN of the function version that you want to execute when a CloudFront event occurs, as shown in the following example:
+
+  `arn:aws:lambda:us-east-1:123456789012:function:TestFunction:2`
+
++ `lambda:EnableReplication*`
+
+  For the resource, specify the ARN of the function version that you want to execute when a CloudFront event occurs, as shown in the following example:
+
+  `arn:aws:lambda:us-east-1:123456789012:function:TestFunction:2`
+
++ `iam:CreateServiceLinkedRole`
+
++ `cloudfront:UpdateDistribution` or `cloudfront:CreateDistribution`
+
+  Choose `cloudfront:UpdateDistribution` to update a distribution or `cloudfront:CreateDistribution` to create a distribution\.
+For more information, see the following documentation:  
+
++ [Authentication and Access Control for AWS Lambda](lambda-auth-and-access-control.md)\.
+
++ [Authentication and Access Control for CloudFront](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/auth-and-access-control.html) in the *Amazon CloudFront Developer Guide*
+
+**Execution Role**  
+You must create an IAM role that can be assumed by the service principals `lambda.amazonaws.com` and `edgelambda.amazonaws.com`\. This role is assumed by the service principals when they execute your function\. For more information, see [Creating the Roles and Attaching the Policies \(Console\)](http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_job-functions.html#access_policies_job-functions_create-policies) in the topic "AWS Managed Policies for Job Functions" in the *IAM User Guide*\.  
+Here's an example role trust policy:  
+
+```
+{
+   "Version": "2012-10-17",
+   "Statement": [
+      {
+         "Effect": "Allow",
+         "Principal": {
+            "Service": [
+               "lambda.amazonaws.com",
+               "edgelambda.amazonaws.com"
+            ]
+         },
+         "Action": "sts:AssumeRole"
+      }
+   ]
+}
+```
+For information about the permissions that you need to grant to the execution role, see [Manage Permissions: Using an IAM Role \(Execution Role\)](http://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role) in the *AWS Lambda Developer Guide*\. Note the following:  
+
++ By default, whenever a CloudFront event triggers a Lambda function, data is written to CloudWatch Logs\. If you want to use these logs, the execution role needs permission to write data to CloudWatch Logs\. You can use the predefined AWSLambdaBasicExecutionRole to grant permission to the execution role\.
+
+  For more information about CloudWatch Logs, see [CloudWatch Metrics and CloudWatch Logs for Lambda Functions](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-cloudwatch-metrics-logging.html) in the Amazon CloudFront Developer Guide\.
+
++ If your Lambda function code accesses other AWS resources, such as reading an object from an S3 bucket, the execution role needs permission to perform that operation\. 
+
+**AWSServiceRoleForLambdaReplicator Role**  
+When you first create a trigger, a role named AWSServiceRoleForLambdaReplicator is automatically created to allow Lambda to replicate Lambda@Edge functions to AWS Regions\. This role is required to use Lambda@Edge\. The ARN for the AWSServiceRoleForLambdaReplicator role looks like this:  
+`arn:aws:iam::123456789012:role/aws-service-role/replicator.lambda.amazonaws.com/AWSServiceRoleForLambdaReplicator`
 
 ## Creating a Lambda@Edge Function<a name="lambda-edge-create-function"></a>
 
-This content has been moved to [Creating a Lambda@Edge Function](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-edge-create-function.html) in the *Amazon CloudFront Developer Guide*\.
+To set up AWS Lambda to run Lambda functions that are based on CloudFront events, follow this procedure\.<a name="lambda-edge-create-function-procedure"></a>
+
+**To create a Lambda@Edge function**
+
+1. Sign in to the AWS Management Console and open the AWS Lambda console at [https://console\.aws\.amazon\.com/lambda/](https://console.aws.amazon.com/lambda/)\.
+
+1. If you already have one or more Lambda functions, choose **Create function**\.
+
+   If you've don't have any functions, choose **Get Started Now**\.
+
+1. In the region list at the top of the page, choose **US East \(N\. Virginia\)**\.
+
+1. Create a function using your own code or create a function starting with a CloudFront blueprint\.
+
+   + To create a function using your own code, choose **Author from scratch**\. 
+
+   + To display a list of blueprints for CloudFront, type **cloudfront** in the filter field, and then press **Enter**\.
+
+     If you find a blueprint that you want to use, choose the name of the blueprint\.
+
+1. In the **Basic information** section, specify the following values:  
+**Name**  
+Type a name for your function\.  
+**Role**  
+Choose **Create new role from template\(s\)**\.  
+Choosing this value will get your started quickly\. Or you can choose **Choose an existing role** or **Create a custom role**\. If you choose one of these, follow the prompts to complete the information for this section\.  
+**Role name**  
+Type a name for the role\.  
+**Policy templates**  
+Choose **Basic Edge Lambda permissions**\.
+
+1. If you chose **Author from scratch** in step 4, skip to step 7\.
+
+   If you chose a blueprint in step 4, the **cloudfront** section lets you create one trigger, which associates this function with a cache in a CloudFront distribution and a CloudFront event\. We recommend that you choose **Remove** at this point, so there isn't a trigger for the function when it's created\. Then you can add triggers later\. 
+**Important**  
+We recommend that you test and debug the function before you add triggers\. If you choose instead to add a trigger now, the function will start to run as soon as you create the function and it finishes replicating to AWS Regions and edge locations, and the corresponding distribution is deployed\.
+
+1. Choose **Create function**\.
+
+   Lambda creates two versions of your function: $LATEST and Version 1\. You can edit only the $LATEST version, but the console initially displays Version 1\.
+
+1. To edit the function, choose **Version 1** near the top of the page, under the ARN for the function\. Then, on the **Versions** tab, choose **$LATEST**\. \(If you left the function and then returned to it, the button label is **Qualifiers**\.\)
+
+1. On the **Configuration** tab, choose the applicable **Code entry type**\. Then follow the prompts to edit or upload your code\.
+
+1. For **Runtime**, accept the default value of **Node\.js 6\.10**\.
+
+1. In the **Tags** section, add any applicable tags\.
+
+1. Choose **Actions**, and then choose **Publish new version**\.
+
+1. Type a description for the new version of the function\.
+
+1. Choose **Publish**\.
+
+1. Test and debug the function\. For more information, see the following:
+
+   + [Using Amazon CloudWatch](monitoring-functions.md)
+
+   + [Using AWS X\-Ray](lambda-x-ray.md)
+
+   + [Test Your Serverless Applications Locally Using SAM Local \(Public Beta\)](test-sam-local.md)
+
+1. When you're ready to have the function execute for CloudFront events, publish another version and edit the function to add triggers\. For more information, see [Editing a Lambda Function for Lambda@Edge](#lambda-edge-edit-function)\.
 
 ## Adding Triggers for a Lambda@Edge Function \(AWS Lambda Console\)<a name="lambda-edge-add-triggers"></a>
 
-This content has been moved to [Adding Triggers for a Lambda@Edge Function \(AWS Lambda Console\)](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-edge-add-triggers.html) in the *Amazon CloudFront Developer Guide*\. 
+When you create a Lambda function, you can specify only one trigger—only one combination of CloudFront distribution, cache behavior, and event that causes the function to execute\. You can add more triggers to the same function by using the Lambda console or by editing the distribution in the CloudFront console:
+
++ To use the Lambda console, perform the following procedure\. This method works well if you want to add more triggers to a function for the same CloudFront distribution\.
+
++ To use the CloudFront console, see [Adding Triggers for CloudFront Events to a Lambda Function](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-create-functions.html#lambda-create-functions-add-triggers) in the *Amazon CloudFront Developer Guide*\. This method works well if you want to add triggers for multiple distributions because it's easier to find the distribution that you want to update\. You can also update other CloudFront settings at the same time\.<a name="lambda-edge-add-triggers-procedure"></a>
+
+**To add triggers to a Lambda@Edge function \(AWS Lambda console\)**
+
+1. Sign in to the AWS Management Console and open the AWS Lambda console at [https://console\.aws\.amazon\.com/lambda/](https://console.aws.amazon.com/lambda/)\.
+
+1. In the region list at the top of the page, choose **US East \(N\. Virginia\)**\.
+
+1. On the **Functions** page, choose the name of the function that you want to add triggers for\.
+
+1. Choose **Qualifiers**, and then choose the **Versions** tab\.
+
+1. Choose the version that you want to add triggers to\.
+**Important**  
+You can't create triggers for the $LATEST version, you must create them for a numbered version\.
+
+   After you choose a version, the name of the button changes to **Version: $LATEST** or **Version:** *version number*\.
+
+1. Choose the **Triggers** tab\.
+
+1. Choose **Add triggers**\.
+
+1. In the **Add trigger** dialog box, choose the dotted box, and then choose **CloudFront**\.
+**Note**  
+If you've already created one or more triggers, CloudFront is the default service\.
+
+1. Specify the following values to indicate when you want the Lambda function to execute\.  
+**Distribution ID**  
+Choose the ID of the distribution that you want to add the trigger to\.  
+**Cache behavior**  
+Choose the cache behavior that specifies the objects that you want to execute the function on\.  
+**CloudFront event**  
+Choose the CloudFront event that causes the function to execute\.  
+**Enable trigger and replicate**  
+Select this check box so that AWS Lambda replicates the function to regions globally\. 
+
+1. Choose **Submit**\.
+
+   The function starts to process requests for the specified CloudFront events when the updated CloudFront distribution is deployed\. To determine whether a distribution is deployed, choose **Distributions** in the navigation pane\. When a distribution is deployed, the value of the **Status** column for the distribution changes from **In Progress** to **Deployed**\.
 
 ## Writing Functions for Lambda@Edge<a name="lambda-edge-authoring-functions"></a>
 
-This content has been moved to [Writing Functions for Lambda@Edge](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-edge-authoring-functions.html) in the *Amazon CloudFront Developer Guide*\. 
+The programming model for using Node\.js with Lambda@Edge is the same as using Lambda in an AWS Region\. For more information, see [Programming Model\(Node\.js\)](programming-model.md)\. 
+
+For more information about writing functions for Lambda@Edge, see [Requirements and Restrictions on Lambda Functions](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-requirements-limits.html) in the *Amazon CloudFront Developer Guide*\.
+
+We recommend that you include the `callback` parameter and return the applicable object:
+
++ **Request events** – Include the `cf.request` object in the response\.
+
+  If you're generating a response, include the `cf.response` object in the response\. For more information, see [Using Lambda Functions to Generate HTTP Responses to Viewer and Origin Requests](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/http-response-generation.html)\. 
+
++ **Response events** – Include the `cf.response` object in the response\.
+
+
++ [Example: A/B Testing](#lambda-edge-authoring-functions-example-ab-testing)
++ [Example: HTTP Redirect](#lambda-edge-authoring-functions-example-http-redirect)
+
+### Example: A/B Testing<a name="lambda-edge-authoring-functions-example-ab-testing"></a>
+
+The following example shows how to use Lambda@Edge for A/B testing\.
+
+```
+'use strict';
+
+exports.handler = (event, context, callback) => {
+    const request = event.Records[0].cf.request;
+    const headers = request.headers;
+
+    if (request.uri !== '/experiment-pixel.jpg') {
+        // do not process if this is not an A-B test request
+        callback(null, request);
+        return;
+    }
+
+    const cookieExperimentA = 'X-Experiment-Name=A';
+    const cookieExperimentB = 'X-Experiment-Name=B';
+    const pathExperimentA = '/experiment-group/control-pixel.jpg';
+    const pathExperimentB = '/experiment-group/treatment-pixel.jpg';
+
+    /*
+     * Lambda at the Edge headers are array objects.
+     *
+     * Client may send multiple Cookie headers, i.e.:
+     * > GET /viewerRes/test HTTP/1.1
+     * > User-Agent: curl/7.18.1 (x86_64-unknown-linux-gnu) libcurl/7.18.1 OpenSSL/1.0.1u zlib/1.2.3
+     * > Cookie: First=1; Second=2
+     * > Cookie: ClientCode=abc
+     * > Host: example.com
+     *
+     * You can access the first Cookie header at headers["cookie"][0].value
+     * and the second at headers["cookie"][1].value.
+     *
+     * Header values are not parsed. In the example above,
+     * headers["cookie"][0].value is equal to "First=1; Second=2"
+     */
+    let experimentUri;
+    if (headers.cookie) {
+        for (let i = 0; i < headers.cookie.length; i++) {
+            if (headers.cookie[i].value.indexOf(cookieExperimentA) >= 0) {
+                console.log('Experiment A cookie found');
+                experimentUri = pathExperimentA;
+                break;
+            } else if (headers.cookie[i].value.indexOf(cookieExperimentB) >= 0) {
+                console.log('Experiment B cookie found');
+                experimentUri = pathExperimentB;
+                break;
+            }
+        }
+    }
+
+    if (!experimentUri) {
+        console.log('Experiment cookie has not been found. Throwing dice...');
+        if (Math.random() < 0.75) {
+            experimentUri = pathExperimentA;
+        } else {
+            experimentUri = pathExperimentB;
+        }
+    }
+
+    request.uri = experimentUri;
+    console.log(`Request uri set to "${request.uri}"`);
+    callback(null, request);
+};
+```
+
+### Example: HTTP Redirect<a name="lambda-edge-authoring-functions-example-http-redirect"></a>
+
+The following example shows how to generate HTTP redirect responses using Lambda functions that are associated with CloudFront viewer request and origin request events\. If you associate the function with origin requests, the response is cached\.
+
+**Note**  
+You can generate HTTP responses only for viewer request and origin request events\. For more information, see [Generating HTTP Responses](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-generating-http-responses.html) in the *Amazon CloudFront Developer Guide*\.
+
+```
+'use strict';
+
+exports.handler = (event, context, callback) => {
+    /*
+     * Generate HTTP redirect response with 302 status code and Location header.
+     */
+    const response = {
+        status: '302',
+        statusDescription: 'Found',
+        headers: {
+            location: [{
+                key: 'Location',
+                value: 'https://docs.aws.amazon.com/lambda/latest/dg/lambda-edge.html',
+            }],
+        },
+    };
+    callback(null, response);
+};
+```
 
 ## Editing a Lambda Function for Lambda@Edge<a name="lambda-edge-edit-function"></a>
 
-This content has been moved to [Editing a Lambda Function for Lambda@Edge](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-edge-edit-function.html) in the *Amazon CloudFront Developer Guide*\. 
+When you want to edit a Lambda function, note the following:
+
++ The original version is labeled $LATEST\.
+
++ You can edit only the $LATEST version\.
+
++ Each time you edit the $LATEST version, you must publish a new numbered version\.
+
++ You can't create triggers for $LATEST\.
+
++ When you publish a new version of a function, Lambda doesn't automatically copy triggers from the previous version to the new version\. You must reproduce the triggers for the new version\. 
+
++ When you add a trigger for a CloudFront event to a function, if there's already a trigger for the same distribution, cache behavior, and event for an earlier version of the same function, Lambda deletes the trigger from the earlier version\.<a name="lambda-edge-edit-function-procedure"></a>
+
+**To edit a Lambda function \(AWS Lambda console\)**
+
+1. Sign in to the AWS Management Console and open the AWS Lambda console at [https://console\.aws\.amazon\.com/lambda/](https://console.aws.amazon.com/lambda/)\.
+
+1. In the region list at the top of the page, choose **US East \(N\. Virginia\)**\.
+
+1. In the list of functions, choose the name of the function that you want to edit\.
+
+   By default, the console displays the $LATEST version\. You can view earlier versions \(choose **Qualifiers**\), but you can only edit $LATEST\.
+
+1. On the **Code** tab, for **Code entry type**, choose to edit the code in the browser, upload a \.zip file, or upload a file from Amazon S3\.
+
+1. Choose either **Save** or **Save and test**\.
+
+1. Choose **Actions**, and choose **Publish new version**\. 
+
+1. In the **Publish new version from $LATEST** dialog box, enter a description of the new version\. This description appears in the list of versions, along with an automatically generated version number\. 
+
+1. Choose **Publish**\.
+
+   The new version automatically becomes the latest version\. The version number appears on the **Version** button in the upper\-left corner of the page\.
+
+1. Choose the **Triggers** tab\.
+
+1. Choose **Add trigger**\.
+
+1. In the **Add trigger** dialog box, choose the dotted box, and then choose **CloudFront**\.
+**Note**  
+If you've already created one or more triggers for a function, CloudFront is the default service\.
+
+1. Specify the following values to indicate when you want the Lambda function to execute\.  
+**Distribution ID**  
+Choose the ID of the distribution that you want to add the trigger to\.  
+**Cache behavior**  
+Choose the cache behavior that specifies the objects that you want to execute the function on\.  
+**CloudFront event**  
+Choose the CloudFront event that causes the function to execute\.  
+**Enable trigger and replicate**  
+Select this check box so Lambda replicates the function to regions globally\. 
+
+1. Choose **Submit**\.
+
+1. To add more triggers for this function, repeat steps 10 through 13\.
 
 ## Testing and Debugging<a name="lambda-edge-testing-debugging"></a>
 
-This content has been moved to [Testing and Debugging](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-edge-testing-debugging.html) in the *Amazon CloudFront Developer Guide*\. 
+You can test Lambda@Edge functions on the Lambda console with test events modeled on the CloudFront events\. However, the testing in the console only validates logic, and does not apply service limits that are specific to Lambda@Edge\. 
+
+You can create logging statements for Lambda functions running on Lambda@Edge that will write to CloudWatch Logs\. For more information, see [CloudWatch Metrics and CloudWatch Logs for Lambda Functions](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-cloudwatch-metrics-logging.html)\.
+
+For more information, see the following topics in the *Amazon CloudFront Developer Guide*:
+
++ [Lambda@Edge Event Structure](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/event-structure.html)
+
++ [Requirements and Restrictions on Lambda Functions](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-requirements-limits.html)
 
 ## Lambda@Edge Limits<a name="lambda-edge-limits"></a>
 
-This content has been moved to [Lambda@Edge Limits](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html#limits-lambda-at-edge) in the *Amazon CloudFront Developer Guide*\. 
\ No newline at end of file
+Due to the constrained execution environment, Lambda@Edge has restrictions in addition to the default Lambda limits\. For more information, see the following documentation:
+
++ [AWS Lambda Limits](limits.md) in this guide
+
++ [Limits on Lambda@Edge](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html#limits-lambda-at-edge) in the *Amazon CloudFront Developer Guide*
\ No newline at end of file
diff --git a/doc_source/lambda-introduction-function.md b/doc_source/lambda-introduction-function.md
index 82af39b..a4d81ba 100644
--- a/doc_source/lambda-introduction-function.md
+++ b/doc_source/lambda-introduction-function.md
@@ -7,6 +7,9 @@ In subsequent sections, we cover how the functions you create get invoked, and h
 To begin, we introduce you to the topic that explains the fundamentals of building a Lambda function, [Building Lambda Functions](lambda-app.md)\.
 
 Other topics in the section include:
+
 + [Configuring Lambda Functions](resource-model.md)
+
 + [Accessing Resources from a Lambda Function](accessing-resources.md)
+
 + [AWS Lambda Execution Model](running-lambda-code.md)
\ No newline at end of file
diff --git a/doc_source/lambda-java-how-to-create-deployment-package.md b/doc_source/lambda-java-how-to-create-deployment-package.md
index 332ddfe..57af57b 100644
--- a/doc_source/lambda-java-how-to-create-deployment-package.md
+++ b/doc_source/lambda-java-how-to-create-deployment-package.md
@@ -4,7 +4,7 @@ Your deployment package can be a \.zip file or a standalone jar; it is your choi
 
 We provide examples of using Maven to create standalone jars and using Gradle to create a \.zip file\. For more information, see the following topics:
 
-**Topics**
+
 + [Creating a \.jar Deployment Package Using Maven without any IDE \(Java\)](java-create-jar-pkg-maven-no-ide.md)
 + [Creating a \.jar Deployment Package Using Maven and Eclipse IDE \(Java\)](java-create-jar-pkg-maven-and-eclipse.md)
 + [Creating a \.zip Deployment Package \(Java\)](create-deployment-pkg-zip-java.md)
diff --git a/doc_source/lambda-python-how-to-create-deployment-package.md b/doc_source/lambda-python-how-to-create-deployment-package.md
index ba64d2f..8021aa1 100644
--- a/doc_source/lambda-python-how-to-create-deployment-package.md
+++ b/doc_source/lambda-python-how-to-create-deployment-package.md
@@ -1,13 +1,15 @@
 # Creating a Deployment Package \(Python\)<a name="lambda-python-how-to-create-deployment-package"></a>
 
-To create a Lambda function you first create a Lambda function deployment package, a \.zip file consisting of your code and any dependencies\. You will then need to set the appropriate security permissions for the zip package\. For more information, see [Authentication and Access Control for AWS Lambda](lambda-auth-and-access-control.md) policies\.
+To create a Lambda function you first create a Lambda function deployment package, a \.zip file consisting of your code and any dependencies\. 
 
 You can create a deployment package yourself or write your code directly in the Lambda console, in which case the console creates the deployment package for you and uploads it, creating your Lambda function\. Note the following to determine if you can use the console to create your Lambda function:
+
 + **Simple scenario** – If your custom code requires only the AWS SDK library, then you can use the inline editor in the AWS Lambda console\. Using the console, you can edit and upload your code to AWS Lambda\. The console will zip up your code with the relevant configuration information into a deployment package that the Lambda service can run\. 
 
   You can also test your code in the console by manually invoking it using sample event data\. 
 **Note**  
 The Lambda service has preinstalled the AWS SDK for Python\.
+
 + **Advanced scenario** – If you are writing code that uses other resources, such as a graphics library for image processing, or you want to use the AWS CLI instead of the console, you need to first create the Lambda function deployment package, and then use the console or the CLI to upload the package\.
 
 **Note**  
@@ -53,6 +55,7 @@ AWS Lambda includes the AWS SDK for Python \(Boto 3\), so you don't need to incl
 ## Create Deployment Package Using a Python Environment Created with Virtualenv<a name="deployment-pkg-for-virtualenv"></a>
 
 This section explains how to create a deployment package if you are using a Python environment that you created with the Virtualenv tool\. Consider the following example: 
+
 + Created the following isolated Python environment using the Virtualenv tool and activated the environment:
 
   ```
@@ -60,16 +63,19 @@ This section explains how to create a deployment package if you are using a Pyth
   ```
 
   You can activate the environment on Windows, OS X, and Linux as follows:
+
   + On Windows, you activate using the `activate.bat`:
 
     ```
     path\to\my\virtual-env\Scripts\activate.bat  
     ```
+
   + On OS X and Linux, you source the `activate` script:
 
     ```
     source path/to/my/virtual-env/bin/activate
     ```
+
 + Also, to install the **requests** package in the activated environment, do the following: :
 
   ```
diff --git a/doc_source/lambda-x-ray.md b/doc_source/lambda-x-ray.md
index af48dc3..ffba631 100644
--- a/doc_source/lambda-x-ray.md
+++ b/doc_source/lambda-x-ray.md
@@ -5,19 +5,24 @@ A typical Lambda\-based application consists of one or more functions triggered
 ## Using Environment Variables to Communicate with AWS X\-Ray<a name="lambda-x-ray-env-variables"></a>
 
 AWS Lambda automatically generates three environment variables to facilitate communication with the X\-Ray daemon, and set the configuration of the X\-Ray SDK:
+
 + **\_X\_AMZN\_TRACE\_ID:** Contains the tracing header, which includes the sampling decision, trace ID, and parent segment ID\. \(To learn more about these properties, see [Tracing Header](http://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-tracingheader)\.\) If Lambda receives a tracing header when your function is invoked, that header will be used to populate the \_X\_AMZN\_TRACE\_ID environment variable\. If a tracing header was not received, Lambda will generate one for you\. 
+
 + **AWS\_XRAY\_CONTEXT\_MISSING:** The X\-Ray SDK uses this variable to determine its behavior in the event that your function tries to record X\-Ray data, but a tracing header is not available\. Lambda sets this value to `LOG_ERROR `by default\. 
+
 + **AWS\_XRAY\_DAEMON\_ADDRESS:** This environment variable exposes the X\-Ray daemon's address in the following format: *IP\_ADDRESS***:***PORT*\. You can use the X\-Ray daemon's address to send trace data to the X\-Ray daemon directly, without using the X\-Ray SDK\. 
 
 ## Lambda Traces in the AWS X\-Ray Console: Examples<a name="viewing-lambda-xray-results"></a>
 
 The following shows Lambda traces for two different Lambda functions\. Each trace showcases a trace structure for a different invocation type: asynchronous and synchronous\.
+
 + **Async ** \- The example following shows an asynchronous Lambda request with one successful invocation and one downstream call to DynamoDB\.  
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/Trace_Console_DDB.png)
 
   The Lambda service segment encapsulates the response time, which is the time it took to return a response \(for example, 202\) to the client\. It includes subsegments for the time spent in the Lambda service queue \(dwell time\) and each invocation attempt\. \(Only one invocation attempt appears in the example preceding\.\) Each attempt subsegment in the service segment will have a corresponding user function segment\. In this example, the user function segment contains two subsegments: the initialization subsegment representing the function's initialization code that is run before the handler, and a downstream call subsegment representing a `ListTables` call to DynamoDB\.
 
   Status codes and error messages are displayed for each Invocation subsegment and for each downstream call\. 
+
 + **Synchronous** \- The example following shows a synchronous request with one downstream call to Amazon S3\.  
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/Trace_Console_S3.png)
 
diff --git a/doc_source/limits.md b/doc_source/limits.md
index 5ca5b1a..bc83d27 100644
--- a/doc_source/limits.md
+++ b/doc_source/limits.md
@@ -2,12 +2,7 @@
 
 As explained in [Lambda Functions](lambda-introduction-function.md), once you've packaged up your custom code, including any dependencies, and uploaded it to AWS Lambda, you have created a *Lambda function*\. But there are limits that AWS Lambda imposes that include, for example, the size of your deployment package or the amount of memory your Lambda function is allocated per invocation\. This section discusses those AWS Lambda limits\.
 
-**Note**  
-For information on IAM limits that may impact your Lambda function, see [Limitations on IAM Entities and Objects](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html)\.
 
-**Topics**
-+ [AWS Lambda Limits](#limits-list)
-+ [AWS Lambda Limit Errors](#limits-troubleshooting)
 
 ## AWS Lambda Limits<a name="limits-list"></a>
 
@@ -22,7 +17,7 @@ For information on IAM limits that may impact your Lambda function, see [Limitat
 | Number of processes and threads \(combined total\) | 1,024 | 
 | Maximum execution duration per request | 300 seconds | 
 | [Invoke](API_Invoke.md) request body payload size \(RequestResponse/synchronous invocation\) | 6 MB | 
-| [Invoke](API_Invoke.md) request body payload size \(Event/asynchronous invocation\) | 128 KB | 
+| [Invoke](API_Invoke.md) request body payload size \(Event/asynchronous invocation\) | 128 K | 
 
 
 **AWS Lambda Account Limits Per Region**  
@@ -54,9 +49,6 @@ The following table lists service limits for deploying a Lambda function\.
 | Size of code/dependencies that you can zip into a deployment package \(uncompressed \.zip/\.jar size\)\. Each Lambda function receives an additional 500MB of non\-persistent disk space in its own `/tmp` directory\. The `/tmp` directory can be used for loading additional resources like dependency libraries or data sets during function initialization\.  | 250 MB | 
 | Total size of environment variables set | 4 KB | 
 
-**Note**  
-If the size of your Lambda function's zipped deployment packages exceeds 3MB, you will not be able to use the inline code editing feature in the Lambda console\. You can still use the console to invoke your Lambda function\.
-
 ## AWS Lambda Limit Errors<a name="limits-troubleshooting"></a>
 
 Functions that exceed any of the limits listed in the previous limits tables will fail with an `exceeded limits` exception\. These limits are fixed and cannot be changed at this time\. For example, if you receive the exception `CodeStorageExceededException` or an error message similar to `"Code storage limit exceeded"` from AWS Lambda, you need to reduce the size of your code storage\.
diff --git a/doc_source/logging-using-cloudtrail.md b/doc_source/logging-using-cloudtrail.md
index f4f138b..755a124 100644
--- a/doc_source/logging-using-cloudtrail.md
+++ b/doc_source/logging-using-cloudtrail.md
@@ -7,24 +7,39 @@ AWS Lambda is integrated with AWS CloudTrail, a service that captures API calls
 When CloudTrail logging is enabled in your AWS account, API calls made to AWS Lambda actions are tracked in log files\. AWS Lambda records are written together with other AWS service records in a log file\. CloudTrail determines when to create and write to a new file based on a time period and file size\.
 
 The following actions are supported:
+
 + [AddPermission](API_AddPermission.md)
+
 + [CreateEventSourceMapping](API_CreateEventSourceMapping.md)
+
 + [CreateFunction](API_CreateFunction.md)
 
   \(The `ZipFile` parameter is omitted from the CloudTrail logs for `CreateFunction`\.\)
+
 + [DeleteEventSourceMapping](API_DeleteEventSourceMapping.md)
+
 + [DeleteFunction](API_DeleteFunction.md)
+
 + [GetEventSourceMapping](API_GetEventSourceMapping.md)
+
 + [GetFunction](API_GetFunction.md)
+
 + [GetFunctionConfiguration](API_GetFunctionConfiguration.md)
+
 + [GetPolicy](API_GetPolicy.md)
+
 + [ListEventSourceMappings](API_ListEventSourceMappings.md)
+
 + [ListFunctions](API_ListFunctions.md)
+
 + [RemovePermission](API_RemovePermission.md)
+
 + [UpdateEventSourceMapping](API_UpdateEventSourceMapping.md)
+
 + [UpdateFunctionCode](API_UpdateFunctionCode.md)
 
   \(The `ZipFile` parameter is omitted from the CloudTrail logs for `UpdateFunctionCode`\.\)
+
 + [UpdateFunctionConfiguration](API_UpdateFunctionConfiguration.md)
 
 Every log entry contains information about who generated the request\. The user identity information in the log helps you determine whether the request was made with root or IAM user credentials, with temporary security credentials for a role or federated user, or by another AWS service\. For more information, see the **userIdentity** field in the [CloudTrail Event Reference](http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-event-reference.html)\.
diff --git a/doc_source/monitoring-functions-logs.md b/doc_source/monitoring-functions-logs.md
index 285ab56..1213f05 100644
--- a/doc_source/monitoring-functions-logs.md
+++ b/doc_source/monitoring-functions-logs.md
@@ -21,6 +21,9 @@ There is no additional charge for using Lambda logs; however, standard CloudWatc
 1. Choose **Jump to logs** to view the logs\.
 
 For more information on accessing CloudWatch Logs, see the following guides:
+
 + [Amazon CloudWatch User Guide](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/)
+
 + [Amazon CloudWatch Logs API Reference](http://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/)
+
 + [Monitoring Log Files](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/WhatIsCloudWatchLogs.html) in the *Amazon CloudWatch User Guide*
\ No newline at end of file
diff --git a/doc_source/monitoring-functions.md b/doc_source/monitoring-functions.md
index c2d203e..e3efa6d 100644
--- a/doc_source/monitoring-functions.md
+++ b/doc_source/monitoring-functions.md
@@ -3,7 +3,9 @@
 AWS Lambda automatically monitors Lambda functions on your behalf, reporting metrics through Amazon CloudWatch\. To help you monitor your code as it executes, Lambda automatically tracks the number of requests, the latency per request, and the number of requests resulting in an error and publishes the associated CloudWatch metrics\. You can leverage these metrics to set CloudWatch custom alarms\. For more information about CloudWatch, see the [Amazon CloudWatch User Guide](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/)\.
 
 You can view request rates and error rates for each of your Lambda functions by using the AWS Lambda console, the CloudWatch console, and other Amazon Web Services \(AWS\) resources\. The following topics describe Lambda CloudWatch metrics and how to access them\.
+
 + [Accessing Amazon CloudWatch Metrics for AWS Lambda](monitoring-functions-access-metrics.md)
+
 + [AWS Lambda Metrics](monitoring-functions-metrics.md)
 
 You can insert logging statements into your code to help you validate that your code is working as expected\. Lambda automatically integrates with Amazon CloudWatch Logs and pushes all logs from your code to a CloudWatch Logs group associated with a Lambda function \(/aws/lambda/*<function name>*\)\. To learn more about log groups and accessing them through the CloudWatch console, see the [Monitoring System, Application, and Custom Log Files](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/WhatIsCloudWatchLogs.html) in the *Amazon CloudWatch User Guide*\. For information about how to access CloudWatch log entries, see [Accessing Amazon CloudWatch Logs for AWS Lambda](monitoring-functions-logs.md)\.
@@ -26,12 +28,14 @@ If your Lambda function code is executing, but you don't see any log data being
    You can test your code locally as you would any other Node\.js function, or you can test it within the Lambda console using the console's test invoke functionality, or you can use the AWS CLI `Invoke` command\. Each time the code is executed in response to an event, it writes a log entry into the log group associated with a Lambda function, which is /aws/lambda/*<function name>*\. 
 
    Following are some examples of errors that might show up in the logs:
+
    + If you see a stack trace in your log, there is probably an error in your code\. Review your code and debug the error that the stack trace refers to\.
+
    + If you see a `permissions denied` error in the log, the IAM role you have provided as an execution role may not have the necessary permissions\. Check the IAM role and verify that it has all of the necessary permissions to access any AWS resources that your code references\. To ensure that you have correctly set up the execution role, see [Manage Permissions: Using an IAM Role \(Execution Role\)](intro-permission-model.md#lambda-intro-execution-role)\. 
+
    +  If you see a `timeout exceeded` error in the log, your timeout setting exceeds the run time of your function code\. This may be because the timeout is too low, or the code is taking too long to execute\.  
-   +  If you see a `memory exceeded` error in the log, your memory setting is too low\. Set it to a higher value\. For information about memory size limits, see [CreateFunction](API_CreateFunction.md)\. When you change the memory setting, it can also change how you are charged for [AWS Lambda product website](https://aws.amazon.com/lambda/pricing) duration\.
 
-      For information about pricing, see the [AWS Lambda product website](https://aws.amazon.com/lambda)\.
+   +  If you see a `memory exceeded` error in the log, your memory setting is too low\. Set it to a higher value\. For information about memory size limits, see [CreateFunction](API_CreateFunction.md)\. When you change the memory setting, it can also change how you are charged for duration\. For information about pricing, see the [AWS Lambda product website](https://aws.amazon.com/lambda/)\.
 
 1. Check your Lambda function and verify that it is receiving requests\. 
 
diff --git a/doc_source/nodejs-create-deployment-pkg.md b/doc_source/nodejs-create-deployment-pkg.md
index 47e7fc8..90381f4 100644
--- a/doc_source/nodejs-create-deployment-pkg.md
+++ b/doc_source/nodejs-create-deployment-pkg.md
@@ -1,13 +1,15 @@
 # Creating a Deployment Package \(Node\.js\)<a name="nodejs-create-deployment-pkg"></a>
 
-To create a Lambda function you first create a Lambda function deployment package, a \.zip file consisting of your code and any dependencies\. As noted previously, you need to set the appropriate security permissions for the zip package\. For more information, see [Authentication and Access Control for AWS Lambda](lambda-auth-and-access-control.md) policies\.
+To create a Lambda function you first create a Lambda function deployment package, a \.zip file consisting of your code and any dependencies\. 
 
 You can create a deployment package yourself or write your code directly in the Lambda console, in which case the console creates the deployment package for you and uploads it, creating your Lambda function\. Note the following to determine if you can use the console to create your Lambda function:
+
 + **Simple scenario** – If your custom code requires only the AWS SDK library, then you can use the inline editor in the AWS Lambda console\. Using the console, you can edit and upload your code to AWS Lambda\. The console will zip up your code with the relevant configuration information into a deployment package that the Lambda service can run\. 
 
   You can also test your code in the console by manually invoking it using sample event data\. 
 **Note**  
 The Lambda service has preinstalled the AWS SDK for Node\.js\.
+
 + **Advanced scenario** – If you are writing code that uses other resources, such as a graphics library for image processing, or you want to use the AWS CLI instead of the console, you need to first create the Lambda function deployment package, and then use the console or the CLI to upload the package\.
 
 **Note**  
diff --git a/doc_source/nodejs-prog-mode-exceptions.md b/doc_source/nodejs-prog-mode-exceptions.md
index 9478aca..229d539 100644
--- a/doc_source/nodejs-prog-mode-exceptions.md
+++ b/doc_source/nodejs-prog-mode-exceptions.md
@@ -13,7 +13,7 @@ exports.handler = function(event, context, callback) {
 };
 ```
 
- When you invoke this Lambda function, it will notify AWS Lambda that function execution completed with an error and passes the error information to AWS Lambda\. AWS Lambda returns the error information back to the client: 
+ When you invoke this Lambda function, it will notify AWS Lambda that function execution completed with an error and passes error information to AWS Lambda\. AWS Lambda returns the error information back to the client: 
 
 ```
 {
@@ -25,36 +25,10 @@ exports.handler = function(event, context, callback) {
 }
 ```
 
-You would get the same result if you write the function using the async feature of Node\.js runtime version 8\.10\. For example:
+ Note that the stack trace is returned as the `stackTrace` JSON array of stack trace elements\. 
 
-```
-exports.handler = async function(event, context) {                
-    function AccountAlreadyExistsError(message) {
-        this.name = "AccountAlreadyExistsError";
-        this.message = message;
-    }
-    AccountAlreadyExistsError.prototype = new Error();
- 
-    const error = new AccountAlreadyExistsError("Account is in use!");
-    throw error
-};
-```
-
-Again, when this Lambda function is invoked, it will notify AWS Lambda that function execution completed with an error and passes the error information to AWS Lambda\. AWS Lambda returns the error information back to the client:
-
-```
-{
-  "errorMessage": "Acccount is in use!",
-  "errorType": "Error",
-  "stackTrace": [
-    "exports.handler (/var/task/index.js:10:17)"
-  ]
-}
-```
-
- Note that the error information is returned as the `stackTrace` JSON array of stack trace elements\. 
+ How you get the error information back depends on the invocation type that the client specifies at the time of function invocation: 
 
-How you get the error information back depends on the invocation type that the client specifies at the time of function invocation: 
 + If a client specifies the `RequestResponse` invocation type \(that is, synchronous execution\), it returns the result to the client that made the invoke call\.
 
   For example, the console always use the `RequestResponse` invocation type, so the console will display the error in the **Execution result** section as shown:  
@@ -62,7 +36,8 @@ How you get the error information back depends on the invocation type that the c
 
    The same information is also sent to CloudWatch and the  **Log output**  section shows the same logs\.   
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/exception-shown-in-console20-nodejs.png)
-+ If a client specifies the  `Event` invocation type \(that is, asynchronous execution\), AWS Lambda will not return anything\. Instead, it logs the error information to [CloudWatch Logs](http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring//logs/WhatIsCloudWatchLogs.html)\. You can also see the error metrics in [CloudWatch Metrics](http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring//viewing_metrics_with_cloudwatch.html)\. 
+
++  If a client specifies the  `Event`  invocation type \(that is, asynchronous execution\), AWS Lambda will not return anything\. Instead, it logs the error information to CloudWatch Logs\. You can also see the error metrics in CloudWatch Metrics\. 
 
  Depending on the event source, AWS Lambda may retry the failed Lambda function\. For example, if Kinesis is the event source, AWS Lambda will retry the failed invocation until the Lambda function succeeds or the records in the stream expire\. For more information on retries, see [Understanding Retry Behavior](retries-on-errors.md)\.
 
@@ -79,7 +54,9 @@ How you get the error information back depends on the invocation type that the c
 You can create custom error handling to raise an exception directly from your Lambda function and handle it directly \(Retry or Catch\) within an AWS Step Functions State Machine\. For more information, see [Handling Error Conditions Using a State Machine](http://docs.aws.amazon.com/step-functions/latest/dg/tutorial-handling-error-conditions.html)\. 
 
 Consider a `CreateAccount` [state](http://docs.aws.amazon.com/step-functions/latest/dg/awl-ref-states.html) is a [task](http://docs.aws.amazon.com/step-functions/latest/dg/awl-ref-states-task.html) that writes a customer's details to a database using a Lambda function\.
+
 + If the task succeeds, an account is created and a welcome email is sent\.
+
 + If a user tries to create an account for a username that already exists, the Lambda function raises an error, causing the state machine to suggest a different username and to retry the account\-creation process\.
 
 The following code samples demonstrate how to do this\. Note that custom errors in Node\.js must extend the error prototype\.
diff --git a/doc_source/nodejs-prog-model-context.md b/doc_source/nodejs-prog-model-context.md
index 6aa48a5..bd74560 100644
--- a/doc_source/nodejs-prog-model-context.md
+++ b/doc_source/nodejs-prog-model-context.md
@@ -1,9 +1,13 @@
 # The Context Object \(Node\.js\)<a name="nodejs-prog-model-context"></a>
 
 While a Lambda function is executing, it can interact with AWS Lambda to get useful runtime information such as:
+
 + How much time is remaining before AWS Lambda terminates your Lambda function \(timeout is one of the Lambda function configuration properties\)\.
+
 + The CloudWatch log group and log stream associated with the Lambda function that is executing\.
+
 + The AWS request ID returned to the client that invoked the Lambda function\. You can use the request ID for any follow up inquiry with AWS support\.
+
 + If the Lambda function is invoked through AWS Mobile SDK, you can learn more about the mobile application calling the Lambda function\.
 
 AWS Lambda provides this information via the `context` object that the service passes as the second parameter to your Lambda function handler\. For more information, see [Lambda Function Handler \(Node\.js\)](nodejs-prog-model-handler.md)\.
@@ -67,7 +71,7 @@ context.getRemainingTimeInMillis();
 The `context` object provides the following property that you can update:
 
 **callbackWaitsForEmptyEventLoop**  
-The default value is true\. This property is useful only to modify the default behavior of the callback\. By default, the callback will wait until the event loop is empty before freezing the process and returning the results to the caller\. You can set this property to false to request AWS Lambda to freeze the process soon after the `callback` is called, even if there are events in the event loop\. AWS Lambda will freeze the process, any state data and the events in the event loop \(any remaining events in the event loop processed when the Lambda function is called next and if AWS Lambda chooses to use the frozen process\)\. For more information about callback, see [Using the Callback Parameter](nodejs-prog-model-handler.md#nodejs-prog-model-handler-callback)\.
+The default value is true\. This property is useful only to modify the default behavior of the callback\. By default, the callback will wait until the Node\.js runtime event loop is empty before freezing the process and returning the results to the caller\. You can set this property to false to request AWS Lambda to freeze the process soon after the `callback` is called, even if there are events in the event loop\. AWS Lambda will freeze the process, any state data and the events in the Node\.js event loop \(any remaining events in the event loop processed when the Lambda function is called next and if AWS Lambda chooses to use the frozen process\)\. For more information about callback, see [Using the Callback Parameter](nodejs-prog-model-handler.md#nodejs-prog-model-handler-callback)\.
 
 In addition, the `context` object provides the following properties that you can use obtain runtime information:
 
@@ -96,24 +100,37 @@ The value is null if your Lambda function is unable to create a log stream, whic
 
 **identity**  
 Information about the Amazon Cognito identity provider when invoked through the AWS Mobile SDK\. It can be null\.  
+
 + **identity\.cognitoIdentityId**
+
 + **identity\.cognitoIdentityPoolId**
 For more information about the exact values for a specific mobile platform, see [Identity Context](http://docs.aws.amazon.com/mobile/sdkforios/developerguide/lambda.html#identitycontext) in the *AWS Mobile SDK for iOS Developer Guide*, and [Identity Context](http://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/lambda.html#identity-context) in the AWS Mobile SDK for Android Developer Guide\.
 
 **clientContext**  
 Information about the client application and device when invoked through the AWS Mobile SDK\. It can be null\. Using `clientContext`, you can get the following information:  
+
 + **clientContext\.client\.installation\_id**
+
 + **clientContext\.client\.app\_title**
+
 + **clientContext\.client\.app\_version\_name**
+
 + **clientContext\.client\.app\_version\_code**
+
 + **clientContext\.client\.app\_package\_name**
+
 + **clientContext\.Custom**
 
   Custom values set by the mobile client application\.
+
 + **clientContext\.env\.platform\_version**
+
 + **clientContext\.env\.platform**
+
 + **clientContext\.env\.make**
+
 + **clientContext\.env\.model**
+
 + **clientContext\.env\.locale**
 
 For more information about the exact values for a specific mobile platform, see [Client Context](http://docs.aws.amazon.com/mobile/sdkforios/developerguide/lambda.html#clientcontext) in the *AWS Mobile SDK for iOS Developer Guide*, and [Client Context](http://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/lambda.html#client-context) in the *AWS Mobile SDK for Android Developer Guide*\.
\ No newline at end of file
diff --git a/doc_source/nodejs-prog-model-handler.md b/doc_source/nodejs-prog-model-handler.md
index 754d422..1bd5fd6 100644
--- a/doc_source/nodejs-prog-model-handler.md
+++ b/doc_source/nodejs-prog-model-handler.md
@@ -1,63 +1,40 @@
 # Lambda Function Handler \(Node\.js\)<a name="nodejs-prog-model-handler"></a>
 
-AWS Lambda invokes your Lambda function via a `handler` object\. A `handler` represents the name of your Lambda function \(and serves as the entry point that AWS Lambda uses to execute your function code\. For example: 
+ At the time you create a Lambda function you specify a *handler*, a function in your code, that AWS Lambda can invoke when the service executes your code\. Use the following general syntax when creating a handler function in Node\.js\. 
 
 ```
 exports.myHandler = function(event, context) {
    ...
 }
 ```
-+ `myHandler` – This is the name of the function AWS Lambda invokes\. Suppose you save this code as `helloworld.js`\. Then, `myHandler` is the function that contains your Lambda function code and `helloworld` is the name of the file that represents your deployment package\. For more information, see [Creating a Deployment Package \(Node\.js\)](nodejs-create-deployment-pkg.md)\.
 
-  AWS Lambda supports two invocation types:
-  + **RequestResponse**, or `synchronous execution`: AWS Lambda returns the result of the function call to the client invoking the Lambda function\. If the handler code of your Lambda function does not specify a return value, AWS Lambda will automatically return `null` for that value\.
-  + **Event**, or *asynchronous execution*: AWS Lambda will discard any results of the function call\. 
-**Note**  
-If you discover that your Lambda function does not process the event using asynchronous invocation, you can investigate the failure using [Dead Letter Queues](dlq.md)\.
-+ `event` – AWS Lambda uses this parameter to pass in event data to the handler\. Event sources can range from a supported AWS service or custom applications that invoke your Lambda function\. For examples, see [Sample Events Published by Event Sources](eventsources.md) 
-+ `context` – AWS Lambda uses this parameter to provide details of your Lambda function's execution\. For more information, see [The Context Object \(Node\.js\)](nodejs-prog-model-context.md)\.
-
-## Using the Callback Parameter<a name="nodejs-prog-model-handler-callback"></a>
-
-The Node\.js runtimes v4\.3, v6\.10 and v8\.10 support the optional `callback` parameter\. You can use it to explicitly return information back to the caller\. The general syntax is:
+The callback parameter is optional, depending on whether you want to return information to the caller\.
 
 ```
-callback(Error error, Object result);
+exports.myHandler = function(event, context, callback) {
+   ...
+   
+   // Use callback() and return information to the caller.  
+}
 ```
 
-Where:
-+ `error` – is an optional parameter that you can use to provide results of the failed Lambda function execution\. When a Lambda function succeeds, you can pass null as the first parameter\.
-+  `result` – is an optional parameter that you can use to provide the result of a successful function execution\. The result provided must be `JSON.stringify` compatible\. If an error is provided, this parameter is ignored\. 
+In the syntax, note the following:
 
- If you don't use `callback` in your code, AWS Lambda will call it implicitly and the return value is `null`\. When the callback is called \(explicitly or implicitly\), AWS Lambda continues the Lambda function invocation until the event loop is empty\.  The following are example callbacks: 
++ `event` – AWS Lambda uses this parameter to pass in event data to the handler\.
 
-```
-callback();     // Indicates success but no information returned to the caller.
-callback(null); // Indicates success but no information returned to the caller.
-callback(null, "success");  // Indicates success with information returned to the caller.
-callback(error);    //  Indicates error with error information returned to the caller.
-```
++ `context` – AWS Lambda uses this parameter to provide your handler the runtime information of the Lambda function that is executing\. For more information, see [The Context Object \(Node\.js\)](nodejs-prog-model-context.md)\.
 
- AWS Lambda treats any non\-null value for the `error` parameter as a handled exception\.  Note the following: 
-+ Regardless of the invocation type specified at the time of the Lambda function invocation \(see [Invoke](API_Invoke.md)\), the callback method automatically logs the string representation of non\-null values of `error` to the Amazon CloudWatch Logs stream associated with the Lambda function\. 
-+ If the Lambda function was invoked synchronously \(using the `RequestResponse` invocation type\), the callback returns a response body as follows:
-  + If `error` is null, the response body is set to the string representation of `result`\. 
-  + If the `error` is not null, the `error` value will be populated in the response body\. 
++ `callback` – You can use the optional callback to return information to the caller, otherwise return value is null\. For more information, see [Using the Callback Parameter](#nodejs-prog-model-handler-callback)\.
+**Note**  
+The callback is supported only in the Node\.js runtimes v6\.10 and v4\.3\. If you are using runtime v0\.10\.42, you need to use the context methods \(done, succeed, and fail\) to properly terminate the Lambda function\. For information, see [Using the Earlier Node\.js Runtime v0\.10\.42](nodejs-prog-model-using-old-runtime.md)\.
 
- 
++ `myHandler` – This is the name of the function AWS Lambda invokes\. You export this so it is visible to AWS Lambda\.  Suppose you save this code as `helloworld.js`\. Then, `helloworld.myHandler` is the handler\. For more information, see handler in [CreateFunction](API_CreateFunction.md)\.
 
-**Note**  
-When the `callback(error, null)` \(and `callback(error)`\) is called, Lambda will log the first 256 KB of the error object\. For a larger error object, AWS Lambda truncates the log and displays the text `Truncated by Lambda` next to the error object\.
+  + If you used the `RequestResponse` invocation type \(synchronous execution\), AWS Lambda returns the result of the Node\.js function call to the client invoking the Lambda function \(in the HTTP response to the invocation request, serialized into JSON\)\. For example, AWS Lambda console uses the `RequestResponse` invocation type, so when you test invoke the function using the console, the console will display the return value\.
 
-If you are using runtime version 8\.10, you can include the `async` keyword:
+    If the handler does not return anything, AWS Lambda returns null\.
 
-```
-exports.myHandler = async function(event, context) {
-            ...
-            
-            // return information to the caller.  
-}
-```
+  + If you used the `Event` invocation type \(asynchronous execution\), the value is discarded\.
 
 ## Example<a name="nodejs-prog-model-handler-example"></a>
 
@@ -73,33 +50,66 @@ exports.myHandler = function(event, context, callback) {
 }
 ```
 
-This example has one function, *myHandler*
-
-In the function, the `console.log()` statements log some of the incoming event data to CloudWatch Logs\. When the `callback` parameter is called, the Lambda function exits only after the event loop passed is empty\.
-
-If you want to use the `async` feature provided by the v8\.10 runtime, consider the following code sample:
-
-```
-exports.myHandler = async function(event, context) {
-   console.log("value1 = " + event.key1);
-   console.log("value2 = " + event.key2);  
-   return "some success message”;
-   // or 
-   // throw new Error(“some error type”); 
-}
-```
+This example has one function, which is also the handler\. In the function, the `console.log()` statements log some of the incoming event data to CloudWatch Logs\. When the callback is called, the Lambda function exits only after the Node\.js event loop is empty \(the Node\.js event loop is not the same as the event that was passed as a parameter\)\. 
 
 **Note**  
-If you are using the **deprecated** runtime v0\.10\.42, you need to use the context methods \(done, succeed, and fail\) to properly terminate the Lambda function\. For more information, see [Using the Earlier Node\.js Runtime v0\.10\.42](nodejs-prog-model-using-old-runtime.md)\.
+If you are using runtime v0\.10\.42, you need to use the context methods \(done, succeed, and fail\) to properly terminate the Lambda function\. For more information, see [Using the Earlier Node\.js Runtime v0\.10\.42](nodejs-prog-model-using-old-runtime.md)\.
 
 **To upload and test this code as a Lambda function \(console\)**
 
 1. In the console, create a Lambda function using the following information:
+
    + Use the hello\-world blueprint\. 
-   + The sample uses **nodejs6\.10** as the **runtime** but you can also select **nodejs8\.10** or **nodejs4\.3**\. The code samples provided will work for any version\.
+
+   + We recommend specifying ** nodejs6\.10** as the **runtime** but you can also select **nodejs4\.3**\. The code samples provided will work for either version\.
 
    For instructions to create a Lambda function using the console, see [Create a Simple Lambda Function](get-started-create-function.md)\.
 
 1. Replace the template code with the code provided in this section and create the function\.
 
-1. Test the Lambda function using the **Sample event template** called **Hello World** provided in the Lambda console\. 
\ No newline at end of file
+1. Test the Lambda function using the **Sample event template** called **Hello World** provided in the Lambda console\. 
+
+## Using the Callback Parameter<a name="nodejs-prog-model-handler-callback"></a>
+
+The Node\.js runtimes v4\.3 and v6\.10 support the optional `callback` parameter\. You can use it to explicitly return information back to the caller\. The general syntax is:
+
+```
+callback(Error error, Object result);
+```
+
+Where:
+
++ `error` – is an optional parameter that you can use to provide results of the failed Lambda function execution\. When a Lambda function succeeds, you can pass null as the first parameter\.
+
++  `result` – is an optional parameter that you can use to provide the result of a successful function execution\. The result provided must be `JSON.stringify` compatible\. If an error is provided, this parameter is ignored\. 
+
+**Note**  
+Using the `callback` parameter is optional\. If you don't use the optional `callback` parameter, the behavior is same as if you called the `callback()` without any parameters\. You can specify the `callback` in your code to return information to the caller\. 
+
+If you don't use `callback` in your code, AWS Lambda will call it implicitly and the return value is `null`\.
+
+When the callback is called \(explicitly or implicitly\), AWS Lambda continues the Lambda function invocation until the Node\.js event loop is empty\. 
+
+The following are example callbacks:
+
+```
+callback();     // Indicates success but no information returned to the caller.
+callback(null); // Indicates success but no information returned to the caller.
+callback(null, "success");  // Indicates success with information returned to the caller.
+callback(error);    //  Indicates error with error information returned to the caller.
+```
+
+AWS Lambda treats any non\-null value for the `error` parameter as a handled exception\. 
+
+Note the following:
+
++ Regardless of the invocation type specified at the time of the Lambda function invocation \(see [Invoke](API_Invoke.md)\), the callback method automatically logs the string representation of non\-null values of `error` to the Amazon CloudWatch Logs stream associated with the Lambda function\. 
+
++ If the Lambda function was invoked synchronously \(using the `RequestResponse` invocation type\), the callback returns a response body as follows:
+
+  + If `error` is null, the response body is set to the string representation of `result`\. 
+
+  + If the `error` is not null, the `error` value will be populated in the response body\. 
+
+**Note**  
+When the `callback(error, null)` \(and `callback(error)`\) is called, Lambda will log the first 256 KB of the error object\. For a larger error object, AWS Lambda truncates the log and displays the text `Truncated by Lambda` next to the error object\.
\ No newline at end of file
diff --git a/doc_source/nodejs-prog-model-logging.md b/doc_source/nodejs-prog-model-logging.md
index 6258558..614fd13 100644
--- a/doc_source/nodejs-prog-model-logging.md
+++ b/doc_source/nodejs-prog-model-logging.md
@@ -3,41 +3,31 @@
  Your Lambda function can contain logging statements\. AWS Lambda writes these logs to CloudWatch\. If you use the Lambda console to invoke your Lambda function, the console displays the same logs\.
 
  The following Node\.js statements generate log entries: 
+
 + `console.log()`
+
 + `console.error()`
+
 + `console.warn()`
+
 + `console.info()`
 
- For example, consider the following Node\.js code examples: 
-+ The first sample can be written using either runtime version 6\.10 or 4\.3\. 
-
-  ```
-  console.log('Loading function');
-  
-  exports.handler = function(event, context, callback) {
-      //console.log('Received event:', JSON.stringify(event, null, 2));
-      console.log('value1 =', event.key1);
-      console.log('value2 =', event.key2);
-      console.log('value3 =', event.key3);
-      callback(null, event.key1); // Echo back the first key value
-      
-  };
-  ```
-+ The second sample uses the Node\.js `async` feature, available only in runtime versions 8\.10 or later\.
-
-  ```
-  console.log('Loading function');
-  
-  exports.handler = async function(event) {
-      //console.log('Received event:', JSON.stringify(event, null, 2));
-      console.log('value1 =', event.key1);
-      console.log('value2 =', event.key2);
-      console.log('value3 =', event.key3);
-      return event.key1 // Echo back the first key value   
-  };
-  ```
-
-In either case, the following screenshot shows an example **Log output** section in the Lambda console\. You can examine the same information in CloudWatch Logs\. For more information, see [Accessing Amazon CloudWatch Logs for AWS Lambda](monitoring-functions-logs.md)\. 
+ For example, consider the following Node\.js code example\. 
+
+```
+console.log('Loading function');
+
+exports.handler = function(event, context, callback) {
+    //console.log('Received event:', JSON.stringify(event, null, 2));
+    console.log('value1 =', event.key1);
+    console.log('value2 =', event.key2);
+    console.log('value3 =', event.key3);
+    callback(null, event.key1); // Echo back the first key value
+    
+};
+```
+
+ The screenshot shows an example  **Log output**  section in Lambda console, you can also find these logs in CloudWatch\. For more information, see [Accessing Amazon CloudWatch Logs for AWS Lambda](monitoring-functions-logs.md)\. 
 
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/logging-nodejs-console-output.png)
 
@@ -54,8 +44,11 @@ For step\-by\-step instructions, see [Getting Started](getting-started.md)\.
 ## Finding Logs<a name="nodejs-prog-model-logging-finding-logs"></a>
 
 You can find the logs that your Lambda function writes, as follows:
+
 + **In the AWS Lambda console** – The ** Log output**  section in the AWS Lambda console shows the logs\. 
+
 + **In the response header, when you invoke a Lambda function programmatically** – If you invoke a Lambda function programmatically, you can add the `LogType` parameter to retrieve the last 4 KB of log data that is written to CloudWatch Logs\. AWS Lambda returns this log information in the `x-amz-log-results` header in the response\. For more information, see [Invoke](http://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html)\.
 
   If you use AWS CLI to invoke the function, you can specify the` --log-type parameter` with value `Tail` to retrieve the same information\.
+
 + **In CloudWatch Logs** – To find your logs in CloudWatch you need to know the log group name and log stream name\. You can get that information by adding the `context.logGroupName`, and `context.logStreamName` methods in your code\. When you run your Lambda function, the resulting logs in the console or CLI will show you the log group name and log stream name\. 
\ No newline at end of file
diff --git a/doc_source/nodejs-prog-model-using-old-runtime.md b/doc_source/nodejs-prog-model-using-old-runtime.md
index e4fd9e0..7f123fe 100644
--- a/doc_source/nodejs-prog-model-using-old-runtime.md
+++ b/doc_source/nodejs-prog-model-using-old-runtime.md
@@ -2,15 +2,15 @@
 
 As of May 2017, AWS Lambda supports Node\.js 6\.10 and Node\.js 4\.3\. For information about specifying this runtime when you create your Lambda function, see the `--runtime` parameter of [CreateFunction](API_CreateFunction.md)\.
 
-Node v0\.10\.42 is currently marked as deprecated\. For more information, see [Runtime Support Policy](runtime-support-policy.md)\. You must migrate existing functions to the newer Node\.js runtime versions available on AWS Lambda \(nodejs\.8\.10, nodejs6\.10 or nodejs4\.3\) as soon as possible\. Note that you will have to follow this procedure for each region that contains functions written in the Node v0\.10\.42 runtime\. The following section highlights AWS Lambda's runtime support policy, along with behavior unique to runtime v0\.10\.42 and how to migrate your existing functions to newer versions \(nodejs4\.3 or nodejs6\.10\) as soon as possible\. Failure to migrate or get an extension will result in any invocations of functions written in the Node v0\.10\.42 runtime returning an invalid parameter value error\. Note that you will have to follow this procedure for each region that contains functions written in the Node v0\.10\.42 runtime\. The following section describes behavior unique to runtime v0\.10\.42 and how to migrate your existing functions to newer versions\. 
+Node v0\.10\.42 is currently marked as deprecated\. For more information, see [Runtime Support Policy](runtime-support-policy.md)\. You must migrate existing functions to the newer Node\.js runtime versions available on AWS Lambda \(nodejs4\.3 or nodejs6\.10\) as soon as possible\. Note that you will have to follow this procedure for each region that contains functions written in the Node v0\.10\.42 runtime\. The following section highlights AWS Lambda's runtime support policy, along with behavior unique to runtime v0\.10\.42 and how to migrate your existing functions to newer versions \(nodejs4\.3 or nodejs6\.10\) as soon as possible\. Failure to migrate or get an extension will result in any invocations of functions written in the Node v0\.10\.42 runtime returning an invalid parameter value error\. Note that you will have to follow this procedure for each region that contains functions written in the Node v0\.10\.42 runtime\. The following section describes behavior unique to runtime v0\.10\.42 and how to migrate your existing functions to newer versions\. 
+
 
-**Topics**
 + [Transitioning Lambda Function Code to Newer Runtimes](#transition-to-new-nodejs-runtime)
 + [The Context Methods in Node\.js Runtime v0\.10\.42](#nodejs-prog-model-oldruntime-context-methods)
 
 ## Transitioning Lambda Function Code to Newer Runtimes<a name="transition-to-new-nodejs-runtime"></a>
 
-Node v0\.10\.42 is currently marked as deprecated\. For more information, see [Runtime Support Policy](runtime-support-policy.md)\. You must migrate existing functions to the newer Node\.js runtime versions available on AWS Lambda \(nodejs\.8\.10, nodejs6\.10 or nodejs4\.3\) as soon as possible\. Failure to migrate or get an extension will result in any invocations of functions written in the Node v0\.10\.42 runtime returning an invalid parameter error\. Note that you will have to follow this procedure for each region that contains functions written in the Node v0\.10\.42 runtime\. 
+Node v0\.10\.42 is currently marked as deprecated\. For more information, see [Runtime Support Policy](runtime-support-policy.md)\. You must migrate existing functions to the newer Node\.js runtime versions available on AWS Lambda \(nodejs4\.3 or nodejs6\.10\) as soon as possible\. Failure to migrate or get an extension will result in any invocations of functions written in the Node v0\.10\.42 runtime returning an invalid parameter error\. Note that you will have to follow this procedure for each region that contains functions written in the Node v0\.10\.42 runtime\. 
 
 The following sections explain how to migrate your existing Lambda function code to newer runtimes: 
 
@@ -39,7 +39,9 @@ The following sections explain how to migrate your existing Lambda function code
    1. Update the runtime first manually or by running the **nodejs\-upgrade\-functions** blueprint in **UPDATE** mode \(for more information see [Listing Lambda Functions and Updating to Newer Runtime Using the Runtime Update Blueprint](#transition-to-new-nodejs-runtime-blueprint)\. We strongly recommend updating any use of the context method and replacing it with the callback approach\. For more details, see [The Context Methods in Node\.js Runtime v0\.10\.42](#nodejs-prog-model-oldruntime-context-methods)\.
 
    1. Test and verify the Lambda function passes your internal validation for its behavior\. If it fails, you may need to update your Lambda code to work in the new runtime:
+
       + For a list of changes in Node\.js v6\.10, see [Breaking changes between v5 and v6](https://github.com/nodejs/node/wiki/Breaking-changes-between-v5-and-v6) on GitHub\. 
+
       +  For a list of changes in Node\.js v4\.3, see [API changes between v0\.10 and v4](https://github.com/nodejs/node/wiki/API-changes-between-v0.10-and-v4) on GitHub\.
 
    1. Once your function is invoked successfully, the transition is complete\.
@@ -77,31 +79,50 @@ echo "This script only accounts for the \$LATEST versions of functions. You may
 For each Lambda function returned that was created using the v0\.10 runtime, use the [UpdateFunctionConfiguration](API_UpdateFunctionConfiguration.md) command and set the `--runtime` value to `nodejs4.3` or `nodejs6.10`\.
 
 ### Listing Lambda Functions and Updating to Newer Runtime Using the Lambda Console<a name="transition-to-new-nodejs-runtime-console"></a>
+
 + Sign in to the AWS Management Console and open the Lambda console\.
+
 + Choose the **Runtime** tab\. This will sort all the Lambda functions for that region by their runtime value\.
+
 + Open each Lambda function with a runtime value of **node\.js** and then choose the **Configuration tab**\.
-+ Set the **Runtime** value to **Node\.js 4\.3**, **Node\.js 6\.10**or **Node\.js 8\.10**\.
+
++ Set the **Runtime** value to **Node\.js 4\.3** or **Node\.js 6\.10**\.
+
 + Repeat this process for each region, as necessary\.
 
 ### Listing Lambda Functions and Updating to Newer Runtime Using the Runtime Update Blueprint<a name="transition-to-new-nodejs-runtime-blueprint"></a>
+
 + Sign in to the AWS Management Console and open the Lambda console\.
+
 + Choose **Create a Lambda Function**\.
+
 + Choose the **nodejs\-upgrade\-functions** blueprint and create a function using it\.
+
 + Note that the function has the following environment variables available:
+
   + **MODE** = **List** or **Backup** or **Upgrade**
-  + **TARGET\_RUNTIME** = **nodejs4\.3**, **nodejs6\.10** or **nodejs8\.10**\.
+
+  + **TARGET\_RUNTIME** = **nodejs4\.3** or **nodejs6\.10**
+
   + **EXCLUDED** = a comma\-separated list of function names to exclude from processing \(do not include spaces in the list\)
+
 + To obtain a list of functions and versions, invoke the function from the console without any change to the variable values\.
+
 + To back up functions before upgrading, change the value of **MODE** to **Backup** and invoke the function from the console\. We strongly recommend you run this before upgrading your functions\.
+
 + To update the runtime value of functions, change the value of **MODE** to **Upgrade** and invoke the function from the console\.
+
 + Repeat this process for each region as necessary\.
+
 + Note that:
-  + The blueprint will save your existing Node\.js v1\.0 function as a version and update $LATEST to nodejs4\.3, nodejs6\.10 or nodejs8\.10, depending on which version you chose\. No other versions of the function can be upgraded\. You can use this version information to point any existing applications to that version\.
+
+  + The blueprint will save your existing Node\.js v1\.0 function as a version and update $LATEST to nodejs4\.3 or nodejs6\.10, depending on which version you chose\. No other versions of the function can be upgraded\. You can use this version information to point any existing applications to that version\.
+
   + The blueprint does not modify aliases\. Any aliases pointing to that function will have to be remapped to the new version\. For more information, see [AWS Lambda Function Versioning and Aliases](versioning-aliases.md)\. 
 
 ## The Context Methods in Node\.js Runtime v0\.10\.42<a name="nodejs-prog-model-oldruntime-context-methods"></a>
 
-Node\.js runtime v0\.10\.42 does not support the callback parameter for your Lambda function that the newer runtimes support\. When using runtime v0\.10\.42, you use the following context object methods to properly terminate your Lambda function\. The context object supports the `done()`, `succeed()`, and `fail()` methods that you can use to terminate your Lambda function\. These methods are also present in runtimes v4\.3, v6\.10, v8\.10 the newer runtimes for backward compatibility\. For information about transitioning your code to use the updated runtimes, see [Transitioning Lambda Function Code to Newer Runtimes](#transition-to-new-nodejs-runtime)\.
+Node\.js runtime v0\.10\.42 does not support the callback parameter for your Lambda function that runtimes v4\.3 and v6\.10 support\. When using runtime v0\.10\.42, you use the following context object methods to properly terminate your Lambda function\. The context object supports the `done()`, `succeed()`, and `fail()` methods that you can use to terminate your Lambda function\. These methods are also present in runtimes v4\.3 and v6\.10 for backward compatibility\. For information about transitioning your code to use runtime v4\.3 or v6\.10, see [Transitioning Lambda Function Code to Newer Runtimes](#transition-to-new-nodejs-runtime)\.
 
 ### context\.succeed\(\)<a name="nodejs-prog-model-context-methods-succeed"></a>
 
@@ -120,7 +141,9 @@ The `result` provided must be `JSON.stringify` compatible\. If AWS Lambda fails
 You can call this method without any parameters \(`succeed()`\) or pass a null value \(`succeed(null)`\)\. 
 
 The behavior of this method depends on the invocation type specified in the Lambda function invocation\. For more information about invocation types, see [Invoke](API_Invoke.md)\. 
+
 + If the Lambda function is invoked using the `Event` invocation type \(asynchronous invocation\), the method will return `HTTP status 202, request accepted` response\. 
+
 + If the Lambda function is invoked using the `RequestResponse` invocation type \(synchronous invocation\), the method will return HTTP status 200 \(OK\) and set the response body to the string representation of the `result`\.
 
 ### context\.fail\(\)<a name="nodejs-prog-model-context-methods-fail"></a>
@@ -156,7 +179,9 @@ context.done(Error error, Object result);
 ```
 
 Where:
+
 + `error` – is an optional parameter that you can use to provide results of the failed Lambda function execution\.
+
 +  `result` – is an optional parameter that you can use to provide the result of a successful function execution\. The result provided must be `JSON.stringify` compatible\. If an error is provided, this parameter is ignored\. 
 
 You can call this method without any parameters \(done\(\)\), or pass null \(done\(null\)\)\.
@@ -164,9 +189,13 @@ You can call this method without any parameters \(done\(\)\), or pass null \(don
 AWS Lambda treats any non\-null value for the `error` parameter as a handled exception\. 
 
 The function behavior depends on the invocation type specified at the time of the Lambda invocation\. For more information about invocation types, see [Invoke](API_Invoke.md)\. 
+
 + Regardless of the invocation type, the method automatically logs the string representation of non\-null values of `error` to the Amazon CloudWatch Logs stream associated with the Lambda function\. 
+
 + If the Lambda function was invoked using the `RequestResponse` \(synchronous\) invocation type, the method returns response body as follows:
+
   + If `error` is null, set the response body to the JSON representation of `result`\. This is similar to `context.succeed()`\. 
+
   + If the `error` is not null or the function is called with a single argument of type `error`, the `error` value will be populated in the response body\.
 
 **Note**  
@@ -174,30 +203,33 @@ For the error from both the `done(error, null)` and `fail(error)`, Lambda logs t
 
 ### Comparing the Context and Callback Methods<a name="context-and-callback"></a>
 
-If you previously created Lambda functions using Node\.js runtime v0\.10\.42, you used one of the `context` object methods \(`done()`, `succeed()`, and `fail()`\) to terminate your Lambda function\. In Node\.js runtimes v4\.3, v6\.10 and v8, these methods are supported primarily for backward compatibility\. We recommend you use the `callback` \(see [Using the Callback Parameter](nodejs-prog-model-handler.md#nodejs-prog-model-handler-callback)\)\. The following are `callback` examples equivalent to the `context` object methods:
+If you previously created Lambda functions using Node\.js runtime v0\.10\.42, you used one of the `context` object methods \(`done()`, `succeed()`, and `fail()`\) to terminate your Lambda function\. In Node\.js runtimes v4\.3 and v6\.10, these methods are supported primarily for backward compatibility\. We recommend you use the `callback` \(see [Using the Callback Parameter](nodejs-prog-model-handler.md#nodejs-prog-model-handler-callback)\)\. The following are `callback` examples equivalent to the `context` object methods:
+
 + The following example shows the `context.done()` method and corresponding equivalent `callback` supported in the newer runtime\.
 
   ```
   // Old way (Node.js runtime v0.10.42).
   context.done(null, 'Success message');  
   
-  // New way (Node.js runtime v4.3, v6.10 or v8.10)
+  // New way (Node.js runtime v4.3 or v6.10).
   context.callbackWaitsForEmptyEventLoop = false; 
   callback(null, 'Success message');
   ```
 **Important**  
 For performance reasons, AWS Lambda may reuse the same Node\.js process for multiple executions of the Lambda function\. If this happens, AWS Lambda freezes the Node process between execution,retaining the state information it needs to continue execution\.   
 When the `context` methods are called, AWS Lambda freezes the Node process immediately, without waiting for the event loop associated with the process to empty\. The process state and any events in the event loop are frozen\. When the function is invoked again, if AWS Lambda re\-uses the frozen process, the function execution continues with its same global state \(for example, events that remained in the event loop will begin to get processed\)\. However, when you use callback, AWS Lambda continues the Lambda function execution until the event loop is empty\. After all events in the event loop are processed, AWS Lambda then freezes the Node process, including any state variables in the Lambda function\. Therefore, if you want the same behavior as the context methods, you must set the `context` object property, `callbackWaitsForEmptyEventLoop`, to false\. 
+
 + The following example shows the `context.succeed()` method and corresponding equivalent `callback` supported in the newer runtime\.
 
   ```
   // Old way (Node.js runtime v0.10.42).
   context.succeed('Success message');  
   
-  // New way (Node.js runtime v4.3, v6.10 or v8.10).
+  // New way (Node.js runtime v4.3 or v6.10).
   context.callbackWaitsForEmptyEventLoop = false; 
   callback(null, 'Success message');
   ```
+
 + The following example shows the `context.fail()` method and corresponding equivalent `callback` supported in the newer runtime\.
 
   ```
diff --git a/doc_source/optional-console-use-cases.md b/doc_source/optional-console-use-cases.md
deleted file mode 100644
index fc30e48..0000000
--- a/doc_source/optional-console-use-cases.md
+++ /dev/null
@@ -1,33 +0,0 @@
-# Optional Console Use Cases<a name="optional-console-use-cases"></a>
-
-The Lambda console blueprints provide examples of you how you can use AWS Lambda with other AWS services\. They are designed as quick introductions that you can use as building blocks for larger AWS applications that integrate with your Lambda functions\. 
-
-## Amazon Kinesis Firehose<a name="aws-lambda-kinesis-firehose-blueprints"></a>
-
-
-| Blueprint name | Use Case | Sample Runtime Code | Related AWS Services | 
-| --- | --- | --- | --- | 
-| [Kinesis Firehose Syslog to JSON](https://console.aws.amazon.com/lambda/home?region=us-east-1#/create/new?bp=kinesis-firehose-syslog-to-json) |  Converts input records from SYSlog format to JSON\.  |  Node\.js  |  [Kinesis Firehose](http://docs.aws.amazon.com/firehose/latest/dev/)  | 
-| [Kinesis Firehose Aachelog To JSON to Python](https://console.aws.amazon.com/lambda/home?region=us-east-1#/create/new?bp=kinesis-firehose-apachelog-to-json-python) |  Converts input records from Apache Commong log format to JSON\.  |  Node\.js  |  [Kinesis Firehose](http://docs.aws.amazon.com/firehose/latest/dev/)  | 
-
-## Amazon Kinesis Analytics<a name="aws-lambda-kinesis-analytics-blueprints"></a>
-
-
-| Blueprint name | Use Case | Sample Runtime Code | Related AWS Services | 
-| --- | --- | --- | --- | 
-| [Process Compressed Record](https://console.aws.amazon.com/lambda/home?region=us-east-1#/create/new?bp=kinesis-firehose-syslog-to-json) |  Receives compressed \(GZIP or Deflate compressed\) JSON or CSV records as input and returns decompressed records with a processing status\.  |  node\.js 6\.10  |  Kinesis Analytics  | 
-| [Kinesis Analytics Output](https://console.aws.amazon.com/lambda/home?region=us-east-1#/create/new?bp=kinesis-analytics-output) |  Delivers output records from a Kinesis Analytics application to a custom destination\.  |  node\.js 6\.10  |  Kinesis Analytics  | 
-
-## Amazon S3<a name="aws-lambda-s3-blueprints"></a>
-
-
-| Blueprint name | Use Case | Sample Runtime Code | Related AWS Services | 
-| --- | --- | --- | --- | 
-| [Using Python to Get an Amazon S3 Object](https://console.aws.amazon.com/lambda/home?region=us-east-1#/create/new?bp=s3-get-object-python) |  Retrieves an object from an Amazon S3 bucket and display its contents\.  |  python 2\.7  |  Amazon S3  | 
-
-## CloudWatch<a name="aws-lambda-cloudwatch-blueprints"></a>
-
-
-| Blueprint name | Use Case | Sample Runtime Code | Related AWS Services | 
-| --- | --- | --- | --- | 
-| [Use LogicMonitor REST API to Create LogicMonitor OpsNotes for CloudWatch Events](https://console.aws.amazon.com/lambda/home?region=us-east-1#/create/new?bp=logicmonitor-send-cloudwatch-events) |  Implements the [LogicMonitor](https://www.logicmonitor.com) REST API to create OpsNotes for CloudWatch Events and how to add LogMonitor API tokens as [Environment Variables](env_variables.md)\.  |  python 2\.7  |  CloudWatch   | 
\ No newline at end of file
diff --git a/doc_source/programming-model-v2.md b/doc_source/programming-model-v2.md
index fa09838..91bf215 100644
--- a/doc_source/programming-model-v2.md
+++ b/doc_source/programming-model-v2.md
@@ -1,9 +1,11 @@
 # Programming Model<a name="programming-model-v2"></a>
 
 You write code for your Lambda function in one of the languages AWS Lambda supports\. Regardless of the language you choose, there is a common pattern to writing code for a Lambda function that includes the following core concepts: 
+
 + **Handler** – Handler is the function AWS Lambda calls to start execution of your Lambda function\. You identify the handler when you create your Lambda function\. When a Lambda function is invoked, AWS Lambda starts executing your code by calling the handler function\. AWS Lambda passes any event data to this handler as the first parameter\. Your handler should process the incoming event data and may invoke any other functions/methods in your code\. 
 
    
+
 + **The context object and how it interacts with Lambda at runtime** – AWS Lambda also passes a  context  object to the handler function, as the second parameter\. Via this context object your code can interact with AWS Lambda\. For example, your code can find the execution time remaining before AWS Lambda terminates your Lambda function\. 
 
    
@@ -11,17 +13,24 @@ You write code for your Lambda function in one of the languages AWS Lambda suppo
   In addition, for languages such as Node\.js, there is an asynchronous platform that uses callbacks\. AWS Lambda provides additional methods on this context object\. You use these context object methods to tell AWS Lambda to terminate your Lambda function and optionally return values to the caller\.
 
    
+
 + **Logging** – Your Lambda function can contain logging statements\. AWS Lambda writes these logs to CloudWatch Logs\. Specific language statements generate log entries, depending on the language you use to author your Lambda function code\. 
 
    
+
 + **Exceptions** – Your Lambda function needs to communicate the result of the function execution to AWS Lambda\. Depending on the language you author your Lambda function code, there are different ways to end a request successfully or to notify AWS Lambda an error occurred during execution\. If you invoke the function synchronously, then AWS Lambda forwards the result back to the client\.
 
 **Note**  
- Your Lambda function code must be written in a stateless style, and have no affinity with the underlying compute infrastructure\. Your code should expect local file system access, child processes, and similar artifacts to be limited to the lifetime of the request\. Persistent state should be stored in Amazon S3, Amazon DynamoDB, or another cloud storage service\. Requiring functions to be stateless enables AWS Lambda to launch as many copies of a function as needed to scale to the incoming rate of events and requests\. These functions may not always run on the same compute instance from request to request, and a given instance of your Lambda function may be used more than once by AWS Lambda\. For more information, see [](best-practices.md)
+ Your Lambda function code must be written in a stateless style, and have no affinity with the underlying compute infrastructure\. Your code should expect local file system access, child processes, and similar artifacts to be limited to the lifetime of the request\. Persistent state should be stored in Amazon S3, Amazon DynamoDB, or another cloud storage service\. Requiring functions to be stateless enables AWS Lambda to launch as many copies of a function as needed to scale to the incoming rate of events and requests\. These functions may not always run on the same compute instance from request to request, and a given instance of your Lambda function may be used more than once by AWS Lambda\. For more information, see [Programming Model\(Node\.js\)](programming-model.md) 
 
 The following language specific topics provide detailed information:
+
 + [Programming Model\(Node\.js\)](programming-model.md)
+
 + [Programming Model for Authoring Lambda Functions in Java](java-programming-model.md)
+
 + [Programming Model for Authoring Lambda Functions in C\#](dotnet-programming-model.md)
+
 + [Programming Model for Authoring Lambda Functions in Python](python-programming-model.md)
+
 + [Programming Model for Authoring Lambda Functions in Go](go-programming-model.md)
\ No newline at end of file
diff --git a/doc_source/programming-model.md b/doc_source/programming-model.md
index 1a0b085..ed8eeeb 100644
--- a/doc_source/programming-model.md
+++ b/doc_source/programming-model.md
@@ -1,18 +1,20 @@
 # Programming Model\(Node\.js\)<a name="programming-model"></a>
 
 AWS Lambda currently supports the following Node\.js runtimes:
-+ Node\.js runtime v8\.10 \(runtime = nodejs8\.10\) 
+
 + Node\.js runtime v6\.10 \(runtime = nodejs6\.10\) 
+
 + Node\.js runtime v4\.3 \(runtime = nodejs4\.3\) 
-+ Node\.js runtime v0\.10\.42 \(runtime = nodejs\)\* 
+
++ Node\.js runtime v0\.10\.42 \(runtime = nodejs\) 
 **Important**  
-\*Node v0\.10\.42 is currently marked as deprecated\. For more information, see [Runtime Support Policy](runtime-support-policy.md)\. You must migrate existing functions to the newer Node\.js runtime versions available on AWS Lambda \(nodejs\.8\.10, nodejs6\.10 or nodejs4\.3\) as soon as possible\. Note that you will have to follow this procedure for each region that contains functions written in the Node v0\.10\.42 runtime\. For information about programming model differences in the v0\.10\.42 runtime, see [Using the Earlier Node\.js Runtime v0\.10\.42](nodejs-prog-model-using-old-runtime.md)\. 
+Node v0\.10\.42 is currently marked as deprecated\. For more information, see [Runtime Support Policy](runtime-support-policy.md)\. You must migrate existing functions to the newer Node\.js runtime versions available on AWS Lambda \(nodejs4\.3 or nodejs6\.10\) as soon as possible\. Note that you will have to follow this procedure for each region that contains functions written in the Node v0\.10\.42 runtime\. For information about programming model differences in the v0\.10\.42 runtime, see [Using the Earlier Node\.js Runtime v0\.10\.42](nodejs-prog-model-using-old-runtime.md)\. 
 
 When you create a Lambda function, you specify the runtime that you want to use\. For more information, see `runtime` parameter of [CreateFunction](API_CreateFunction.md)\. 
 
-The following sections explain how [common programming patterns and core concepts](http://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html) apply when authoring Lambda function code in Node\.js\. The programming model described in the following sections applies to all supported runtime versions, except where indicated\. 
+The following sections explain how [common programming patterns and core concepts](http://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html) apply when authoring Lambda function code in Node\.js\. The programming model described in the following sections apply to both versions, except where indicated\. 
+
 
-**Topics**
 + [Lambda Function Handler \(Node\.js\)](nodejs-prog-model-handler.md)
 + [The Context Object \(Node\.js\)](nodejs-prog-model-context.md)
 + [Logging \(Node\.js\)](nodejs-prog-model-logging.md)
diff --git a/doc_source/python-context-object.md b/doc_source/python-context-object.md
index ad83107..87f2a4a 100644
--- a/doc_source/python-context-object.md
+++ b/doc_source/python-context-object.md
@@ -1,14 +1,18 @@
 # The Context Object \(Python\)<a name="python-context-object"></a>
 
-**Topics**
+
 + [Example](#python-context-object-example)
 + [The Context Object Methods \(Python\)](#python-context-object-methods)
 + [The Context Object Attributes \(Python\)](#python-context-object-props)
 
 While a Lambda function is executing, it can interact with the AWS Lambda service to get useful runtime information such as:
+
 + How much time is remaining before AWS Lambda terminates your Lambda function \(timeout is one of the Lambda function configuration properties\)\.
+
 + The CloudWatch log group and log stream associated with the Lambda function that is executing\.
+
 + The AWS request ID returned to the client that invoked the Lambda function\. You can use the request ID for any follow up inquiry with AWS support\. 
+
 +  If the Lambda function is invoked through AWS Mobile SDK, you can learn more about the mobile application calling the Lambda function\. 
 
 AWS Lambda provides this information via the `context` object that the service passes as the second parameter to your Lambda function handler\. For more information, see [Lambda Function Handler \(Python\)](python-programming-model-handler-types.md)\. 
@@ -79,19 +83,28 @@ The value is null if your Lambda function is unable to create a log stream, whic
 
 **identity**  
 Information about the Amazon Cognito identity provider when invoked through the AWS Mobile SDK\. It can be null\.  
+
 + **identity\.cognito\_identity\_id**
+
 + **identity\.cognito\_identity\_pool\_id**
 
 **client\_context**  
 Information about the client application and device when invoked through the AWS Mobile SDK\. It can be null\.  
+
 + **client\_context\.client\.installation\_id**
+
 + **client\_context\.client\.app\_title**
+
 + **client\_context\.client\.app\_version\_name**
+
 + **client\_context\.client\.app\_version\_code**
+
 + **client\_context\.client\.app\_package\_name**
+
 + **client\_context\.custom**
 
   A `dict` of custom values set by the mobile client application\.
+
 + **client\_context\.env**
 
   A `dict` of environment information provided by the AWS Mobile SDK\.
diff --git a/doc_source/python-exceptions.md b/doc_source/python-exceptions.md
index e8f6011..d5d9457 100644
--- a/doc_source/python-exceptions.md
+++ b/doc_source/python-exceptions.md
@@ -27,6 +27,7 @@ When you invoke this Lambda function, it will raise an exception and AWS Lambda
  Note that the stack trace is returned as the `stackTrace` JSON array of stack trace elements\. 
 
 How you get the error information back depends on the invocation type that the client specifies at the time of function invocation: 
+
 + If a client specifies the `RequestResponse` invocation type \(that is, synchronous execution\), it returns the result to the client that made the invoke call\. 
 
   For example, the console always use the `RequestResponse` invocation type, so the console will display the error in the **Execution result** section as shown:  
@@ -34,6 +35,7 @@ How you get the error information back depends on the invocation type that the c
 
   The same information is also sent to CloudWatch and the **Log output** section shows the same logs\.  
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/exception-shown-in-console20.png)
+
 + If a client specifies the `Event` invocation type \(that is, asynchronous execution\), AWS Lambda will not return anything\. Instead, it logs the error information to CloudWatch Logs\. You can also see the error metrics in CloudWatch Metrics\.
 
 Depending on the event source, AWS Lambda may retry the failed Lambda function\. For example, if Kinesis is the event source, AWS Lambda will retry the failed invocation until the Lambda function succeeds or the records in the stream expire\. 
@@ -51,7 +53,9 @@ Depending on the event source, AWS Lambda may retry the failed Lambda function\.
 You can create custom error handling to raise an exception directly from your Lambda function and handle it directly \(Retry or Catch\) within an AWS Step Functions State Machine\. For more information, see [Handling Error Conditions Using a State Machine](http://docs.aws.amazon.com/step-functions/latest/dg/tutorial-handling-error-conditions.html)\. 
 
 Consider a `CreateAccount` [state](http://docs.aws.amazon.com/step-functions/latest/dg/awl-ref-states.html) is a [task](http://docs.aws.amazon.com/step-functions/latest/dg/awl-ref-states-task.html) that writes a customer's details to a database using a Lambda function\.
+
 + If the task succeeds, an account is created and a welcome email is sent\.
+
 + If a user tries to create an account for a username that already exists, the Lambda function raises an error, causing the state machine to suggest a different username and to retry the account\-creation process\.
 
 The following code samples demonstrate how to do this\. Note that custom errors in Python must extend the `Exception` class\.
diff --git a/doc_source/python-logging.md b/doc_source/python-logging.md
index e7f3aca..a863b9f 100644
--- a/doc_source/python-logging.md
+++ b/doc_source/python-logging.md
@@ -3,7 +3,9 @@
 Your Lambda function can contain logging statements\. AWS Lambda writes these logs to CloudWatch\. If you use the Lambda console to invoke your Lambda function, the console displays the same logs\. 
 
 The following Python statements generate log entries:
+
 + `print` statements\.
+
 + `Logger` functions in the `logging` module \(for example, `logging.Logger.info` and `logging.Logger.error`\)\.
 
 Both `print` and `logging.*` functions write logs to CloudWatch Logs but the `logging.*` functions write additional information to each log entry, such as time stamp and log level\.
@@ -50,8 +52,11 @@ The console uses the `RequestResponse` invocation type \(synchronous invocation\
 ## Finding Logs<a name="python-logging-finding-logs"></a>
 
 You can find the logs that your Lambda function writes, as follows:
+
 + **In the AWS Lambda console** – The ** Log output**  section in AWS Lambda console shows the logs\. 
+
 + **In the response header, when you invoke a Lambda function programmatically** – If you invoke a Lambda function programmatically, you can add the `LogType` parameter to retrieve the last 4 KB of log data that is written to CloudWatch Logs\. AWS Lambda returns this log information in the `x-amz-log-results` header in the response\. For more information, see [Invoke](API_Invoke.md)\.
 
   If you use AWS CLI to invoke the function, you can specify the` --log-type parameter` with value `Tail` to retrieve the same information\.
+
 + **In CloudWatch Logs** – To find your logs in CloudWatch you need to know the log group name and log stream name\. You can use the `context.logGroupName`, and `context.logStreamName` properties in your code to get this information\. When you run your Lambda function, the resulting logs in the console or CLI will show you the log group name and log stream name\. 
\ No newline at end of file
diff --git a/doc_source/python-programming-model-handler-types.md b/doc_source/python-programming-model-handler-types.md
index fad9472..11d4c12 100644
--- a/doc_source/python-programming-model-handler-types.md
+++ b/doc_source/python-programming-model-handler-types.md
@@ -9,12 +9,17 @@ def handler_name(event, context):
 ```
 
 In the syntax, note the following:
+
 + `event` – AWS Lambda uses this parameter to pass in event data to the handler\. This parameter is usually of the Python `dict` type\. It can also be `list`, `str`, `int`, `float`, or `NoneType` type\. 
+
 + `context` – AWS Lambda uses this parameter to provide runtime information to your handler\. This parameter is of the `LambdaContext` type\.
+
 + Optionally, the handler can return a value\. What happens to the returned value depends on the invocation type you use when invoking the Lambda function:
+
   + If you use the `RequestResponse` invocation type \(synchronous execution\), AWS Lambda returns the result of the Python function call to the client invoking the Lambda function \(in the HTTP response to the invocation request, serialized into JSON\)\. For example, AWS Lambda console uses the `RequestResponse` invocation type, so when you invoke the function using the console, the console will display the returned value\.
 
     If the handler returns `NONE`, AWS Lambda returns null\.
+
   + If you use the `Event` invocation type \(asynchronous execution\), the value is discarded\.
 
 For example, consider the following Python example code\. 
diff --git a/doc_source/python-programming-model.md b/doc_source/python-programming-model.md
index ecacf77..b674899 100644
--- a/doc_source/python-programming-model.md
+++ b/doc_source/python-programming-model.md
@@ -2,7 +2,7 @@
 
 The following sections explain how [common programming patterns and core concepts](http://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html) apply when authoring Lambda function code in Python\.
 
-**Topics**
+
 + [Lambda Function Handler \(Python\)](python-programming-model-handler-types.md)
 + [The Context Object \(Python\)](python-context-object.md)
 + [Logging \(Python\)](python-logging.md)
diff --git a/doc_source/resource-model.md b/doc_source/resource-model.md
index 481d9ca..d36238d 100644
--- a/doc_source/resource-model.md
+++ b/doc_source/resource-model.md
@@ -1,6 +1,7 @@
 # Configuring Lambda Functions<a name="resource-model"></a>
 
 A Lambda function consists of code and any associated dependencies\. In addition, a Lambda function also has configuration information associated with it\. Initially, you specify the configuration information when you create a Lambda function\. Lambda provides an API for you to update some of the configuration data\. Lambda function configuration information includes the following key elements: 
+
 + **Compute resources that you need** – You only specify the amount of memory you want to allocate for your Lambda function\. AWS Lambda allocates CPU power proportional to the memory by using the same ratio as a general purpose Amazon EC2 instance type, such as an M3 type\. For example, if you allocate 256 MB memory, your Lambda function will receive twice the CPU share than if you allocated only 128 MB\. 
 
   You can update the configuration and request additional memory in 64 MB increments from 128MB to 3008 MB\. For information about relevant limits, see [AWS Lambda Limits](limits.md)\.
@@ -30,12 +31,15 @@ A Lambda function consists of code and any associated dependencies\. In addition
   For information on setting up and using the AWS CLI, see [Set Up the AWS Command Line Interface \(AWS CLI\)](setup-awscli.md)\.
 
    
+
 + **Maximum execution time \(timeout\)** – You pay for the AWS resources that are used to run your Lambda function\. To prevent your Lambda function from running indefinitely, you specify a timeout\. When the specified timeout is reached, AWS Lambda terminates your Lambda function\. 
 **Note**  
 The default SDK client will automatically time out any Lambda function request that exceeds 50 seconds\. To accommodate functions that require more processing time, increase the default timeout limit by modifying the SDK client configuration\. 
 
    
+
 + **IAM role \(execution role\)** – This is the role that AWS Lambda assumes when it executes the Lambda function on your behalf\. For more information, see [AWS Lambda Permissions Model](intro-permission-model.md)\.
 
    
+
 + **Handler name** – The handler refers to the method in your code where AWS Lambda begins execution\. AWS Lambda passes any event information, which triggered the invocation, as a parameter to the handler method\.
\ No newline at end of file
diff --git a/doc_source/retries-on-errors.md b/doc_source/retries-on-errors.md
index 1701eff..78dc04c 100644
--- a/doc_source/retries-on-errors.md
+++ b/doc_source/retries-on-errors.md
@@ -1,26 +1,33 @@
 # Understanding Retry Behavior<a name="retries-on-errors"></a>
 
 A Lambda function can fail for any of the following reasons:
+
 + The function times out while trying to reach an endpoint\.
 
    
+
 + The function fails to successfully parse input data\.
 
    
+
 + The function experiences resource constraints, such as out\-of\-memory errors or other timeouts\.
 
 If any of these failures occur, your function will throw an exception\. How the exception is handled depends upon how the Lambda function was invoked:
+
 + **Event sources that aren't stream\-based** – Some of these event sources are set up to invoke a Lambda function synchronously and others invoke it asynchronously\. Accordingly, exceptions are handled as follows:
 
    
+
   + **Synchronous invocation** – The invoking application receives a 429 error and is responsible for retries\. For a list of supported event sources and the invocation types they use, see [Supported Event Sources](http://docs.aws.amazon.com/lambda/latest/dg/invoking-lambda-function.html)\. These event sources may have additional retries built into the integration\. 
 
     If you invoked the Lambda function directly through AWS SDKs, your client receives the error and can choose to retry\.
 
      
+
   + **Asynchronous invocation** – Asynchronous events are queued before being used to invoke the Lambda function\. If AWS Lambda is unable to fully process the event, it will automatically retry the invocation twice, with delays between retries\. If you have specified a Dead Letter Queue for your function, then the failed event is sent to the specified Amazon SQS queue or Amazon SNS topic\. If you don't specify a Dead Letter Queue \(DLQ\), which is not required and is the default setting, then the event will be discarded\. For more information, see [Dead Letter Queues](dlq.md)\. 
 
      
+
 + **Stream\-based event sources** – For stream\-based event sources \(Amazon Kinesis Data Streams and DynamoDB streams\), AWS Lambda polls your stream and invokes your Lambda function\. Therefore, if a Lambda function fails, AWS Lambda attempts to process the erring batch of records until the time the data expires, which can be up to seven days for Amazon Kinesis Data Streams\. The exception is treated as blocking, and AWS Lambda will not read any new records from the stream until the failed batch of records either expires or processed successfully\. This ensures that AWS Lambda processes the stream events in order\.
 
-For more information about invocation modes, see [Event Source Mapping](invocation-options.md#intro-invocation-modes)\.
\ No newline at end of file
+For more information about invocation modes, see [Event Source Mapping](java-invocation-options.md#intro-invocation-modes)\.
\ No newline at end of file
diff --git a/doc_source/running-lambda-code.md b/doc_source/running-lambda-code.md
index 0e2a583..8e8a7c1 100644
--- a/doc_source/running-lambda-code.md
+++ b/doc_source/running-lambda-code.md
@@ -8,12 +8,15 @@ The content of this section is for information only\. AWS Lambda manages Executi
 It takes time to set up an Execution Context and do the necessary "bootstrapping", which adds some latency each time the Lambda function is invoked\. You typically see this latency when a Lambda function is invoked for the first time or after it has been updated because AWS Lambda tries to reuse the Execution Context for subsequent invocations of the Lambda function\.
 
 After a Lambda function is executed, AWS Lambda maintains the Execution Context for some time in anticipation of another Lambda function invocation\. In effect, the service freezes the Execution Context after a Lambda function completes, and thaws the context for reuse, if AWS Lambda chooses to reuse the context when the Lambda function is invoked again\. This Execution Context reuse approach has the following implications: 
+
 + Any declarations in your Lambda function code \(outside the `handler` code, see [Programming Model](programming-model-v2.md)\) remains initialized, providing additional optimization when the function is invoked again\. For example, if your Lambda function establishes a database connection, instead of reestablishing the connection, the original connection is used in subsequent invocations\. We suggest adding logic in your code to check if a connection exists before creating one\.
 
    
+
 + Each Execution Context provides 500MB of additional disk space in the `/tmp` directory\. The directory content remains when the Execution Context is frozen, providing transient cache that can be used for multiple invocations\. You can add extra code to check if the cache has the data that you stored\. For information on deployment limits, see [AWS Lambda Limits](limits.md)\.
 
    
+
 + Background processes or callbacks initiated by your Lambda function that did not complete when the function ended resume if AWS Lambda chooses to reuse the Execution Context\. You should make sure any background processes or callbacks \(in case of Node\.js\) in your code are complete before the code exits\.
 
 **Note**  
diff --git a/doc_source/scaling.md b/doc_source/scaling.md
index 11ff688..320b760 100644
--- a/doc_source/scaling.md
+++ b/doc_source/scaling.md
@@ -1,7 +1,9 @@
 # Understanding Scaling Behavior<a name="scaling"></a>
 
 Concurrent executions refers to the number of executions of your function code that are happening at any given time\. You can estimate the concurrent execution count, but the concurrent execution count will differ depending on whether or not your Lambda function is processing events from a stream\-based event source\. 
+
 + **Stream\-based event sources** for Lambda functions that process Kinesis or DynamoDB streams the number of shards is the unit of concurrency\. If your stream has 100 active shards, there will be at most 100 Lambda function invocations running concurrently\. This is because Lambda processes each shard’s events in sequence\. 
+
 + **Event sources that aren't stream\-based** – If you create a Lambda function to process events from event sources that aren't stream\-based \(for example, Lambda can process every event from other sources, like Amazon S3 or API Gateway\), each published event is a unit of work, in parallel, up to your account limits\. Therefore, the number of events \(or requests\) these event sources publish influences the concurrency\. You can use the this formula to estimate your concurrent Lambda function invocations:
 
   ```
@@ -47,7 +49,6 @@ The table below outlines the immediate concurrency increase per region:
 | EU \(Frankfurt\) | 1000 | 
 | EU \(London\) | 500 | 
 | EU \(Ireland\) | 3000 | 
-| EU \(Paris\) | 500 | 
 | AWS GovCloud \(US\) | 500 | 
 | US East \(Ohio\) | 500 | 
 | US West \(N\. California\) | 500 | 
diff --git a/doc_source/serverless-deploy-wt.md b/doc_source/serverless-deploy-wt.md
index 9a9d2a0..6ce4512 100644
--- a/doc_source/serverless-deploy-wt.md
+++ b/doc_source/serverless-deploy-wt.md
@@ -1,8 +1,8 @@
 # Create Your Own Serverless Application<a name="serverless-deploy-wt"></a>
 
-In the following tutorial, you create a simple serverless application that consists of a single Node\.js function that returns the name of an Amazon S3 bucket you specify as an environment variable\. Follow these steps:
+In the following tutorial, you create a simple serverless application that consists of a single function that returns the name of an Amazon S3 bucket you specify as an environment variable\. Follow these steps:
 
-1. Copy and paste the following Node\.js code into a text file and save it as `index.js`\. This represents your Lambda function\. 
+1. Copy and paste the following into a text file and save it as `index.js` 
 
    ```
    var AWS = require('aws-sdk');
@@ -14,7 +14,7 @@ In the following tutorial, you create a simple serverless application that consi
    }
    ```
 
-1. Paste the following into a text file and save it as `example.yaml`\. Note that the `Runtime` parameter uses `nodejs6.10` but you can also specify `nodejs8.10` or `nodejs4.3`\.
+1. Paste the following into a text file and save it as `example.yaml`\. Note that the `Runtime` parameter uses `nodejs6.10` but you can specify `nodejs4.3`\.
 
    ```
    AWSTemplateFormatVersion: '2010-09-09'
@@ -33,7 +33,9 @@ In the following tutorial, you create a simple serverless application that consi
 1. Create a folder called *examplefolder* and place the `example.yaml` file and the `index.js` file inside the folder\.
 
    Your *example* folder now contains the following two files that you can then use to package the serverless application:
+
    + `example.yaml`
+
    +  `index.js` 
 
 ## Packaging and Deployment<a name="serverless-deploy"></a>
@@ -89,12 +91,17 @@ You can export a serverless application and re\-deploy it to, for example, a dif
 1. Sign in to the AWS Management Console and open the AWS Lambda console at [https://console\.aws\.amazon\.com/lambda/](https://console.aws.amazon.com/lambda/)\.
 
 1. Do any of the following: 
+
    + **Create a function using a Lambda blueprint** – Choose a blueprint and follow the steps to create a Lambda function\. For an example, see [Create a Simple Lambda Function](get-started-create-function.md)\. When you reach the **Review** page, choose **Export function**\.
+
    + **Create a function** – Choose **Create function**, and then create your function\. After your Lambda function is created, you can export it by selecting the function\. Choose **Actions**, then choose **Export function**\. 
+
    + **Open an existing Lambda function** – Open the function by choosing the **Function name**, choose **Actions**, choose **Export function**\.
 
 1. In the **Export your function** window, you have the following options:
+
    + Choose **Download AWS SAM file**, which defines the Lambda function and other resources that comprise your serverless application\.
+
    + Choose **Download deployment package**, which contains your Lambda function code and any dependent libraries\.
 
 Use the AWS SAM file and the ZIP deployment package and follow the steps in [Packaging and Deployment](#serverless-deploy) to re\-deploy the serverless application\.
\ No newline at end of file
diff --git a/doc_source/serverless_app.md b/doc_source/serverless_app.md
index 6cbea44..d7d1733 100644
--- a/doc_source/serverless_app.md
+++ b/doc_source/serverless_app.md
@@ -1,6 +1,6 @@
 # Using the AWS Serverless Application Model \(AWS SAM\)<a name="serverless_app"></a>
 
-The AWS Serverless Application Model \(AWS SAM\) is a model to define serverless applications\. AWS SAM is natively supported by AWS CloudFormation and defines simplified syntax for expressing serverless resources\. The specification currently covers APIs, Lambda functions and Amazon DynamoDB tables\. SAM is available under Apache 2\.0 for AWS partners and customers to adopt and extend within their own toolsets\. For details on the specification, see the [AWS Serverless Application Model](https://github.com/awslabs/serverless-application-model)\.
+The AWS Serverless Application Model \(AWS SAM\) is a model to define serverless applications\. AWS SAM is natively supported by AWS CloudFormation and defines simplified syntax for expressing serverless resources\. The specification currently covers APIs, Lambda functions and Amazon DynamoDB tables\. The specification is available under Apache 2\.0 for AWS partners and customers to adopt and extend within their own toolsets\. For details on the specification, see the [AWS Serverless Application Model](https://github.com/awslabs/serverless-application-model)\.
 
 ## Serverless Resources Within AWS SAM<a name="serverless_app_resources"></a>
 
diff --git a/doc_source/setup-awscli.md b/doc_source/setup-awscli.md
index c9ca0dc..766ad4c 100644
--- a/doc_source/setup-awscli.md
+++ b/doc_source/setup-awscli.md
@@ -5,7 +5,9 @@ All the exercises in this guide assume that you are using administrator user cre
 **To set up the AWS CLI**
 
 1. Download and configure the AWS CLI\. For instructions, see the following topics in the *AWS Command Line Interface User Guide*\. 
+
    + [Getting Set Up with the AWS Command Line Interface](http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-set-up.html)
+
    + [Configuring the AWS Command Line Interface](http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html)
 
 1. Add a named profile for the administrator user in the AWS CLI config file\. You use this profile when executing the AWS CLI commands\. 
@@ -20,11 +22,13 @@ All the exercises in this guide assume that you are using administrator user cre
    For a list of available AWS regions, see [Regions and Endpoints](http://docs.aws.amazon.com/general/latest/gr/rande.html) in the *Amazon Web Services General Reference*\.
 
 1. Verify the setup by entering the following commands at the command prompt\. 
+
    + Try the help command to verify that the AWS CLI is installed on your computer:
 
      ```
      aws help
      ```
+
    + Try a Lambda command to verify the user can reach AWS Lambda\. This command lists Lambda functions in the account, if any\. The AWS CLI uses the `adminuser` credentials to authenticate the request\.
 
      ```
diff --git a/doc_source/setup.md b/doc_source/setup.md
index 9e79efd..1180ecc 100644
--- a/doc_source/setup.md
+++ b/doc_source/setup.md
@@ -101,8 +101,11 @@ https://your_account_alias.signin.aws.amazon.com/console/
 To verify the sign\-in link for IAM users for your account, open the IAM console and check under **IAM users sign\-in link:** on the dashboard\.
 
 For more information about IAM, see the following:
+
 + [AWS Identity and Access Management \(IAM\)](https://aws.amazon.com/iam/)
+
 + [Getting Started](http://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started.html)
+
 + [IAM User Guide](http://docs.aws.amazon.com/IAM/latest/UserGuide/)
 
 ### Next Step<a name="setting-up-next-step"></a>
diff --git a/doc_source/tagging.md b/doc_source/tagging.md
index ec58ba5..7f27609 100644
--- a/doc_source/tagging.md
+++ b/doc_source/tagging.md
@@ -1,10 +1,12 @@
 # Tagging Lambda Functions<a name="tagging"></a>
 
 Lambda functions can span multiple applications across separate regions\. To simplify the process of tracking the frequency and cost of each function invocation, you can use tags\. Tags are key\-value pairs that you attach to AWS resources to better organize them\. They are particularly useful when you have many resources of the same type, which in the case of AWS Lambda, is a function\. By using tags, customers with hundreds of Lambda functions can easily access and analyze a specific set by filtering on those that contain the same tag\. Two of the key advantages of tagging your Lambda functions are:
+
 + **Grouping and Filtering:** By applying tags, you can use the Lambda console or CLI to isolate a list of Lambda functions contained within a specific application or billing department\. For more information, see [Filtering on Tagged Lambda Functions](#tag-filtering)\. 
+
 + **Cost allocation:** Because Lambda's support for tagging is integrated with AWS Billing, you can break down bills into dynamic categories and map functions to specific cost centers\. For example, if you tag all Lambda functions with a "Department" key, then all AWS Lambda costs can be broken down by department\. You can then provide an individual department value, such "Department 1" or "Department 2" to direct the function invocation cost to the appropriate cost center\. Cost allocation is surfaced via detailed billing reports, making it easier for you to categorize and track your AWS costs\. 
 
-**Topics**
+
 + [Tagging Lambda Functions for Billing](#tagging-for-billing)
 + [Applying Tags to Lambda Functions](#how-to-tag)
 + [Filtering on Tagged Lambda Functions](#tag-filtering)
@@ -22,7 +24,9 @@ In AWS Lambda the only resource that can be tagged is a function\. You cannot ta
 ## Applying Tags to Lambda Functions<a name="how-to-tag"></a>
 
 How you tag your Lambda functions depends on how you create the function\. You can apply them using the Lambda console or CLI, as explained in the following sections: 
+
 + [Applying Tags to Lambda Functions Using the Console](#how-to-tag-console)
+
 + [Applying Tags to Lambda Functions Using the CLI](#how-to-tag-cli)
 
 ### Applying Tags to Lambda Functions Using the Console<a name="how-to-tag-console"></a>
@@ -98,6 +102,7 @@ You are limited to a maximum of 50 tags per Lambda function\. If you delete the
 ### Filtering Lambda Functions Using the CLI<a name="tag-filtering-cli"></a>
 
 If you want to view the tags that are applied to a specific Lambda function, you can use either of the following Lambda API commands:
+
 + [ListTags](API_ListTags.md): You supply your Lambda function ARN \(Amazon Resource Name\) to view a list of the tags associated with this function:
 
   ```
@@ -106,6 +111,7 @@ If you want to view the tags that are applied to a specific Lambda function, you
   --region region \
   --profile adminuser
   ```
+
 + [GetFunction](API_GetFunction.md): You supply your Lambda function name to a view a list of the tags associated with this function:
 
   ```
@@ -120,9 +126,15 @@ You can also use the AWS Tagging Service’s [GetResources](http://docs.aws.amaz
 ## Tag Restrictions<a name="tag-restrictions"></a>
 
 The following restrictions apply to tags:
+
 + Maximum number of tags per resource—50
+
 + Maximum key length—128 Unicode characters in UTF\-8
+
 + Maximum value length—256 Unicode characters in UTF\-8
+
 + Tag keys and values are case sensitive\.
+
 + Do not use the `aws:` prefix in your tag names or values because it is reserved for AWS use\. You can't edit or delete tag names or values with this prefix\. Tags with this prefix do not count against your tags per resource limit\.
+
 + If your tagging schema will be used across multiple services and resources, remember that other services may have restrictions on allowed characters\. Generally allowed characters are: letters, spaces, and numbers representable in UTF\-8, plus the following special characters: \+ \- = \. \_ : / @\.
\ No newline at end of file
diff --git a/doc_source/test-sam-local.md b/doc_source/test-sam-local.md
index 51f188d..19568d2 100644
--- a/doc_source/test-sam-local.md
+++ b/doc_source/test-sam-local.md
@@ -3,22 +3,23 @@
 **Note**  
 This feature is available as part of a public beta and is subject to change at any time\.
 
-[AWS SAM](https://docs.aws.amazon.com/lambda/latest/dg/deploying-lambda-apps.html#Using the AWS Serverless Application Model (AWS SAM)) is a fast and easy way of deploying your serverless applications, allowing you to write simple templates to describe your functions and their event sources \(Amazon API Gateway, Amazon S3, Kinesis, and so on\)\. 
-
-Based on AWS SAM, SAM Local is an AWS CLI tool that provides an environment for you to develop, test, and analyze your serverless applications locally before uploading them to the Lambda runtime\. Whether you're developing on Linux, Mac, or Microsoft Windows, you can use SAM Local to create a local testing environment that simulates the AWS runtime environment\. Doing so helps you address issues such as performance\. Working with SAM Local also allows faster, iterative development of your Lambda function code because there is no need to redeploy your application package to the AWS Lambda runtime\. For more information, see [Building a Simple Application Using SAM Local](#sam-cli-simple-app)\.
+[AWS SAM](https://docs.aws.amazon.com/lambda/latest/dg/deploying-lambda-apps.html#Using the AWS Serverless Application Model (AWS SAM)) is a fast and easy way of deploying your serverless applications, allowing you to write simple templates to describe your functions and their event sources \(Amazon API Gateway, Amazon S3, Kinesis, and so on\)\. Based on AWS SAM, SAM Local is an AWS CLI tool that provides an environment for you to develop, test, and analyze your serverless applications locally before uploading them to the Lambda runtime\. Whether you're developing on Linux, Mac, or Microsoft Windows, you can use SAM Local to create a local testing environment that simulates the AWS runtime environment\. Doing so helps you address issues such as performance\. Working with SAM Local also allows faster, iterative development of your Lambda function code because there is no need to redeploy your application package to the AWS Lambda runtime\. For more information, see [Building a Simple Application Using SAM Local](#sam-cli-simple-app)\.
 
 SAM Local works with [AWS SAM](https://docs.aws.amazon.com/lambda/latest/dg/deploying-lambda-apps.html#Using the AWS Serverless Application Model (AWS SAM)), allowing you to invoke functions defined in SAM templates, whether directly or through API Gateway endpoints\. By using SAM Local features, you can analyze your serverless application's performance in your own testing environment and update accordingly\. The following examples outline additional advantages of using SAM Local with sample operation code\. For instance, you can do the following: 
+
 + Generate sample function payloads \(for example, an Amazon S3 event\)\.
 
   ```
   $ sam local generate-event s3 --bucket bucket-name  --key key-name
                   > event_file.json
   ```
+
 + Test a sample function payload locally with your Lambda functions\.
 
   ```
   $ sam local invoke function-name -e event_file.json
   ```
+
 + Spawn a local API Gateway to test HTTP request and response functionality\. By using the hot reloading feature, you can test and iterate your functions without having to restart or reload them to the AWS runtime\.
 
   ```
@@ -60,7 +61,9 @@ SAM Local works with [AWS SAM](https://docs.aws.amazon.com/lambda/latest/dg/depl
   ERROR: Function ExampleFunction returned an invalid response (must include one of: body, headers
                       or statusCode in the response object)
   ```
+
 + Validate that any runtime constraints, such as maximum memory use or timeout limits of your Lambda function invocations, are honored\.
+
 + Inspect AWS Lambda runtime logs, and also any customized logging output specified in your Lambda function code \(for example, `console.log`\)\. SAM Local automatically displays this output\. The following shows an example\.
 
   ```
@@ -72,21 +75,31 @@ SAM Local works with [AWS SAM](https://docs.aws.amazon.com/lambda/latest/dg/depl
                   Duration: 12.78 ms      Billed Duration: 100 ms Memory Size: 128 MB
                   Max Memory Used: 29 MB
   ```
+
 + Honor security credentials that you've established by using the AWS CLI\. Doing so means your Lambda function can make remote calls to the AWS services that make up your serverless application\. If you have not installed the AWS CLI, see [Installing the AWS Command Line Interface](http://docs.aws.amazon.com/cli/latest/userguide/)\.
 
   As with the AWS CLI and SDKs, SAM Local looks for credentials in the following order:
+
   + Environment variables \(*AWS\_ACCESS\_KEY\_ID*, *AWS\_SECRET\_ACCESS\_KEY*\)
+
   + The AWS credentials file, located at `~/.aws/credentials` on Linux, MacOS, or Unix, or at `C:\Users\USERNAME \.aws\credentials` on Windows\)
+
   + Instance profile credentials, if running on an Amazon EC2 instance with an assigned instance role
 
 ## Supported Runtimes<a name="test-sam-cli-supported-runtimes"></a>
 
 SAM Local supports the following AWS runtimes:
+
 + node\.js 4\.3
+
 + node\.js 6\.10
+
 + python 2\.7
+
 + python 3\.6
+
 + java8
+
 + go 1\.x
 
 If you have not already installed SAM Local, see [Install SAM Local](sam-cli-requirements.md)\.
@@ -94,9 +107,11 @@ If you have not already installed SAM Local, see [Install SAM Local](sam-cli-req
 ## Getting Started Using SAM Local<a name="sam-cli-what-is"></a>
 
 SAM Local consists of the following CLI operations:
+
 + **start\-api**: Creates a local HTTP server hosting all of your Lambda functions\. When accessed by using a browser or the CLI, this operation launches a Docker container locally to invoke your function\. It reads the `CodeUri` property of the `AWS::Serverless::Function` resource to find the path in your file system containing the Lambda function code\. This path can be the project's root directory for interpreted languages like Node\.js or Python, a build directory that stores your compiled artifacts, or for Java, a `.jar` file\.
 
   If you use an interpreted language, local changes are made available within the same Docker container\. This approach means you can reinvoke your Lambda function with no need for redeployment\. For compiled languages or projects requiring complex packing support, we recommend that you run your own build solution and point AWS SAM to the directory that contains the build dependency files needed\. 
+
 + **invoke**: Invokes a local Lambda function once and terminates after invocation completes\.
 
   ```
@@ -109,6 +124,7 @@ SAM Local consists of the following CLI operations:
   # For more options
   $ sam local invoke --help
   ```
+
 + **generate\-event**: Generates mock serverless events\. Using these, you can develop and test locally on functions that respond to asynchronous events such as those from Amazon S3, Kinesis, and DynamoDB\. The following displays the command options available to the `generate-event` operation\.
 
   ```
@@ -130,12 +146,13 @@ SAM Local consists of the following CLI operations:
   OPTIONS:
      --help, -h  show help
   ```
+
 + **validate:** Validates your template against the official [AWS Serverless Application Model specification](https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md)\. The following is an example\. 
 
   ```
   $ sam validate
   ERROR: Resource "HelloWorld", property "Runtime": Invalid value node. 
-  Valid values are "nodejs4.3", "nodejs6.10", "nodejs8.10", "java8", "python2.7",
+  Valid values are "nodejs4.3", "nodejs6.10", "java8", "python2.7",
   "python3.6"(line: 11; col: 6)
   
   # Let's fix that error...
@@ -144,6 +161,7 @@ SAM Local consists of the following CLI operations:
   $ sam validate
   Valid!
   ```
+
 + **package** and **deploy**: `sam package` and `sam deploy` implicitly call AWS CloudFormation's [package](http://docs.aws.amazon.com/cli/latest/reference/cloudformation/package.html) and [deploy](http://docs.aws.amazon.com/cli/latest/reference/cloudformation/deploy.html) commands\. For more information on packaging and deployment of SAM applications, see [Packaging and Deployment](serverless-deploy-wt.md#serverless-deploy)\.
 
   The following demonstrates how to use the `package` and `deploy` commands in SAM Local\.
@@ -202,8 +220,11 @@ Resources:
 ```
 
 The preceding example configures the following RESTful API endpoints:
+
 + Create a new product with a `PUT` request to /products\.
+
 + List all products with a `GET` request to /products\.
+
 + Read, update, or delete a product with `GET`, `PUT` or `DELETE` request to /products/\{product\}\.
 
 Next, copy and paste the following code into the *products\.js* file\.
diff --git a/doc_source/tracing-lambda-code-versions.md b/doc_source/tracing-lambda-code-versions.md
deleted file mode 100644
index 50dc831..0000000
--- a/doc_source/tracing-lambda-code-versions.md
+++ /dev/null
@@ -1,36 +0,0 @@
-# Tracking Lambda Function Code Versions<a name="tracing-lambda-code-versions"></a>
-
-When you create or update a Lambda function and deploy it to an Amazon S3 bucket, Lambda will save the original Amazon S3 location and version of the code as metadata on your function\.
-
-This metadata could be used to help with code auditing, compliance programs, or for integration with build and deployment systems\.
-+ x\-amz\-meta\-lambda\-source\-arn: arn:aws:s3:::*BucketName/ObjectName*
-+ x\-amz\-meta\-lambda\-source\-version\-id: *original\-s3\-version\-id*
-
-This metadata is returned as HTTP response headers when making a `GET` request to the pre\-signed code `URI` for your function\. For example: 
-
-```
-$ aws lambda get-function --function-name myfunction
-{
- "Code": {
-        "RepositoryType": "S3",
-        "Location": "https://awslambda-region-tasks.s3.region.amazonaws.com/..."
-  }
-  ...
-
-$ curl -I -X GET "https://awslambda-region-tasks.s3.region.amazonaws.com/..."
-x-amz-meta-lambda-source-arn: arn:aws:s3:::MyCodeBucket/MyCodePackage-1.2.zip
-x-amz-version-id: original-s3-version-id
-...
-```
-
-The original Amazon S3 location and version is also logged in CloudTrail for all [CreateFunction](API_CreateFunction.md) and [UpdateFunctionCode](API_UpdateFunctionCode.md) requests\. For example: 
-
-```
-   "requestParameters": {
-        "functionName": "myfunction",
-        "code": {
-            "s3Key": " MyCodePackage-1.2.zip",
-            "s3Bucket": "MyCodeBucket ",
-            "s3Version" "original-s3-version-id"
-        }
-```
\ No newline at end of file
diff --git a/doc_source/troubleshooting.md b/doc_source/troubleshooting.md
index 1a043f7..4f5442d 100644
--- a/doc_source/troubleshooting.md
+++ b/doc_source/troubleshooting.md
@@ -2,6 +2,6 @@
 
 AWS Lambda will automatically track the behavior of your Lambda function invocations and provide feedback that you can monitor\. In addition, it provides metrics that allows you to analyze the full function invocation spectrum, including event source integration and whether downstream resources perform as expected\. The following sections provide guidance on the tools you can use analyze your Lambda function invocation behavior:
 
-**Topics**
+
 + [Using Amazon CloudWatch](monitoring-functions.md)
 + [Using AWS X\-Ray](lambda-x-ray.md)
\ No newline at end of file
diff --git a/doc_source/tutorial-env_cli.md b/doc_source/tutorial-env_cli.md
index 5e10251..3ba13c9 100644
--- a/doc_source/tutorial-env_cli.md
+++ b/doc_source/tutorial-env_cli.md
@@ -3,22 +3,31 @@
 This section will illustrate how you can modify a Lambda function's behavior through configuration changes that require no changes to the Lambda function code\. 
 
 In this tutorial, you will do the following: 
+
 + Create a deployment package with sample code that returns the value of an environment variable that specifies the name of an Amazon S3 bucket\.
+
 + Invoke a Lambda function and verify that the Amazon S3 bucket name that is returned matches the value set by the environment variable\.
+
 + Update the Lambda function by changing the Amazon S3 bucket name specified by the environment variable\.
+
 + Invoke the Lambda function again and verify that the Amazon S3 bucket name that is returned matches the updated value\.
 
 ## Step 1: Prepare<a name="with-env-prepare"></a>
 
 Make sure you have completed the following steps:
+
 + Signed up for an AWS account and created an administrator user in the account \(called **adminuser**\)\. For instructions, see [Set Up an AWS Account](setup.md) 
+
 + Installed and set up the AWS CLI\. For instructions, see [Set Up the AWS Command Line Interface \(AWS CLI\)](setup-awscli.md)
 
 ## Step 2: Set Up the Lambda Environment<a name="env-test-function"></a>
 
 In this section, you do the following:
+
 + Create the Lambda function deployment package using the sample code provided\.
+
 + Create a Lambda execution role\.
+
 + Create the Lambda function by uploading the deployment package, and then test it by invoking it manually\.
 
 ### Step 2\.1: Create the Deployment Package<a name="env-create-package"></a>
@@ -48,7 +57,9 @@ Create an IAM role \(execution role\) that you can specify at the time you creat
 1. Sign in to the AWS Management Console and open the IAM console at [https://console\.aws\.amazon\.com/iam/](https://console.aws.amazon.com/iam/)\.
 
 1. Follow the steps in [IAM Roles](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) in the *IAM User Guide* to create an IAM role \(execution role\)\. As you follow the steps to create a role, note the following: 
+
    + In **Select Role Type**, choose **AWS Service Roles**, and then choose **AWS Lambda**\.
+
    + In **Attach Policy**, choose the policy named **AWSLambdaBasicExecutionRole**\. 
 
 1. Write down the Amazon Resource Name \(ARN\) of the IAM role\. You need this value when you create your Lambda function in the next step\.
diff --git a/doc_source/tutorial-env_console.md b/doc_source/tutorial-env_console.md
index f51cec6..57a7972 100644
--- a/doc_source/tutorial-env_console.md
+++ b/doc_source/tutorial-env_console.md
@@ -2,7 +2,7 @@
 
 Along with specifying configuration settings for your Lambda function, you can also use environment variables to store sensitive information, such as a database password, using [AWS Key Management Service](http://docs.aws.amazon.com/kms/latest/developerguide/) and the Lambda console's encryption helpers\. For more information, see [Environment Variable Encryption](env_variables.md#env_encrypt)\. The following example shows you how to do this and also how to use KMS to decrypt that information\.
 
-This tutorial will demonstrate how you can use the Lambda console to encrypt an environment variable containing sensitive information\. Note that if you are updating an existing function, you can skip ahead to the instruction step outlining how to Expand the ** Environment Variables ** section of [Step 2: Configure the Lambda Function](#tutorial-env-configure-function)\.
+This tutorial will demonstrate how you can use the Lambda console to encrypt an environment variable containing sensitive information\.
 
 ## Step 1: Create the Lambda Function<a name="tutorial-env-create-function"></a>
 
@@ -13,22 +13,26 @@ This tutorial will demonstrate how you can use the Lambda console to encrypt an
 1. In **Select blueprint**, choose the **Author from scratch** button\.
 
 1. In **Basic information**, do the following:
+
    + In **Name\***, specify your Lambda function name\.
+
    + In **Role\***, choose **Choose an existing role**\.
+
    + In **Existing role\***, choose **lambda\_basic\_execution**\.
 **Note**  
 If the policy of the execution role does not have the `decrypt` permission, you will need add it\.
+
    + Choose **Create function**\.
 
 ## Step 2: Configure the Lambda Function<a name="tutorial-env-configure-function"></a>
 
-1. Under **Configuration**, specify the **Runtime** of your choice\.
+1. Under **Configuration**, in **Runtime**, specify **nodejs6\.10** or **nodejs4\.3**\.
 
 1. Under the **Lambda function code** section you can take advantage of the **Edit code inline** option to replace the Lambda function handler code with your custom code\. 
 
-1. Note the **Triggers** tab\. Under the **Triggers** page, you can optionally choose a service that automatically triggers your Lambda function by choosing the **Add trigger** button and then choosing the gray box with ellipses \(\.\.\.\) to display a list of available services\. For this example, do not configure a trigger and choose **Configuration**\.
+1. Choose the **Triggers** tab\. Under the **Triggers** page, you can optionally choose a service that automatically triggers your Lambda function by choosing the **Add trigger** button and then choosing the gray box with ellipses \(\.\.\.\) to display a list of available services\. For this example, do not configure a trigger and choose **Configuration**\.
 
-1. Note the **Monitoring** tab\. This page will provide immediate CloudWatch metrics for your Lambda function invocations, as well as links to other helpful guides, including [Using AWS X\-Ray](lambda-x-ray.md)\. 
+1. Choose the **Monitoring** tab\. This page will provide immediate CloudWatch metrics for your Lambda function invocations, as well as links to other helpful guides, including [Using AWS X\-Ray](lambda-x-ray.md)\. 
 
 1. Expand the **Environment variables** section\.
 
diff --git a/doc_source/tutorial-scheduled-events-create-alarm.md b/doc_source/tutorial-scheduled-events-create-alarm.md
index 283fbef..576e619 100644
--- a/doc_source/tutorial-scheduled-events-create-alarm.md
+++ b/doc_source/tutorial-scheduled-events-create-alarm.md
@@ -1,7 +1,9 @@
 # Step 4: Configure a CloudWatch Alarm<a name="tutorial-scheduled-events-create-alarm"></a>
 
 To configure a CloudWatch alarm, follow the instructions at [Create Alarm](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/ConsoleAlarms.html)  in the  *Amazon CloudWatch User Guide*\. As you follow the steps, note the following:
+
 + In **Create Alarm** \(**1\. Select Metric** step\), choose **Lambda Metrics**, and then choose the **Errors** \(**Metric Name** is **Errors**\) for the Lambda function you created\. Also, on the statistics drop\-down, change the settings from **Average** to **Sum** statistics\.
+
 + In **Create Alarm** \(**2\. Define Metric** step\), set the alarm threshold to **Whenever: Errors is >= 1** and select your Amazon SNS topic from the **Send notification to:** list\.
 
 ## Next Step<a name="wt-scheduledevents4-next-step"></a>
diff --git a/doc_source/tutorial-scheduled-events-create-function.md b/doc_source/tutorial-scheduled-events-create-function.md
index 1c639ff..78fc45e 100644
--- a/doc_source/tutorial-scheduled-events-create-function.md
+++ b/doc_source/tutorial-scheduled-events-create-function.md
@@ -12,9 +12,12 @@
 
 1. In **Existing role\***, choose **lambda\_basic\_execution**\.
 
-1. In **CloudWatch Events**, choose the **Rule** list and then choose **Create a new rule**\.
+1. In **cloudWatch Events**, choose the **Rule** list and then choose **Create a new rule**\.
+
    + In **Rule name**, type a name \(for example, **CheckWebsiteScheduledEvent**\)\.
+
    + In **Rule description**, type a description \(for example, **CheckWebsiteScheduledEvent trigger**\)\.
+
    + Choose **Schedule expression** and then specify **rate\(1 minute\)**\. Note that you can specify the value as a `rate` or in the `cron` expression format\. All schedules use the UTC time zone, and the minimum precision for schedules is one minute\.
 **Note**  
 When setting a rate expression, the first execution is immediate and subsequent executions occur based on the rate schedule\. In the preceding example, the subsequent execution rate would be every minute\.
@@ -22,11 +25,15 @@ When setting a rate expression, the first execution is immediate and subsequent
      For more information on expressions schedules, see [Schedule Expressions Using Rate or Cron](tutorial-scheduled-events-schedule-expressions.md)\.
 
       
+
    + In **Enable trigger**, we recommend that you leave the trigger in a disabled state until you have tested it\. 
+
    + Note the **Lambda function code** section\. This is sample code that you can configure after you create the function\. In addition, the console will also allow you to select runtimes that Lambda supports and add your custom code\.
 **Important**  
 As mentioned previously, the code provided in the blueprint can be edited once you've created the function\. But also note that it uses `SITE` and `EXPECTED` variables as placeholders for environment variables that you can set, as explained below\.
+
    + The **Environment variables** section is where you configure settings that you apply to your Lambda function without having to update the function code\. In this case, you can supply a URL value for the **site** key and an expected value to be returned from that site in the **expected** key\. While we strongly recommend populating these values, should you choose not to use environment variables for this function, you will need to clear the **<enter value here>** fields for both **site** and **expected** fields prior to creating your function\. You will also need to update the sample function code to replace the `SITE` and `EXPECTED` variables with literal values of your choice\.
+
    + Choose **Create function**\. 
 **Note**  
 Once you have created your Lambda function, you can also add to or update the environment variables section to suit your function's requirements\. For more information, see [Environment Variables](env_variables.md)\.
diff --git a/doc_source/tutorial-scheduled-events-schedule-expressions.md b/doc_source/tutorial-scheduled-events-schedule-expressions.md
index 0beff50..31a6393 100644
--- a/doc_source/tutorial-scheduled-events-schedule-expressions.md
+++ b/doc_source/tutorial-scheduled-events-schedule-expressions.md
@@ -24,7 +24,9 @@ For example:
 |  Invoke Lambda function every seven days  |  <pre>rate(7 days)</pre>  | 
 
 Note the following: 
+
 + Rate frequencies of less than one minute are not supported\.
+
 + For a singular value the unit must be singular \(for example, `rate(1 day)`\), otherwise plural \(for example, `rate(5 days)`\)\.
 
  
@@ -82,5 +84,7 @@ The following table lists common examples of cron expressions\.
 |  Invoke a Lambda function at 9 a\.m\. \(UTC\) the first Monday of each month  |  <pre>cron(0 9 ? * 2#1 *)</pre>  | 
 
 Note the following: 
+
 + Cron expressions that lead to rates faster than one minute are not supported\.
+
 + One of the day\-of\-month or day\-of\-week values must be a question mark \(`?`\)\.
\ No newline at end of file
diff --git a/doc_source/use-cases.md b/doc_source/use-cases.md
index 5a54fa4..3361fa3 100644
--- a/doc_source/use-cases.md
+++ b/doc_source/use-cases.md
@@ -1,6 +1,7 @@
 # Examples of How to Use AWS Lambda<a name="use-cases"></a>
 
 The use cases for AWS Lambda can be grouped into the following categories:
+
 + **Using AWS Lambda with AWS services as event sources** – *Event sources* publish events that cause the Lambda function to be invoked\. These can be AWS services such as Amazon S3\. For more information and tutorials, see the following topics:
 
    [Using AWS Lambda with Amazon S3](with-s3.md) 
@@ -12,8 +13,11 @@ The use cases for AWS Lambda can be grouped into the following categories:
    [Using AWS Lambda with AWS CloudTrail](with-cloudtrail.md) 
 
    [Using AWS Lambda with Amazon SNS from Different Accounts](with-sns.md) 
+
 + **On\-demand Lambda function invocation over HTTPS \(Amazon API Gateway\)** – In addition to invoking Lambda functions using event sources, you can also invoke your Lambda function over HTTPS\. You can do this by defining a custom REST API and endpoint using API Gateway\. For more information and a tutorial, see [Using AWS Lambda with Amazon API Gateway \(On\-Demand Over HTTPS\)](with-on-demand-https.md)\.
+
 + **On\-demand Lambda function invocation \(build your own event sources using custom apps\)** – User applications such as client, mobile, or web applications can publish events and invoke Lambda functions using the AWS SDKs or AWS Mobile SDKs, such as the AWS Mobile SDK for Android\. For more information and a tutorial, see [Getting Started](getting-started.md) and [Using AWS Lambda as Mobile Application Backend \(Custom Event Source: Android\)](with-on-demand-custom-android.md)
+
 + **Scheduled events** – You can also set up AWS Lambda to invoke your code on a regular, scheduled basis using the AWS Lambda console\. You can specify a fixed rate \(number of hours, days, or weeks\) or you can specify a cron expression\. For more information and a tutorial, see [Using AWS Lambda with Scheduled Events](with-scheduled-events.md)\.
 
-In addition, you also can use a Lambda State Machine\. For more information, see [Using a State Machine](http://docs.aws.amazon.com/step-functions/latest/dg/tutorial-creating-lambda-state-machine.html)\.
\ No newline at end of file
+In addition, you also a Lambda State Machine\. For more information, see [Using a State Machine](http://docs.aws.amazon.com/step-functions/latest/dg/tutorial-creating-lambda-state-machine.html)\.
\ No newline at end of file
diff --git a/doc_source/use-kinesis-blueprints.md b/doc_source/use-kinesis-blueprints.md
deleted file mode 100644
index 873ef59..0000000
--- a/doc_source/use-kinesis-blueprints.md
+++ /dev/null
@@ -1,22 +0,0 @@
-# More samples<a name="use-kinesis-blueprints"></a>
-
-The Lambda console provides blueprints, which are samples you can use to learn how to integrate your Lambda functions with other AWS services\. The samples below provide some specific use cases for using a Lambda function to work with the distinctive offerings of Kinesis\.
-
-**Note**  
-Lambda blueprints are only available in the Node\.js and Python languages\. You can implement functions in other supported runtimes\. For information on AWS Lambda supported runtimes, see [Lambda Execution Environment and Available Libraries](current-supported-versions.md)\.
-
-## Amazon Kinesis Firehose<a name="aws-lambda-kinesis-firehose-blueprints"></a>
-
-
-| Blueprint name | Use Case | Sample Runtime Code | Related AWS Services | 
-| --- | --- | --- | --- | 
-| [Kinesis Firehose Syslog to JSON](https://console.aws.amazon.com/lambda/home?region=us-east-1#/create/new?bp=kinesis-firehose-syslog-to-json) |  Converts input records from SYSlog format to JSON\.  |  Node\.js  |  [Kinesis Firehose](http://docs.aws.amazon.com/firehose/latest/dev/)  | 
-| [Kinesis Firehose Aachelog To JSON to Python](https://console.aws.amazon.com/lambda/home?region=us-east-1#/create/new?bp=kinesis-firehose-apachelog-to-json-python) |  Converts input records from Apache Commong log format to JSON\.  |  Node\.js  |  [Kinesis Firehose](http://docs.aws.amazon.com/firehose/latest/dev/)  | 
-
-## Amazon Kinesis Analytics<a name="aws-lambda-kinesis-analytics-blueprints"></a>
-
-
-| Blueprint name | Use Case | Sample Runtime Code | Related AWS Services | 
-| --- | --- | --- | --- | 
-| [Process Compressed Record](https://console.aws.amazon.com/lambda/home?region=us-east-1#/create/new?bp=kinesis-firehose-syslog-to-json) |  Receives compressed \(GZIP or Deflate compressed\) JSON or CSV records as input and returns decompressed records with a processing status\.  |  node\.js 6\.10  |  Kinesis Analytics  | 
-| [Kinesis Analytics Output](https://console.aws.amazon.com/lambda/home?region=us-east-1#/create/new?bp=kinesis-analytics-output) |  Delivers output records from a Kinesis Analytics application to a custom destination\.  |  node\.js 6\.10  |  Kinesis Analytics  | 
\ No newline at end of file
diff --git a/doc_source/using-x-ray.md b/doc_source/using-x-ray.md
index caa734e..e54bef7 100644
--- a/doc_source/using-x-ray.md
+++ b/doc_source/using-x-ray.md
@@ -10,8 +10,11 @@ Only services that currently integrate with X\-Ray show as standalone traces, ou
 ## Lambda on the AWS X\-Ray Service Map<a name="lambda-service-map"></a>
 
 X\-Ray displays three types of nodes on the service map for requests served by Lambda:
+
 + **Lambda service \(AWS::Lambda\)** – This type of node represents the time the request spent in the Lambda service\. Timing starts when Lambda first receives the request and ends when the request leaves the Lambda service\.
+
 + **Lambda function \(AWS::Lambda::Function\) – **This type of node represents the Lambda function's execution time\.
+
 + **Downstream service calls** – In this type, each downstream service call from within the Lambda function is represented by a separate node\. 
 
 In the diagram following, the nodes represent \(from left to right\): The Lambda service, the user function, and a downstream call to Amazon S3:
@@ -23,16 +26,25 @@ For more information, see [Viewing the Service Map](http://docs.aws.amazon.com/x
 ## Lambda as an AWS X\-Ray Trace<a name="lambda-request"></a>
 
 From the service map, you can zoom in to see a trace view of your Lambda function\. The trace will display in\-depth information regarding your function invocations, represented as segments and subsegments:
+
 + ** Lambda service segment** – This segment represents different information depending on the event source used to invoke the function:
+
   + **Synchronous and stream event sources** – The service segment measures the time from when the Lambda service receives the request/event and ends when the request leaves the Lambda service \(after the final invocation for the request is completed\)\.
+
   + **Asynchronous** \- The service segment represents the response time, that is, the time it took the Lambda service to return a 202 response to the client\.
 
   The Lambda service segment can include two types of subsegments:
+
   + **Dwell time \(asynchronous invocations only\)** – Represents the time the function spends in the Lambda service before being invoked\. This subsegment starts when the Lambda service receives the request/event and ends when the Lambda function is invoked for the first time\.
+
   + **Attempt** – Represents a single invocation attempt, including any overhead introduced by the Lambda service\. Examples of overhead are time spent initializing the function's code and function execution time\.
+
 + **Lambda function segment** \- Represents execution time for the function for a given invocation attempt\. It starts when the function handler starts executing and ends when the function terminates\. This segment can include three types of subsegments:
+
   + **Initialization** \- The time spent running the `initialization` code of the function, defined as the code outside the Lambda function handler or static initializers\.
+
   + **Downstream calls** \- Calls made to other AWS services from the Lambda function's code\.
+
   + **Custom subsegments** \- Custom subsegments or user annotations that you can add to the Lambda function segment by using the X\-Ray SDK\. 
 
 **Note**  
diff --git a/doc_source/versioning-aliases-permissions.md b/doc_source/versioning-aliases-permissions.md
index bea3aba..525f294 100644
--- a/doc_source/versioning-aliases-permissions.md
+++ b/doc_source/versioning-aliases-permissions.md
@@ -5,6 +5,7 @@ With versioning and aliases you can access a Lambda function using various ARNs\
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/alias_scenario_2_20.png)
 
 You can invoke for example the `helloworld` function version 1 using any of the following two ARNs:
+
 + Using the qualified function ARN as shown following\.
 
   ```
@@ -12,18 +13,23 @@ You can invoke for example the `helloworld` function version 1 using any of the
   ```
 **Note**  
 An unqualified function ARN \(a function ARN without a version or alias suffix\) maps to the `$LATEST` version\.
+
 + Using the BETA alias ARN as shown following\.
 
   ```
   arn:aws:lambda:aws-region:acct-id:function:helloworld:BETA
   ```
 
-In a *push* model, event sources \(such as Amazon S3 and custom applications\) can invoke any of the Lambda function versions as long you grant the necessary permissions to these event sources by using an access policy associated with the Lambda function\. For more information about the push model, see [Event Source Mapping](invocation-options.md#intro-invocation-modes)\. 
+In a *push* model, event sources \(such as Amazon S3 and custom applications\) can invoke any of the Lambda function versions as long you grant the necessary permissions to these event sources by using an access policy associated with the Lambda function\. For more information about the push model, see [Event Source Mapping](java-invocation-options.md#intro-invocation-modes)\. 
 
 Assuming that you grant permission, the next question is, "can an event source invoke a function version using any of the associated ARNs?" The answer is, it depends on how you identified function in your add permissions request \(see [AddPermission](API_AddPermission.md)\)\. The key to understanding this is that the permission you grant apply only to the ARN used in the add permission request:
+
 + If you use a qualified function name \(such as `helloworld:1`\), the permission is valid for invoking the `helloworld` function version 1 *only* using its qualified ARN \(using any other ARNs results in a permission error\)\. 
+
 + If you use an alias name \(such as `helloworld:BETA`\), the permission is valid only for invoking the `helloworld` function using the BETA alias ARN \(using any other ARNs results in a permission error, including the function version ARN to which the alias points\)\.
+
 + If you use an unqualified function name \(such as `helloworld`\), the permission is valid only for invoking the `helloworld` function using the unqualified function ARN \(using any other ARNs will result in a permission error\)\. 
 **Note**  
 Note that even though the access policy is only on the unqualified ARN, the code and configuration of the invoked Lambda function is still from function version `$LATEST`\. The unqualified function ARN maps to the `$LATEST` version but the permissions you add are ARN\-specific\.
+
 + If you use a qualified function name using the `$LATEST` version \(`helloworld:$LATEST`\), the permission is valid for invoking the `helloworld` function version `$LATEST` *only* using its qualified ARN \(using unqualified ARN results in a permission error\)\. 
\ No newline at end of file
diff --git a/doc_source/versioning-aliases-walkthrough1.md b/doc_source/versioning-aliases-walkthrough1.md
index 967a3a4..03cff08 100644
--- a/doc_source/versioning-aliases-walkthrough1.md
+++ b/doc_source/versioning-aliases-walkthrough1.md
@@ -29,7 +29,9 @@ This example uses the us\-west\-2 \(US West Oregon\) region to create the Lambda
    1. Sign in to the AWS Management Console and open the IAM console at [https://console\.aws\.amazon\.com/iam/](https://console.aws.amazon.com/iam/)\.
 
    1. Follow the steps in [IAM Roles](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) in the *IAM User Guide* to create an IAM role \(execution role\)\. As you follow the steps to create a role, note the following: 
+
       + For **Select Role Type**, choose **AWS Service Roles**, and then choose **AWS Lambda**\.
+
       + For **Attach Policy**, choose the policy named **AWSLambdaBasicExecutionRole**\. 
 
    1. Write down the Amazon Resource Name \(ARN\) of the IAM role\. You need this value when you create your Lambda function in the next step\.
@@ -161,8 +163,10 @@ The response returns the configuration information showing `$LATEST` as the func
 
 For information about using the AWS Lambda console to manage versioning, see [Managing Versioning Using the AWS Management Console, the AWS CLI, or Lambda API Operations](how-to-manage-versioning.md)\.
 
-## Granting Permissions in a Push Model<a name="versioning-permissions-cli"></a>[Event Source Mapping](invocation-options.md#intro-invocation-modes)
+## Granting Permissions in a Push Model<a name="versioning-permissions-cli"></a>[Event Source Mapping](java-invocation-options.md#intro-invocation-modes)
+
 + We recommend that you specify an existing Lambda function alias in the mapping configuration \(see [Introduction to AWS Lambda Aliases](aliases-intro.md)\)\. For example, if the event source is Amazon S3, you specify the alias ARN in the bucket notification configuration so that Amazon S3 can invoke the alias when it detects specific events\.
+
 + In the push model, you grant event sources permissions using a resource policy that you attach to your Lambda function\. In versioning, the permissions you add are specific to the qualifier that you specify in the `AddPermission` request \(see [Versioning, Aliases, and Resource Policies](versioning-aliases-permissions.md)\)\. 
 
   For example, the following AWS CLI command grants Amazon S3 permissions to invoke the PROD alias of the `helloworld` Lambda function \(note that the `--qualifier` parameter specifies the alias name\)\. 
diff --git a/doc_source/versioning-aliases.md b/doc_source/versioning-aliases.md
index 5e9a5a3..c06ba01 100644
--- a/doc_source/versioning-aliases.md
+++ b/doc_source/versioning-aliases.md
@@ -20,9 +20,3 @@ We recommend that you use versioning and aliases to deploy your Lambda functions
 
 For detailed information, see the following topics\.
 
-**Topics**
-+ [Versioning](versioning-intro.md)
-+ [Aliases](aliases-intro.md)
-+ [Versioning, Aliases, and Resource Policies](versioning-aliases-permissions.md)
-+ [Managing Versioning](how-to-manage-versioning.md)
-+ [Traffic Shifting Using Aliases](lambda-traffic-shifting-using-aliases.md)
\ No newline at end of file
diff --git a/doc_source/versioning-intro.md b/doc_source/versioning-intro.md
index 9f8ecde..b0b2bc9 100644
--- a/doc_source/versioning-intro.md
+++ b/doc_source/versioning-intro.md
@@ -9,11 +9,13 @@ When you create a Lambda function, there is only one version—the `$LATEST` ver
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/lambda-versioning-v2-latest1.png)
 
 You can refer to this function using its Amazon Resource Name \(ARN\)\. There are two ARNs associated with this initial version:
+
 + **Qualified ARN** – The function ARN with the version suffix\.
 
   ```
   arn:aws:lambda:aws-region:acct-id:function:helloworld:$LATEST
   ```
+
 + **Unqualified ARN** – The function ARN without the version suffix\. 
 
   You can use this unqualified ARN in all relevant operations\. However, you cannot use it to create an alias\. For more information, see [Introduction to AWS Lambda Aliases](aliases-intro.md)\. 
@@ -50,16 +52,20 @@ For more information, see [CreateFunction](API_CreateFunction.md)\.
 
 In this response, AWS Lambda returns the unqualified ARN of the newly created function and also its version, `$LATEST`\. The response also shows that the `Version` is `$LATEST`\. The `CodeSha256` is the checksum of the deployment package that you uploaded\.
 
-## Publishing an AWS Lambda Function Version<a name="versioning-intro-publish-version"></a>
+## Publishing a AWS Lambda Function Version<a name="versioning-intro-publish-version"></a>
 
 When you publish a version, AWS Lambda makes a snapshot copy of the Lambda function code \(and configuration\) in the `$LATEST` version\. A published version is immutable\. That is, you can't change the code or configuration information\. The new version has a unique ARN that includes a version number suffix as shown following\.
 
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/lambda-versioning-v2-latest+v1_1.png)
 
 You can publish a version by using any of the following methods:
+
 + **Publish a version explicitly** – You can use the `PublishVersion` API operation to explicitly publish a version\. For more information, see [PublishVersion](API_PublishVersion.md)\. This operation creates a new version using the code and configuration in the `$LATEST` version\.
+
 + **Publish a version at the time you create or update a Lambda function** – You can also use the `CreateFunction` or `UpdateFunctionCode` requests to publish a version by adding the optional `publish` parameter in the request:
+
   + Specify the `publish` parameter in your `CreateFunction` request to create a new Lambda function \(the `$LATEST` version\)\. You can then immediately publish the new function by creating a snapshot and assigning it to be version 1\. For more information about `CreateFunction`, see [CreateFunction](API_CreateFunction.md)\.
+
   + Specify the `publish` parameter in your `UpdateFunctionCode` request to update the code in the `$LATEST` version\. You can then publish a version from the `$LATEST`\. For more information about `UpdateFunctionCode`, see [UpdateFunctionCode](API_UpdateFunctionCode.md)\.
 
   If you specify the `publish` parameter at the time you create a Lambda function, the function configuration information that AWS Lambda returns in response shows the version number of the newly published version\. In the following example, the version is 1\.
@@ -113,7 +119,9 @@ AWS Lambda maintains your latest function code in the `$LATEST` version\. When
 Published versions are immutable\. You can't update code or configuration information associated with a published version\.
 
 You have the following options of publishing a new version as you update your Lambda function code:
+
 + **Publish a version in the same update code request** – Use the `UpdateFunctionCode` API operation \(recommended\)\.
+
 + **First update the code, and then explicitly publish a version** – Use the `PublishVersion` API operation\.
 
 You can update code and configuration information \(such as description, memory size, and execution timeout\) for the `$LATEST` version of the Lambda function\. However, published versions are immutable\. That is, you can't change code or configuration information\.
@@ -121,7 +129,9 @@ You can update code and configuration information \(such as description, memory
 ## Deleting a Lambda Function and a Specific Version<a name="versioning-intro-deleting-function-versions"></a>
 
 With versioning, you have the following choices:
+
 + **Delete a specific version** – You can delete a Lambda function version by specifying the version you want to delete in your `DeleteFunction` request\. If there are aliases that depend on this version, the request fails\. AWS Lambda deletes the version only if there are no aliases dependent on this version\. For more information about aliases, see [Introduction to AWS Lambda Aliases](aliases-intro.md)\.
+
 + **Delete the entire Lambda function \(all of its versions and aliases\)** – To delete the Lambda function and all of its versions, don't specify any version in your `DeleteFunction` request\. Doing this deletes the entire function including all of its versions and aliases\.
 
 **Important**  
diff --git a/doc_source/vpc-ec-create-iam-role.md b/doc_source/vpc-ec-create-iam-role.md
index 2100504..a433cb9 100644
--- a/doc_source/vpc-ec-create-iam-role.md
+++ b/doc_source/vpc-ec-create-iam-role.md
@@ -1,7 +1,9 @@
 # Step 2\.2: Create the Execution Role \(IAM Role\)<a name="vpc-ec-create-iam-role"></a>
 
 In this step, you create an AWS Identity and Access Management \(IAM\) role using the following predefined role type and access permissions policy:
+
 + **AWS Lambda** \(AWS service role\) – This role grants AWS Lambda permissions to assume the role\. 
+
 + **AWSLambdaVPCAccessExecutionRole** \(access permissions policy\) – This is the policy that you attach to the role\. The policy grants permissions for the EC2 actions that AWS Lambda needs to manage ENIs\. You can view this AWS managed policy in IAM console\.
 
  For more information about IAM roles, see [IAM Roles](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) in the *IAM User Guide*\. Use the following procedure to create the IAM role\.
@@ -11,8 +13,11 @@ In this step, you create an AWS Identity and Access Management \(IAM\) role usin
 1. Sign in to the AWS Management Console and open the IAM console at [https://console\.aws\.amazon\.com/iam/](https://console.aws.amazon.com/iam/)\.
 
 1. Follow the steps in [Creating a Role to Delegate Permissions to an AWS Service](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-service.html) in the *IAM User Guide* to create an IAM role \(execution role\)\. As you follow the steps to create a role, note the following:
+
    + In **Role Name**, use a name that is unique within your AWS account \(for example, **lambda\-vpc\-execution\-role**\)\. 
+
    + In **Select Role Type**, choose **AWS Service Roles**, and then choose **AWS Lambda**\. This grants the AWS Lambda service permissions to assume the role\.
+
    + In **Attach Policy**, choose **AWSLambdaVPCAccessExecutionRole**\. The permissions in this policy are sufficient for the Lambda function in this tutorial\.
 
 1. Write down the role ARN\. You will need it in the next step when you create your Lambda function\.
diff --git a/doc_source/vpc-ec-create-lambda-function.md b/doc_source/vpc-ec-create-lambda-function.md
index 64374ba..719b038 100644
--- a/doc_source/vpc-ec-create-lambda-function.md
+++ b/doc_source/vpc-ec-create-lambda-function.md
@@ -1,13 +1,16 @@
 # Step 2: Create a Lambda Function<a name="vpc-ec-create-lambda-function"></a>
 
 In this step, you do the following:
+
 + Create a Lambda function deployment package using the sample code provided\. 
+
 + Create an IAM role \(execution role\)\. At the time you upload the deployment package, you need to specify this role so that Lambda can assume the role and then execute the function on your behalf\. 
 
   The permissions policy grants AWS Lambda permissions to set up elastic network interfaces \(ENIs\) to enable your Lambda function to access resources in the VPC\. In this example, your Lambda function accesses an ElastiCache cluster in the VPC\.
+
 + Create the Lambda function by uploading the deployment package\. 
 
-**Topics**
+
 + [Step 2\.1: Create a Deployment Package](vpc-ec-deployment-pkg.md)
 + [Step 2\.2: Create the Execution Role \(IAM Role\)](vpc-ec-create-iam-role.md)
 + [Step 2\.3: Create the Lambda Function \(Upload the Deployment Package\)](vpc-ec-upload-deployment-pkg.md)
\ No newline at end of file
diff --git a/doc_source/vpc-ec-deployment-pkg.md b/doc_source/vpc-ec-deployment-pkg.md
index b540a63..a0136ec 100644
--- a/doc_source/vpc-ec-deployment-pkg.md
+++ b/doc_source/vpc-ec-deployment-pkg.md
@@ -50,7 +50,9 @@ The `from __future__` statement enables you to write code that is compatible wit
 1. Save the file as `app.py`\. 
 
 1. Install the following library dependencies using **pip**:
+
    + `pymemcache` – The Lambda function code uses this library to create a `HashClient` object to set and get items from memcache \(see [pymemcache](https://pypi.python.org/pypi/pymemcache)\)\. 
+
    + `elasticache-auto-discovery` – The Lambda function uses this library to get the nodes in your Amazon ElastiCache cluster \(see [elasticache\-auto\-discovery](https://pypi.python.org/pypi/elasticache-auto-discovery)\)\.
 
 1. Zip all of these files into a file named `app.zip` to create your deployment package\. For step\-by\-step instructions, see [Creating a Deployment Package \(Python\)](lambda-python-how-to-create-deployment-package.md)\. 
diff --git a/doc_source/vpc-ec-invoke-lambda-function.md b/doc_source/vpc-ec-invoke-lambda-function.md
index 905c968..bd0a156 100644
--- a/doc_source/vpc-ec-invoke-lambda-function.md
+++ b/doc_source/vpc-ec-invoke-lambda-function.md
@@ -13,8 +13,11 @@ In this step, you invoke the Lambda function manually using the `invoke` command
    ```
 
 1. Verify that the Lambda function executed successfully as follows:
+
    + Review the output\.txt file\.
+
    + Review the results in the AWS Lambda console\.
+
    + Verify the results in CloudWatch Logs\.
 
 **What Next?**  
diff --git a/doc_source/vpc-ec.md b/doc_source/vpc-ec.md
index dcc1d3d..ed1506e 100644
--- a/doc_source/vpc-ec.md
+++ b/doc_source/vpc-ec.md
@@ -1,8 +1,11 @@
 # Tutorial: Configuring a Lambda Function to Access Amazon ElastiCache in an Amazon VPC<a name="vpc-ec"></a>
 
 In this tutorial, you do the following:
+
 + Create an Amazon ElastiCache cluster in your default Amazon Virtual Private Cloud \(Amazon VPC\) in the us\-east\-1 region\. For more information about Amazon ElastiCache, see [Amazon ElastiCache](https://aws.amazon.com/elasticache/)\.
+
 + Create a Lambda function to access the ElastiCache cluster\. When you create the Lambda function, you provide subnet IDs in your Amazon VPC and a VPC security group to allow the Lambda function to access resources in your VPC\. For illustration in this tutorial, the Lambda function generates a UUID, writes it to the cache, and retrieves it from the cache\.
+
 + Invoke the Lambda function manually and verify that it accessed the ElastiCache cluster in your VPC\.
 
 **Important**  
diff --git a/doc_source/vpc-rds-create-iam-role.md b/doc_source/vpc-rds-create-iam-role.md
index 2c8be73..af14c0b 100644
--- a/doc_source/vpc-rds-create-iam-role.md
+++ b/doc_source/vpc-rds-create-iam-role.md
@@ -1,7 +1,9 @@
 # Step 2\.2: Create the Execution Role \(IAM Role\)<a name="vpc-rds-create-iam-role"></a>
 
 In this step, you create an execution role \(IAM role\) for your Lambda function using the following predefined role type and access permissions policy:
+
 + **AWS Lambda** \(AWS service role\) – This role grants AWS Lambda permissions to assume the role\.
+
 + **AWSLambdaVPCAccessExecutionRole** \(access permissions policy\) – This role grants AWS Lambda permissions for EC2 actions to create ENIs and your Lambda function can access VPC resources and CloudWatch Logs actions to write logs\.
 
  For more information about IAM roles, see [IAM Roles](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) in the *IAM User Guide*\. Use the following procedure to create the IAM role\.
@@ -11,8 +13,11 @@ In this step, you create an execution role \(IAM role\) for your Lambda function
 1. Sign in to the AWS Management Console and open the IAM console at [https://console\.aws\.amazon\.com/iam/](https://console.aws.amazon.com/iam/)\.
 
 1. Follow the steps in [Creating a Role to Delegate Permissions to an AWS Service](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-service.html) in the *IAM User Guide* to create an IAM role \(execution role\)\. As you follow the steps to create a role, note the following:
+
    + In **Role Name**, use a name that is unique within your AWS account \(for example, **lambda\-vpc\-execution\-role**\)\. 
+
    + In **Select Role Type**, choose **AWS Service Roles**, and then choose **AWS Lambda**\. This grants the AWS Lambda service permissions to assume the role\.
+
    + In **Attach Policy**, choose **AWSLambdaVPCAccessExecutionRole**\. The permissions in this policy are sufficient for the Lambda function in this tutorial\.
 
 1. Write down the role ARN\. You will need it in the next step when you create your Lambda function\.
diff --git a/doc_source/vpc-rds-create-lambda-function.md b/doc_source/vpc-rds-create-lambda-function.md
index e98d083..4e1710c 100644
--- a/doc_source/vpc-rds-create-lambda-function.md
+++ b/doc_source/vpc-rds-create-lambda-function.md
@@ -1,13 +1,16 @@
 # Step 2: Create a Lambda Function<a name="vpc-rds-create-lambda-function"></a>
 
 In this step, you do the following:
+
 + Create a Lambda function deployment package using the sample code provided\. 
+
 + Create an IAM role \(execution role\) that you specify at the time of creating your Lambda function\. This is the role AWS Lambda assumes when executing the Lambda function\. 
 
   The permissions policy associated with this role grants AWS Lambda permissions to set up elastic network interfaces \(ENIs\) to enable your Lambda function to access resources in the VPC\.
+
 + Create the Lambda function by uploading the deployment package\. 
 
-**Topics**
+
 + [Step 2\.1: Create a Deployment Package](vpc-rds-deployment-pkg.md)
 + [Step 2\.2: Create the Execution Role \(IAM Role\)](vpc-rds-create-iam-role.md)
 + [Step 2\.3: Create the Lambda Function \(Upload the Deployment Package\)](vpc-rds-upload-deployment-pkg.md)
\ No newline at end of file
diff --git a/doc_source/vpc-rds-create-rds-mysql.md b/doc_source/vpc-rds-create-rds-mysql.md
index 54f5b1b..218c531 100644
--- a/doc_source/vpc-rds-create-rds-mysql.md
+++ b/doc_source/vpc-rds-create-rds-mysql.md
@@ -14,7 +14,9 @@ First, you launch an RDS MySQL instance in your default VPC with ExampleDB datab
 This tutorial uses the RDS MySQL DB engine launched in the default VPC in the us\-east\-1 region\.
 
 You can launch an RDS MySQL instance using one of the following methods:
+
 + Follow the instructions at [Creating a MySQL DB Instance and Connecting to a Database on a MySQL DB Instance](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_GettingStarted.CreatingConnecting.MySQL.html) in the *Amazon Relational Database Service User Guide*\.
+
 + Use the following AWS CLI command:
 
   ```
diff --git a/doc_source/vpc-rds-deployment-pkg.md b/doc_source/vpc-rds-deployment-pkg.md
index 4456eef..afefee7 100644
--- a/doc_source/vpc-rds-deployment-pkg.md
+++ b/doc_source/vpc-rds-deployment-pkg.md
@@ -59,6 +59,7 @@ We recommend that `pymysql.connect()` is executed outside the handler, as shown,
 1. Save the file as `app.py`\. 
 
 1. Install the following library dependencies using **pip**:
+
    + `pymysql` – The Lambda function code uses this library to access your MySQL instance \(see [PyMySQL](https://pypi.python.org/pypi/PyMySQL)\) \.
 
 1. Create a config file that contains the following information and save it as `rds_config.py`:
diff --git a/doc_source/vpc-rds-invoke-lambda-function.md b/doc_source/vpc-rds-invoke-lambda-function.md
index 02938be..2cdc34a 100644
--- a/doc_source/vpc-rds-invoke-lambda-function.md
+++ b/doc_source/vpc-rds-invoke-lambda-function.md
@@ -13,6 +13,9 @@ In this step, you invoke the Lambda function manually using the `invoke` command
    ```
 
 1. Verify that the Lambda function executed successfully as follows:
+
    + Review the output\.txt file\.
+
    + Review the results in the AWS Lambda console\.
+
    + Verify the results in CloudWatch Logs\.
\ No newline at end of file
diff --git a/doc_source/vpc-rds.md b/doc_source/vpc-rds.md
index 451e05d..534cebc 100644
--- a/doc_source/vpc-rds.md
+++ b/doc_source/vpc-rds.md
@@ -1,8 +1,11 @@
 # Tutorial: Configuring a Lambda Function to Access Amazon RDS in an Amazon VPC<a name="vpc-rds"></a>
 
 In this tutorial, you do the following:
+
 + Launch an Amazon RDS MySQL database engine instance in your default Amazon VPC\. In the MySQL instance, you create a database \(ExampleDB\) with a sample table \(Employee\) in it\. For more information about Amazon RDS, see [Amazon RDS](https://aws.amazon.com/rds)\.
+
 + Create a Lambda function to access the ExampleDB database, create a table \(Employee\), add a few records, and retrieve the records from the table\.
+
 + Invoke the Lambda function manually and verify the query results\. This is how you verify that your Lambda function was able to access the RDS MySQL instance in the VPC\.
 
 **Important**  
diff --git a/doc_source/vpc-tutorials.md b/doc_source/vpc-tutorials.md
index 9533267..a077dde 100644
--- a/doc_source/vpc-tutorials.md
+++ b/doc_source/vpc-tutorials.md
@@ -2,6 +2,6 @@
 
 This section provides end\-to\-end example tutorials where you create and configure a Lambda function to access resources in an Amazon VPC, such as an Amazon ElastiCache cluster or an Amazon RDS database instance\.
 
-**Topics**
+
 + [Tutorial: Configuring a Lambda Function to Access Amazon ElastiCache in an Amazon VPC](vpc-ec.md)
 + [Tutorial: Configuring a Lambda Function to Access Amazon RDS in an Amazon VPC](vpc-rds.md)
\ No newline at end of file
diff --git a/doc_source/vpc.md b/doc_source/vpc.md
index 8a177bd..6a3fa07 100644
--- a/doc_source/vpc.md
+++ b/doc_source/vpc.md
@@ -10,6 +10,7 @@ AWS Lambda does not support connecting to resources within Dedicated Tenancy VPC
 ## Configuring a Lambda Function for Amazon VPC Access<a name="vpc-configuring"></a>
 
 You add VPC information to your Lambda function configuration using the `VpcConfig` parameter, either at the time you create a Lambda function \(see [CreateFunction](API_CreateFunction.md)\), or you can add it to the existing Lambda function configuration \(see [UpdateFunctionConfiguration](API_UpdateFunctionConfiguration.md)\)\. Following are AWS CLI examples:
+
 + The `create-function` CLI command specifies the `--vpc-config` parameter to provide VPC information at the time you create a Lambda function\. Note that the `--runtime` parameter specifies `python3.6`\. You can also use `python2.7`\.
 
   ```
@@ -24,6 +25,7 @@ You add VPC information to your Lambda function configuration using the `VpcConf
   ```
 **Note**  
 The Lambda function execution role must have permissions to create, describe and delete ENIs\. AWS Lambda provides a permissions policy, `AWSLambdaVPCAccessExecutionRole`, with permissions for the necessary EC2 actions \(`ec2:CreateNetworkInterface`, ` ec2:DescribeNetworkInterfaces`, and `ec2:DeleteNetworkInterface`\) that you can use when creating a role\. You can review the policy in the IAM console\. Do not delete this role immediately after your Lambda function execution\. There is a delay between the time your Lambda function executes and ENI deletion\. If you do delete the role immediately after function execution, you are responsible for deleting the ENIs\.
+
 + The `update-function-configuration` CLI command specifies the `--vpc-config` parameter to add VPC information to an existing Lambda function configuration\.
 
   ```
@@ -41,9 +43,11 @@ The Lambda function execution role must have permissions to create, describe and
   ```
 
 Note the following additional considerations:
+
 + When you add VPC configuration to a Lambda function, it can only access resources in that VPC\. If a Lambda function needs to access both VPC resources and the public Internet, the VPC needs to have a Network Address Translation \(NAT\) instance inside the VPC\. 
 
    
+
 + When a Lambda function is configured to run within a VPC, it incurs an additional ENI start\-up penalty\. This means address resolution may be delayed when trying to connect to network resources\.
 
 ## Internet Access for Lambda Functions<a name="vpc-internet"></a>
@@ -56,6 +60,7 @@ If your Lambda function needs Internet access, do not attach it to a public subn
 ## Guidelines for Setting Up VPC\-Enabled Lambda Functions<a name="vpc-setup-guidelines"></a>
 
 Your Lambda function automatically scales based on the number of events it processes\. The following are general guidelines for setting up VPC\-enabled Lambda functions to support the scaling behavior\. 
+
 + If your Lambda function accesses a VPC, you must make sure that your VPC has sufficient ENI capacity to support the scale requirements of your Lambda function\. You can use the following formula to approximately determine the ENI capacity\.
 
   ```
@@ -63,10 +68,13 @@ Your Lambda function automatically scales based on the number of events it proce
   ```
 
   Where: 
+
   + **Projected peak concurrent execution** – Use the information in  [Managing Concurrency](concurrent-executions.md) to determine this value\.
+
   + **Memory** – The amount of memory you configured for your Lambda function\. 
 
    
+
 + The subnets you specify should have sufficient available IP addresses to match the number of ENIs\.
 
    
diff --git a/doc_source/welcome.md b/doc_source/welcome.md
index 373e96e..2e35f44 100644
--- a/doc_source/welcome.md
+++ b/doc_source/welcome.md
@@ -15,7 +15,9 @@ AWS Lambda is an ideal compute platform for many application scenarios, provided
 When using AWS Lambda, you are responsible only for your code\. AWS Lambda manages the compute fleet that offers a balance of memory, CPU, network, and other resources\. This is in exchange for flexibility, which means you cannot log in to compute instances, or customize the operating system or language runtime\. These constraints enable AWS Lambda to perform operational and administrative activities on your behalf, including provisioning capacity, monitoring fleet health, applying security patches, deploying your code, and monitoring and logging your Lambda functions\.
 
 If you need to manage your own compute resources, Amazon Web Services also offers other compute services to meet your needs\. 
+
 + Amazon Elastic Compute Cloud \(Amazon EC2\) service offers flexibility and a wide range of EC2 instance types to choose from\. It gives you the option to customize operating systems, network and security settings, and the entire software stack, but you are responsible for provisioning capacity, monitoring fleet health and performance, and using Availability Zones for fault tolerance\.
+
 + Elastic Beanstalk offers an easy\-to\-use service for deploying and scaling applications onto Amazon EC2 in which you retain ownership and full control over the underlying EC2 instances\.
 
 ## Are You a First\-time User of AWS Lambda?<a name="welcome-first-time-user"></a>
@@ -33,7 +35,11 @@ If you are a first\-time user of AWS Lambda, we recommend that you read the foll
 Beyond the Getting Started exercise, you can explore the various use cases, each of which is provided with a tutorial that walks you through an example scenario\. Depending on your application needs \(for example, whether you want event driven Lambda function invocation or on\-demand invocation\), you can follow specific tutorials that meet your specific needs\. For more information, see [Use Cases](use-cases.md)\.
 
 The following topics provide additional information about AWS Lambda:
+
 + [AWS Lambda Function Versioning and Aliases](versioning-aliases.md)
+
 + [Using Amazon CloudWatch](monitoring-functions.md)
+
 + [Best Practices for Working with AWS Lambda Functions](best-practices.md)
+
 + [AWS Lambda Limits](limits.md)
\ No newline at end of file
diff --git a/doc_source/with-cloudtrail-example-configure-event-source.md b/doc_source/with-cloudtrail-example-configure-event-source.md
index 1690e34..4e709a8 100644
--- a/doc_source/with-cloudtrail-example-configure-event-source.md
+++ b/doc_source/with-cloudtrail-example-configure-event-source.md
@@ -1,15 +1,21 @@
 # Step 3: Add Event Source \(Configure Amazon S3 to Publish Events\)<a name="with-cloudtrail-example-configure-event-source"></a>
 
  In this section, you add the remaining configuration so Amazon S3 can publish object\-created events to AWS Lambda and invoke your Lambda function\. You will do the following:
+
 + Add permissions to the Lambda function's access policy to allow Amazon S3 to invoke the function\.
+
 +  Add notification configuration to your source bucket\. In the notification configuration, you provide the following: 
+
   + Event type for which you want Amazon S3 to publish events\. For this tutorial, you specify the `s3:ObjectCreated:*` event type\.
+
   + Lambda function to invoke\.
 
 ## Step 3\.1: Add Permissions to the Lambda Function's Access Permissions Policy<a name="with-cloudtrail-example-configure-event-source-add-permission"></a>
 
 1. Run the following Lambda CLI `add-permission` command to grant Amazon S3 service principal \(`s3.amazonaws.com`\) permissions to perform the `lambda:InvokeFunction` action\. Note that permission is granted to Amazon S3 to invoke the function only if the following conditions are met:
+
    + An object\-created event is detected on a specific bucket\.
+
    + The bucket is owned by a specific AWS account\. If a bucket owner deletes a bucket, some other AWS account can create a bucket with the same name\. This condition ensures that only a specific AWS account can invoke your Lambda function\.
 **Note**  
 If you have not already created the `adminuser` profile, see [Set Up the AWS Command Line Interface \(AWS CLI\)](setup-awscli.md)\.
@@ -37,7 +43,9 @@ If you have not already created the `adminuser` profile, see [Set Up the AWS Com
 ## Step 3\.2: Configure Notification on the Bucket<a name="with-cloudtrail-example-configure-event-source-add-notif-config"></a>
 
 Add notification configuration on the *examplebucket* to request Amazon S3 to publish object\-created events to Lambda\. In the configuration, you specify the following:
+
 + Event type – For this tutorial, these can be any event types that create objects\.
+
 + Lambda function ARN – This is your Lambda function that you want Amazon S3 to invoke\. The ARN is of the following form:
 
   ```
diff --git a/doc_source/with-cloudtrail-example-create-iam-role.md b/doc_source/with-cloudtrail-example-create-iam-role.md
index 2f5f038..f732056 100644
--- a/doc_source/with-cloudtrail-example-create-iam-role.md
+++ b/doc_source/with-cloudtrail-example-create-iam-role.md
@@ -50,8 +50,11 @@ For more information about the execution role, see [Manage Permissions: Using an
 1. Note the permissions policy name because you will use it in the next step\. 
 
 1. Follow the steps in [Creating a Role to Delegate Permissions to an AWS Service](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-service.html) in the *IAM User Guide* to create an IAM role and then attach the permissions policy you just created to the role\. As you follow the steps to create a role, note the following:
+
    + In **Role Name**, use a name that is unique within your AWS account \(for example, **lambda\-cloudtrail\-execution\-role**\)\. 
+
    + In **Select Role Type**, choose **AWS Service Roles**, and then choose **AWS Lambda**\.
+
    + In **Attach Policy**, choose the policy you created in the previous step\.
 
 ## Next Step<a name="with-cloudtrail-example-create-iam-role-next-step"></a>
diff --git a/doc_source/with-cloudtrail-example-create-test-manually.md b/doc_source/with-cloudtrail-example-create-test-manually.md
index fd36527..804d27f 100644
--- a/doc_source/with-cloudtrail-example-create-test-manually.md
+++ b/doc_source/with-cloudtrail-example-create-test-manually.md
@@ -1,13 +1,16 @@
 # Step 2: Create a Lambda Function and Invoke It Manually \(Using Sample Event Data\)<a name="with-cloudtrail-example-create-test-manually"></a>
 
 In this section, you do the following:
+
 + Create a Lambda function deployment package using the sample code provided\. The sample Lambda function code that you'll use to process Amazon S3 events is provided in various languages\. Select one of the languages and follow the corresponding instructions to create a deployment package\.
 **Note**  
 Your Lambda function uses an S3 event that provides the bucket name and key name of the object CloudTrail created\. Your Lambda function then reads that object to process CloudTrail records\.
+
 + Create an IAM role \(execution role\)\. At the time you upload the deployment package, you need to specify an IAM role \(execution role\) that Lambda can assume to execute the function on your behalf\. 
+
 + Create the Lambda function by uploading the deployment package, and then test it by invoking it manually using sample CloudTrail event data\. 
 
-**Topics**
+
 + [Step 2\.1: Create a Deployment Package](with-cloudtrail-example-deployment-pkg.md)
 + [Step 2\.2: Create the Execution Role \(IAM Role\)](with-cloudtrail-example-create-iam-role.md)
 + [Step 2\.3: Create the Lambda Function and Test It Manually](with-cloudtrail-example-upload-deployment-pkg.md)
\ No newline at end of file
diff --git a/doc_source/with-cloudtrail-example-deployment-pkg.md b/doc_source/with-cloudtrail-example-deployment-pkg.md
index 3d9fbd4..367a439 100644
--- a/doc_source/with-cloudtrail-example-deployment-pkg.md
+++ b/doc_source/with-cloudtrail-example-deployment-pkg.md
@@ -85,7 +85,7 @@ The deployment package is a \.zip file containing your Lambda function code\. Fo
    };
    ```
 **Note**  
-The code sample is compliant with the Node\.js runtimes v8\.10, v6\.10 or v4\.3\. For more information, see [Programming Model\(Node\.js\)](programming-model.md)
+The code sample is compliant with the Node\.js runtimes v6\.10 or v4\.3\. For more information, see [Programming Model\(Node\.js\)](programming-model.md)
 
 1. Save the file as `CloudTrailEventProcessing.js`\. 
 
diff --git a/doc_source/with-cloudtrail-example-prepare.md b/doc_source/with-cloudtrail-example-prepare.md
index df47bc9..c959101 100644
--- a/doc_source/with-cloudtrail-example-prepare.md
+++ b/doc_source/with-cloudtrail-example-prepare.md
@@ -1,8 +1,11 @@
 # Step 1: Prepare<a name="with-cloudtrail-example-prepare"></a>
 
 In this section you do the following:
+
 + Sign up for an AWS account and set up the AWS CLI\. 
+
 + Turn on CloudTrail in your account\. 
+
 + Create an SNS topic and subscribe to it\.
 
 Follow the steps in the following sections to walk through the setup process\.
@@ -13,7 +16,9 @@ In this tutorial, we assume that you are setting the resources in the `us-west-2
 ## Step 1\.1: Sign Up for AWS and Set Up the AWS CLI<a name="with-cloudtrail-example-prepare-setup-cli"></a>
 
 Make sure you have completed the following steps:
+
 + Signed up for an AWS account and created an administrator user in the account \(called **adminuser**\)\. For instructions, see [Set Up an AWS Account](setup.md)\. 
+
 + Installed and set up the AWS CLI\. For instructions, see [Set Up the AWS Command Line Interface \(AWS CLI\)](setup-awscli.md)\.
 
 ## Step 1\.2: Turn on CloudTrail<a name="with-cloudtrail-example-prepare-create-buckets"></a>
diff --git a/doc_source/with-cloudtrail-example-upload-deployment-pkg.md b/doc_source/with-cloudtrail-example-upload-deployment-pkg.md
index e5924fe..ab5cc11 100644
--- a/doc_source/with-cloudtrail-example-upload-deployment-pkg.md
+++ b/doc_source/with-cloudtrail-example-upload-deployment-pkg.md
@@ -1,7 +1,9 @@
 # Step 2\.3: Create the Lambda Function and Test It Manually<a name="with-cloudtrail-example-upload-deployment-pkg"></a>
 
 In this section, you do the following:
+
 + Create a Lambda function by uploading the deployment package\. 
+
 + Test the Lambda function by invoking it manually\. 
 
   In this step, you use a sample S3 event that identifies your bucket name and the sample object \(that is, an example CloudTrail log\)\. In the next section you configure your S3 bucket notification to publish object\-created events and test the end\-to\-end experience\.
@@ -11,7 +13,7 @@ In this section, you do the following:
 In this step, you upload the deployment package using the AWS CLI and provide configuration information when you create the Lambda function using the `adminuser` `profile`\. For more information on setting up the `admin` profile and using the AWS CLI, see [Set Up the AWS Command Line Interface \(AWS CLI\)](setup-awscli.md)\.
 
 **Note**  
-You need to update the command by providing the \.zip file path \(*//file\-path/CloudTrailEventProcessing\.zip \\*\) and the execution role ARN \(*execution\-role\-arn*\)\. If you used the sample code provided earlier in this tutorial, set the `--runtime` parameter value to `nodejs8.10`, `nodejs6.10` or `nodejs4.3`\. The sample following uses `nodejs6.10`\.   
+You need to update the command by providing the \.zip file path \(*//file\-path/CloudTrailEventProcessing\.zip \\*\) and the execution role ARN \(*execution\-role\-arn*\)\. If you used the sample code provided earlier in this tutorial, set the `--runtime` parameter value to `nodejs6.10` or `nodejs4.3`\.   
 You can author your Lambda functions in Java or Python too\. If you use another language, change the `--runtime` parameter value to `java8`, `python3.6` or `python2.7` as needed\.
 
 ```
diff --git a/doc_source/with-cloudtrail-example.md b/doc_source/with-cloudtrail-example.md
index e58fc19..9e6f47c 100644
--- a/doc_source/with-cloudtrail-example.md
+++ b/doc_source/with-cloudtrail-example.md
@@ -30,7 +30,9 @@ Each object CloudTrail creates in your S3 bucket is a JSON object, with one or m
 ```
 
 For illustration, the Lambda function notifies you by email if an API call to create an Amazon SNS topic is reported in the log\. That is, when your Lambda function parses the log, it looks for records with the following:
+
 + `eventSource = "sns.amazonaws.com"`
+
 + `eventName = "CreateTopic"`
 
  If found, it publishes the event to your Amazon SNS topic \(you configure this topic to notify you by email\)\.
@@ -43,20 +45,27 @@ Upon completing this tutorial, you will have Amazon S3, AWS Lambda, Amazon SNS,
 This tutorial assumes that you create these resources in the `us-west-2` region\.
 
 In Lambda:
+
 + A Lambda function\.
+
 +  An access policy associated with your Lambda function – You grant Amazon S3 permissions to invoke the Lambda function using this permissions policy\. You will also restrict the permissions so that Amazon S3 can invoke the Lambda function only for object\-created events from a specific bucket that is owned by a specific AWS account\. 
 **Note**  
  It is possible for an AWS account to delete a bucket and some other AWS account to later create a bucket with same name\. The additional conditions ensure that Amazon S3 can invoke the Lambda function only if Amazon S3 detects object\-created events from a specific bucket owned by a specific AWS account\. 
 
 In IAM:
+
 +  An IAM role \(execution role\) – You grant permissions that your Lambda function needs through the permissions policy associated with this role\. 
 
 In Amazon S3:
+
 + A bucket – In this tutorial, the bucket name is *examplebucket*\. When you turn the trail on in the CloudTrail console, you specify this bucket for CloudTrail to save the logs\. 
+
 + Notification configuration on the *examplebucket* – In the configuration, you direct Amazon S3 to publish object\-created events to Lambda, by invoking your Lambda function\. For more information about the Amazon S3 notification feature, see [Setting Up Notification of Bucket Events](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in *Amazon Simple Storage Service Developer Guide*\.
+
 + Sample CloudTrail log object \(`ExampleCloudTrailLog.json`\) in *examplebucket* bucket – In the first half of this exercise, you create and test your Lambda function by manually invoking it using a sample S3 event\. This sample event identifies *examplebucket* as the bucket name and this sample object key name\. Your Lambda function then reads the object and sends you email notifications using an SNS topic\. 
 
 In Amazon SNS
+
 + An SNS topic – You subscribe to this topic by specifying email as the protocol\.
 
 Now you are ready to start the tutorial\. 
diff --git a/doc_source/with-ddb-configure-ddb.md b/doc_source/with-ddb-configure-ddb.md
index 3a5b942..c2a844e 100644
--- a/doc_source/with-ddb-configure-ddb.md
+++ b/doc_source/with-ddb-configure-ddb.md
@@ -1,8 +1,11 @@
 # Step 3: Add an Event Source \(Create a DynamoDB Stream and Associate It with Your Lambda Function\)<a name="with-ddb-configure-ddb"></a>
 
 In this section, you do the following:
+
 + Create an Amazon DynamoDB table with a stream enabled\.
+
 + Create an event source mapping in AWS Lambda\. This event source mapping associates the DynamoDB stream with your Lambda function\. After you create this event source mapping, AWS Lambda starts polling the stream\.
+
 + Test the end\-to\-end experience\. As you perform table updates, DynamoDB writes event records to the stream\. As AWS Lambda polls the stream, it detects new records in the stream and executes your Lambda function on your behalf by passing events to the function\. 
 **Note**  
 The following example assumes you have a user \(`adminuser`\) with administrator privileges\. When you follow the procedure, create a user with name `adminuser`\.
diff --git a/doc_source/with-ddb-create-test-function.md b/doc_source/with-ddb-create-test-function.md
index 6ee7e5e..5bc455d 100644
--- a/doc_source/with-ddb-create-test-function.md
+++ b/doc_source/with-ddb-create-test-function.md
@@ -1,13 +1,16 @@
 # Step 2: Create a Lambda Function and Invoke It Manually \(Using Sample Event Data\)<a name="with-ddb-create-test-function"></a>
 
 In this section, you do the following:
+
 + Create a Lambda function deployment package using the sample code provided\. The sample Lambda function code that you'll use to process DynamoDB events is provided in various languages\. Select one of the languages and follow the corresponding instructions to create a deployment package\.
 **Note**  
 To see more examples of using other AWS services within your function, including calling other Lambda functions, see [AWS SDK for JavaScript](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/frames.html)
+
 + Create an IAM role \(execution role\)\. At the time you upload the deployment package, you need to specify an IAM role \(execution role\) that Lambda can assume to execute the function on your behalf\. For example, AWS Lambda needs permissions for DynamoDB actions so it can poll the stream and read records from the stream\. In the *pull* model you must also grant AWS Lambda permissions to invoke your Lambda function\. The example Lambda function writes some of the event data to CloudWatch, so it needs permissions for necessary CloudWatch actions\. 
+
 + Create the Lambda function by uploading the deployment package, and then test it by invoking it manually using sample DynamoDB event data\. You provide both the deployment package and the IAM role at the time of creating a Lambda function\. You can also specify other configuration information, such as the function name, memory size, runtime environment to use, and the handler\. For more information about these parameters, see [CreateFunction](API_CreateFunction.md)\. After creating the Lambda function, you invoke it using sample Amazon DynamoDB event data\. 
 
-**Topics**
+
 + [Step 2\.1: Create a Lambda Function Deployment Package](with-dynamodb-create-package.md)
 + [Step 2\.2: Create the Execution Role \(IAM Role\)](with-dynamodb-create-execution-role.md)
 + [Step 2\.3: Create the Lambda Function and Test It Manually](with-dynamodb-create-function.md)
\ No newline at end of file
diff --git a/doc_source/with-ddb-example.md b/doc_source/with-ddb-example.md
index d0b54ac..d614736 100644
--- a/doc_source/with-ddb-example.md
+++ b/doc_source/with-ddb-example.md
@@ -3,7 +3,9 @@
  In this tutorial, you create a Lambda function to consume events from a DynamoDB stream\. 
 
  The tutorial is divided into two main sections: 
+
 +  First, you perform the necessary setup to create a Lambda function and then you test it by invoking it manually using sample event data\. 
+
 + Second, you create an DynamoDB stream\-enabled table and add an event source mapping in AWS Lambda to associate the stream with your Lambda function\. AWS Lambda starts polling the stream\. Then, you test the end\-to\-end setup\. As you create, update, and delete items from the table, Amazon DynamoDB writes records to the stream\. AWS Lambda detects the new records as it polls the stream and executes your Lambda function on your behalf\. 
 
 **Important**  
diff --git a/doc_source/with-ddb-prepare.md b/doc_source/with-ddb-prepare.md
index 35cbc53..4d56f07 100644
--- a/doc_source/with-ddb-prepare.md
+++ b/doc_source/with-ddb-prepare.md
@@ -1,7 +1,9 @@
 # Step 1: Prepare<a name="with-ddb-prepare"></a>
 
 Make sure you have completed the following steps:
+
 + Signed up for an AWS account and created an administrator user in the account \(called **adminuser**\)\. For instructions, see [Set Up an AWS Account](setup.md) 
+
 + Installed and set up the AWS CLI\. For instructions, see [Set Up the AWS Command Line Interface \(AWS CLI\)](setup-awscli.md)
 
 ## Next Step<a name="with-ddb-next-step-2"></a>
diff --git a/doc_source/with-ddb.md b/doc_source/with-ddb.md
index 4cdee07..09baddd 100644
--- a/doc_source/with-ddb.md
+++ b/doc_source/with-ddb.md
@@ -3,10 +3,13 @@
  You can use Lambda functions as triggers for your Amazon DynamoDB table\. Triggers are custom actions you take in response to updates made to the DynamoDB table\. To create a trigger, first you enable Amazon DynamoDB Streams for your table\. Then, you write a Lambda function to process the updates published to the stream\. 
 
 Note the following about how the Amazon DynamoDB and AWS Lambda integration works:
-+ **Stream\-based model** – This is a model \(see [Event Source Mapping](invocation-options.md#intro-invocation-modes)\), where AWS Lambda polls the stream at a rate of 4 times per second and, when it detects new records, invokes your Lambda function by passing the update event as parameter\. 
+
++ **Stream\-based model** – This is a model \(see [Event Source Mapping](java-invocation-options.md#intro-invocation-modes)\), where AWS Lambda polls the stream at a rate of 4 times per second and, when it detects new records, invokes your Lambda function by passing the update event as parameter\. 
 
   In a stream\-based model, you maintain event source mapping in AWS Lambda\. The event source mapping describes which stream maps to which Lambda function\. AWS Lambda provides an API \([CreateEventSourceMapping](API_CreateEventSourceMapping.md)\) for you to create the mapping\. You can also use the AWS Lambda console to create event source mappings\. 
-+ **Synchronous invocation** – AWS Lambda invokes a Lambda function using the `RequestResponse` invocation type \(synchronous invocation\)\. For more information about invocation types, see [Invocation Types](invocation-options.md)\. 
+
++ **Synchronous invocation** – AWS Lambda invokes a Lambda function using the `RequestResponse` invocation type \(synchronous invocation\)\. For more information about invocation types, see [Invocation Types](java-invocation-options.md)\. 
+
 + **Event structure** – The event your Lambda function receives is the table update information AWS Lambda reads from your stream\. When you configure event source mapping, the batch size you specify is the maximum number of records that you want your Lambda function to receive per invocation\.
 
 Regardless of what invokes a Lambda function, AWS Lambda always executes a Lambda function on your behalf\. If your Lambda function needs to access any AWS resources, you need to grant the relevant permissions to access those resources\. You also need to grant AWS Lambda permissions to poll your DynamoDB stream\. You grant all of these permissions to an IAM role \(execution role\) that AWS Lambda can assume to poll the stream and execute the Lambda function on your behalf\. You create this role first and then enable it at the time you create the Lambda function\. For more information, see [Manage Permissions: Using an IAM Role \(Execution Role\)](intro-permission-model.md#lambda-intro-execution-role)\.
diff --git a/doc_source/with-dynamodb-create-execution-role.md b/doc_source/with-dynamodb-create-execution-role.md
index e25e0f1..dce54f4 100644
--- a/doc_source/with-dynamodb-create-execution-role.md
+++ b/doc_source/with-dynamodb-create-execution-role.md
@@ -1,7 +1,9 @@
 # Step 2\.2: Create the Execution Role \(IAM Role\)<a name="with-dynamodb-create-execution-role"></a>
 
 In this section, you create an IAM role using the following predefined role type and access policy:
+
 + AWS service role of the type **Lambda** – This role grants AWS Lambda permissions to call other AWS services\. 
+
 + **AWSLambdaDynamoDBExecutionRole** – This contains the DynamoDB permissions policy that you attach to augment Lambda's basic execution policy and allows the two services to interoperate under your Lambda function's account\.
 
  For more information about IAM roles, see [IAM Roles](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) in the *IAM User Guide* as well as the steps in [Creating a Role to Delegate Permissions to an AWS Service](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-service.html) in the *IAM User Guide* to create an IAM role \(execution role\)\. 
diff --git a/doc_source/with-dynamodb-create-function.md b/doc_source/with-dynamodb-create-function.md
index 265ae10..243db62 100644
--- a/doc_source/with-dynamodb-create-function.md
+++ b/doc_source/with-dynamodb-create-function.md
@@ -1,7 +1,9 @@
 # Step 2\.3: Create the Lambda Function and Test It Manually<a name="with-dynamodb-create-function"></a>
 
 In this section, you do the following:
+
 + Create a Lambda function by uploading the deployment package\. 
+
 + Test the Lambda function by invoking it manually\. Instead of creating an event source, you use sample DynamoDB event data\. 
 
 In the next section, you create an DynamoDB stream and test the end\-to\-end experience\.
@@ -12,7 +14,7 @@ In this step, you upload the deployment package using the AWS CLI\.
 
 At the command prompt, run the following Lambda CLI `create-function` command using the **adminuser** profile\. If you have already created this profile, see [Set Up an AWS Account](setup.md)
 
-You need to update the command by providing the \.zip file path and the execution role ARN\. The `--runtime` parameter value can be `python3.6`, `python2.7`, `nodejs8.10`, `nodejs6.10` or `nodejs4.3`, or `java8`, depending on the language you used to author your code\.
+You need to update the command by providing the \.zip file path and the execution role ARN\. The `--runtime` parameter value can be `python3.6`, `python2.7`, `nodejs6.10` `nodejs4.3`, or `java8`, depending on the language you used to author your code\.
 
 ```
 $ aws lambda create-function \
@@ -152,7 +154,9 @@ In this step, you invoke your Lambda function manually using the `invoke` AWS La
 1. Verify the output in the `outputfile.txt` file\.
 
    You can monitor the activity of your Lambda function in the AWS Lambda console\. 
+
    + The AWS Lambda console shows a graphical representation of some of the CloudWatch metrics in the **Cloudwatch Metrics at a glance** section for your function\. Sign in to the AWS Management Console at [https://console\.aws\.amazon\.com/](https://console.aws.amazon.com/)\.
+
    +  For each graph you can also click the **logs** link to view the CloudWatch logs directly\.
 
 ### Next Step<a name="with-ddb-manual-invoke-next-step"></a>
diff --git a/doc_source/with-dynamodb-create-package.md b/doc_source/with-dynamodb-create-package.md
index e1ebd38..681e537 100644
--- a/doc_source/with-dynamodb-create-package.md
+++ b/doc_source/with-dynamodb-create-package.md
@@ -20,7 +20,7 @@ From the **Filter View** list, choose the language you want to use for your Lamb
    };
    ```
 **Note**  
-The code sample is compliant with the Node\.js runtimes v4\.3 or higher\. For more information, see [Programming Model\(Node\.js\)](programming-model.md)
+The code sample is compliant with the Node\.js runtimes v6\.10 or v4\.3\. For more information, see [Programming Model\(Node\.js\)](programming-model.md)
 
 1. Save the file as ` ProcessDynamoDBStream.js`\.
 
@@ -61,7 +61,9 @@ public class DDBEventProcessor implements
 If the handler returns normally without exceptions, Lambda considers the input batch of records as processed successfully and begins reading new records in the stream\. If the handler throws an exception, Lambda considers the input batch of records as not processed and invokes the function with the same batch of records again\. 
 
 Using the preceding code \(in a file named `DDBEventProcessor.java`\), create a deployment package\. Make sure that you add the following dependencies: 
+
 + `aws-lambda-java-core`
+
 + `aws-lambda-java-events` 
 
 For more information, see [Programming Model for Authoring Lambda Functions in Java](java-programming-model.md)\.
@@ -123,7 +125,9 @@ namespace DynamoDBStreams
 ```
 
 To create a deployment package, follow the steps outlined in [\.NET Core CLI](lambda-dotnet-coreclr-deployment-package.md)\. In doing so, note the following after you've created your \.NET project: 
+
 + Rename the default *Program\.cs file* with a file name of your choice, such as *ProcessingDynamoDBStreams\.cs*\. 
+
 + Replace the default contents of the renamed *Program\.cs* file with the code example above\.
 
 After you verify that your deployment package is created, go to the next step to create an IAM role \(execution role\)\. You specify this role at the time you create your Lambda function\. 
diff --git a/doc_source/with-kinesis-example-create-iam-role.md b/doc_source/with-kinesis-example-create-iam-role.md
index 0568d72..7736883 100644
--- a/doc_source/with-kinesis-example-create-iam-role.md
+++ b/doc_source/with-kinesis-example-create-iam-role.md
@@ -1,7 +1,9 @@
 # Step 2\.2: Create the Execution Role \(IAM Role\)<a name="with-kinesis-example-create-iam-role"></a>
 
 In this section, you create an IAM role using the following predefined role type and access policy:
+
 + AWS service role of the type **AWS Lambda** – This role grants AWS Lambda permissions to assume the role\. 
+
 + **AWSLambdaKinesisExecutionRole** – This is the access permissions policy that you attach to the role\. 
 
  For more information about IAM roles, see [IAM Roles](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) in the *IAM User Guide*\. Use the following procedure to create the IAM role\.
@@ -11,8 +13,11 @@ In this section, you create an IAM role using the following predefined role type
 1. Sign in to the AWS Management Console and open the IAM console at [https://console\.aws\.amazon\.com/iam/](https://console.aws.amazon.com/iam/)\.
 
 1. Follow the steps in [Creating a Role to Delegate Permissions to an AWS Service](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-service.html) in the *IAM User Guide* to create an IAM role \(execution role\)\. As you follow the steps to create a role, note the following:
+
    + In **Role Name**, use a name that is unique within your AWS account \(for example, **lambda\-kinesis\-execution\-role**\)\. 
+
    + In **Select Role Type**, choose **AWS Service Roles**, and then choose **AWS Lambda**\. This grants the AWS Lambda service permissions to assume the role\.
+
    + In **Attach Policy**, choose **AWSLambdaKinesisExecutionRole**\. The permissions in this policy are sufficient for the Lambda function in this tutorial\.
 
 1. Write down the role ARN\. You will need it in the next step when you create your Lambda function\.
diff --git a/doc_source/with-kinesis-example-create-test-manually.md b/doc_source/with-kinesis-example-create-test-manually.md
index 6cde429..46c52e1 100644
--- a/doc_source/with-kinesis-example-create-test-manually.md
+++ b/doc_source/with-kinesis-example-create-test-manually.md
@@ -1,13 +1,16 @@
 # Step 2: Create a Lambda Function and Invoke It Manually \(Using Sample Event Data\)<a name="with-kinesis-example-create-test-manually"></a>
 
 In this section, you do the following:
+
 + Create a Lambda function deployment package using the sample code provided\. The sample Lambda function code that you'll use to process Kinesis events is provided in various languages\. Select one of the languages and follow the corresponding instructions to create a deployment package\.
 **Note**  
 To see more examples of using other AWS services within your function, including calling other Lambda functions, see [AWS SDK for JavaScript](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/frames.html)
+
 + Create an IAM role \(execution role\)\. At the time you upload the deployment package, you need to specify an IAM role \(execution role\) that Lambda can assume to execute the function on your behalf\. 
+
 + Create the Lambda function by uploading the deployment package, and then test it by invoking it manually using sample Kinesis event data\. 
 
-**Topics**
+
 + [Step 2\.1: Create a Deployment Package](with-kinesis-example-deployment-pkg.md)
 + [Step 2\.2: Create the Execution Role \(IAM Role\)](with-kinesis-example-create-iam-role.md)
 + [Step 2\.3: Create the Lambda Function and Test It Manually](with-kinesis-example-upload-deployment-pkg.md)
\ No newline at end of file
diff --git a/doc_source/with-kinesis-example-deployment-pkg.md b/doc_source/with-kinesis-example-deployment-pkg.md
index 8750aa6..743fcb1 100644
--- a/doc_source/with-kinesis-example-deployment-pkg.md
+++ b/doc_source/with-kinesis-example-deployment-pkg.md
@@ -63,7 +63,9 @@ return null;
 If the handler returns normally without exceptions, Lambda considers the input batch of records as processed successfully and begins reading new records in the stream\. If the handler throws an exception, Lambda considers the input batch of records as not processed and invokes the function with the same batch of records again\. 
 
 Using the preceding code \(in a file named `ProcessKinesisEvents.java`\), create a deployment package\. Make sure that you add the following dependencies: 
+
 + `aws-lambda-java-core`
+
 + `aws-lambda-java-events` 
 
 For more information, see [Programming Model for Authoring Lambda Functions in Java](java-programming-model.md)\.
@@ -124,7 +126,9 @@ namespace KinesisStreams
 ```
 
 To create a deployment package, follow the steps outlined in [\.NET Core CLI](lambda-dotnet-coreclr-deployment-package.md)\. In doing so, note the following after you've created your \.NET project: 
+
 + Rename the default *Program\.cs file* with a file name of your choice, such as *ProcessingKinesisEvents\.cs*\. 
+
 + Replace the default contents of the renamed *Program\.cs* file with the code example above\.
 
 After you verify that your deployment package is created, go to the next step to create an IAM role \(execution role\)\. You specify this role at the time you create your Lambda function\. 
diff --git a/doc_source/with-kinesis-example-prepare.md b/doc_source/with-kinesis-example-prepare.md
index 816c759..2fa1458 100644
--- a/doc_source/with-kinesis-example-prepare.md
+++ b/doc_source/with-kinesis-example-prepare.md
@@ -1,7 +1,9 @@
 # Step 1: Prepare<a name="with-kinesis-example-prepare"></a>
 
 Make sure you have completed the following steps:
+
 + Signed up for an AWS account and created an administrator user in the account \(called **adminuser**\)\. For instructions, see [Set Up an AWS Account](setup.md)\. 
+
 + Installed and set up the AWS CLI\. For instructions, see [Set Up the AWS Command Line Interface \(AWS CLI\)](setup-awscli.md)\.
 
 ## Next Step<a name="with-kinesis-example-prepare-next-step"></a>
diff --git a/doc_source/with-kinesis-example-upload-deployment-pkg.md b/doc_source/with-kinesis-example-upload-deployment-pkg.md
index 3acf3b2..a9844a7 100644
--- a/doc_source/with-kinesis-example-upload-deployment-pkg.md
+++ b/doc_source/with-kinesis-example-upload-deployment-pkg.md
@@ -1,7 +1,9 @@
 # Step 2\.3: Create the Lambda Function and Test It Manually<a name="with-kinesis-example-upload-deployment-pkg"></a>
 
 In this section, you do the following:
+
 + Create a Lambda function by uploading the deployment package\. 
+
 + Test the Lambda function by invoking it manually\. Instead of creating an event source, you use sample Kinesis event data\. 
 
 In the next section, you create an Kinesis stream and test the end\-to\-end experience\.
@@ -12,7 +14,7 @@ In this step, you upload the deployment package using the AWS CLI\.
 
 At the command prompt, run the following Lambda CLI `create-function` command using the **adminuser** profile\. For more information on setting this up, see [Configuring the AWS CLI](http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html)\.
 
-You need to update the command by providing the \.zip file path and the execution role ARN\. The `--runtime` parameter value can be `python3.6`, `python2.7`, `nodejs8.10`, `nodejs6.10`, `nodejs4.3`, or `java8`, depending on the language you used to author your code\.
+You need to update the command by providing the \.zip file path and the execution role ARN\. The `--runtime` parameter value can be `python3.6`, `python2.7`, `nodejs6.10`, `nodejs4.3`, or `java8`, depending on the language you used to author your code\.
 
 ```
 $ aws lambda create-function \
diff --git a/doc_source/with-kinesis-example.md b/doc_source/with-kinesis-example.md
index 8b1559c..296d515 100644
--- a/doc_source/with-kinesis-example.md
+++ b/doc_source/with-kinesis-example.md
@@ -3,7 +3,9 @@
 In this tutorial, you create a Lambda function to consume events from an Kinesis stream\. 
 
  The tutorial is divided into two main sections: 
+
 +  First, you perform the necessary setup to create a Lambda function and then you test it by invoking it manually using sample event data \(you don't need an Kinesis stream\)\. 
+
 + Second, you create a Kinesis stream \(event source\)\. You add an event source mapping in AWS Lambda to associate the stream with your Lambda function\. AWS Lambda starts polling the stream, you add test records to the stream using the Kinesis API, and then you verify that AWS Lambda executed your Lambda function\.
 
 **Important**  
diff --git a/doc_source/with-kinesis.md b/doc_source/with-kinesis.md
index e4a6833..d031406 100644
--- a/doc_source/with-kinesis.md
+++ b/doc_source/with-kinesis.md
@@ -5,10 +5,13 @@ You can create a Kinesis stream to continuously capture and store terabytes of d
 You can subscribe Lambda functions to automatically read batches of records off your Kinesis stream and process them if records are detected on the stream\. AWS Lambda then polls the stream periodically \(once per second\) for new records\.
 
 Note the following about how the Kinesis and AWS Lambda integration works:
-+ **Stream\-based model** – This is a model \(see [Event Source Mapping](invocation-options.md#intro-invocation-modes)\), where AWS Lambda polls the stream and, when it detects new records, invokes your Lambda function by passing the new records as a parameter\. 
+
++ **Stream\-based model** – This is a model \(see [Event Source Mapping](java-invocation-options.md#intro-invocation-modes)\), where AWS Lambda polls the stream and, when it detects new records, invokes your Lambda function by passing the new records as a parameter\. 
 
   In a stream\-based model, you maintain event source mapping in AWS Lambda\. The event source mapping describes which stream maps to which Lambda function\. AWS Lambda provides an API \([CreateEventSourceMapping](API_CreateEventSourceMapping.md)\) that you can use to create the mapping\. You can also use the AWS Lambda console to create event source mappings\. 
-+ **Synchronous invocation** – AWS Lambda invokes a Lambda function using the `RequestResponse` invocation type \(synchronous invocation\) by polling the Kinesis Stream\. For more information about invocation types, see [Invocation Types](invocation-options.md)\. 
+
++ **Synchronous invocation** – AWS Lambda invokes a Lambda function using the `RequestResponse` invocation type \(synchronous invocation\) by polling the Kinesis Stream\. For more information about invocation types, see [Invocation Types](java-invocation-options.md)\. 
+
 + **Event structure** – The event your Lambda function receives is a collection of records AWS Lambda reads from your stream\. When you configure event source mapping, the batch size you specify is the maximum number of records that you want your Lambda function to receive per invocation\.
 
 Regardless of what invokes a Lambda function, AWS Lambda always executes a Lambda function on your behalf\. If your Lambda function needs to access any AWS resources, you need to grant the relevant permissions to access those resources\. You also need to grant AWS Lambda permissions to poll your Kinesis stream\. You grant all of these permissions to an IAM role \(execution role\) that AWS Lambda can assume to poll the stream and execute the Lambda function on your behalf\. You create this role first and then enable it at the time you create the Lambda function\. For more information, see [Manage Permissions: Using an IAM Role \(Execution Role\)](intro-permission-model.md#lambda-intro-execution-role)\.
diff --git a/doc_source/with-on-demand-custom-android-create-cognito-pool.md b/doc_source/with-on-demand-custom-android-create-cognito-pool.md
index 67e536d..97a62a8 100644
--- a/doc_source/with-on-demand-custom-android-create-cognito-pool.md
+++ b/doc_source/with-on-demand-custom-android-create-cognito-pool.md
@@ -9,7 +9,9 @@ For more information about IAM roles, see [IAM Roles](http://docs.aws.amazon.com
 1. Using the IAM User Sign\-In URL, sign in to the Amazon Cognito console as **adminuser**\. 
 
 1. Create a new identity pool called `JavaFunctionAndroidEventHandlerPool`\. Before you follow the procedure to create an identity pool, note the following:
+
    + The identity pool you are creating must allow access to unauthenticated identities because our example mobile application does not require a user log in \(the application users are unauthenticated\)\. Therefore, make sure to select the **Enable access to unauthenticated identities** option\.
+
    + The unauthenticated application users need permission to invoke the Lambda function\. To enable this, you will add the following statement to the permission policy associated with the unauthenticated identities \(it allows permission for the for the `lambda:InvokeFunction` action on the specific Lambda function \(you must update the resource ARN by providing your account ID\)\. 
 
      ```
diff --git a/doc_source/with-on-demand-custom-android-example-create-iam-role.md b/doc_source/with-on-demand-custom-android-example-create-iam-role.md
index 67d9652..3616a79 100644
--- a/doc_source/with-on-demand-custom-android-example-create-iam-role.md
+++ b/doc_source/with-on-demand-custom-android-example-create-iam-role.md
@@ -1,7 +1,9 @@
 # Step 2\.2: Create the Execution Role \(IAM Role\)<a name="with-on-demand-custom-android-example-create-iam-role"></a>
 
 In this section, you create an IAM role using the following predefined role type and access policy:
+
 + AWS service role of the type **AWS Lambda** – This role grants AWS Lambda permissions to assume the role\. 
+
 + **AWSLambdaBasicExecute** – This is the access permissions policy that you attach to the role\. This Lambda function only writes logs to CloudWatch Logs\. So it only needs permission for specific CloudWatch actions\. This policy provides these permissions\. 
 
  For more information about IAM roles, see [IAM Roles](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) in the *IAM User Guide*\. Use the following procedure to create the IAM role\.
@@ -11,8 +13,11 @@ In this section, you create an IAM role using the following predefined role type
 1. Sign in to the AWS Management Console and open the IAM console at [https://console\.aws\.amazon\.com/iam/](https://console.aws.amazon.com/iam/)\.
 
 1. Follow the steps in [Creating a Role to Delegate Permissions to an AWS Service](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-service.html) in the *IAM User Guide* to create an IAM role \(execution role\)\. As you follow the steps to create a role, note the following:
+
    + In **Role Name**, use a name that is unique within your AWS account \(for example, **lambda\-android\-execution\-role**\)\. 
+
    + In **Select Role Type**, choose **AWS Service Roles**, and then choose **AWS Lambda**\. This grants the AWS Lambda service permissions to assume the role\.
+
    + In **Attach Policy**, choose **AWSLambdaBasicExecute**\. The permissions in this policy are sufficient for the Lambda function in this tutorial\.
 
 1. Write down the role ARN\. You will need it in the next step when you create your Lambda function\.
diff --git a/doc_source/with-on-demand-custom-android-example-create-test-manually.md b/doc_source/with-on-demand-custom-android-example-create-test-manually.md
index 4c549f5..a318ae4 100644
--- a/doc_source/with-on-demand-custom-android-example-create-test-manually.md
+++ b/doc_source/with-on-demand-custom-android-example-create-test-manually.md
@@ -1,13 +1,16 @@
 # Step 2: Create the Lambda Function and Invoke It Manually \(Using Sample Event Data\)<a name="with-on-demand-custom-android-example-create-test-manually"></a>
 
 In this section, you do the following:
+
 + Create a Lambda function deployment package using the sample code provided\. The sample Lambda function code to process your mobile application events is provided in various languages\. Select one of the languages and follow the corresponding instructions to create a deployment package\.
 **Note**  
 To see more examples of using other AWS services within your function, including calling other Lambda functions, see [AWS SDK for JavaScript](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/frames.html)
+
 + Create an IAM role \(execution role\)\. At the time you upload the deployment package, you need to specify an IAM role \(execution role\)\. This is the role that AWS Lambda assumes to invoke your Lambda function on your behalf\. 
+
 + Create the Lambda function by uploading the deployment package, and then test it by invoking it manually using sample event data\. 
 
-**Topics**
+
 + [Step 2\.1: Create a Deployment Package](with-on-demand-custom-android-example-deployment-pkg.md)
 + [Step 2\.2: Create the Execution Role \(IAM Role\)](with-on-demand-custom-android-example-create-iam-role.md)
 + [Step 2\.3: Create the Lambda Function and Invoke It Manually \(Using Sample Event Data\)](with-on-demand-custom-android-example-upload-deployment-pkg.md)
\ No newline at end of file
diff --git a/doc_source/with-on-demand-custom-android-example-deployment-pkg.md b/doc_source/with-on-demand-custom-android-example-deployment-pkg.md
index 163726a..a3324de 100644
--- a/doc_source/with-on-demand-custom-android-example-deployment-pkg.md
+++ b/doc_source/with-on-demand-custom-android-example-deployment-pkg.md
@@ -102,7 +102,8 @@ public class HelloPojo {
 }
 ```
 
-Save the preceding code in a file \(`HelloPojo.java`\)\. Create a deployment package\. You need to include the following dependency: 
+Save the preceding code in a file \(`HelloPojo.java`\)\. Your can now create a deployment package\. You need to include the following dependency: 
+
 + `aws-lambda-java-core`
 
 Your deployment package can be a \.zip file or a standalone \.jar\. You can use any build and packaging tool you are familiar with to create a deployment package\. For examples of how to use the Maven build tool to create a standalone \.jar, see [Creating a \.jar Deployment Package Using Maven without any IDE \(Java\)](java-create-jar-pkg-maven-no-ide.md) and [Creating a \.jar Deployment Package Using Maven and Eclipse IDE \(Java\)](java-create-jar-pkg-maven-and-eclipse.md)\. For an example of how to use the Gradle build tool to create a \.zip file, see [Creating a \.zip Deployment Package \(Java\)](create-deployment-pkg-zip-java.md)\.
diff --git a/doc_source/with-on-demand-custom-android-example-prepare.md b/doc_source/with-on-demand-custom-android-example-prepare.md
index e42d575..eda979c 100644
--- a/doc_source/with-on-demand-custom-android-example-prepare.md
+++ b/doc_source/with-on-demand-custom-android-example-prepare.md
@@ -1,7 +1,9 @@
 # Step 1: Prepare<a name="with-on-demand-custom-android-example-prepare"></a>
 
 Make sure you have completed the following steps:
+
 + Signed up for an AWS account and created an administrator user in the account \(called **adminuser**\)\. For instructions, see [Set Up an AWS Account](setup.md) 
+
 + Installed and set up the AWS CLI\. For instructions, see [Set Up the AWS Command Line Interface \(AWS CLI\)](setup-awscli.md)
 
 **Note**  
diff --git a/doc_source/with-on-demand-custom-android-example-upload-deployment-pkg.md b/doc_source/with-on-demand-custom-android-example-upload-deployment-pkg.md
index 3cac05f..970388e 100644
--- a/doc_source/with-on-demand-custom-android-example-upload-deployment-pkg.md
+++ b/doc_source/with-on-demand-custom-android-example-upload-deployment-pkg.md
@@ -1,7 +1,9 @@
 # Step 2\.3: Create the Lambda Function and Invoke It Manually \(Using Sample Event Data\)<a name="with-on-demand-custom-android-example-upload-deployment-pkg"></a>
 
 In this section, you do the following:
+
 + Create a Lambda function, by uploading the deployment package\. 
+
 + Test the Lambda function by invoking it manually\. Instead of creating an event source, you use sample event data\. In the next section, you create an Android mobile app and test the end\-to\-end experience\.
 
 ## Step 2\.3\.1: Create a Lambda Function \(Upload the Deployment Package\)<a name="walkthrough-on-demand-custom-android-events-adminuser-create-test-function-upload-zip-test-upload"></a>
@@ -10,7 +12,7 @@ In this step, you upload the deployment package using the AWS CLI\.
 
 At the command prompt, run the following Lambda CLI `create-function` command using the *adminuser* `profile`\. 
 
-You need to update the command by providing the \.zip file path and the execution role ARN\. The `--runtime` parameter value can be `nodejs8.10`, `nodejs6.10` or `nodejs4.3`, or `java8`, depending on the language you chose to author your code\.
+You need to update the command by providing the \.zip file path and the execution role ARN\. The `--runtime` parameter value can be `nodejs6.10`, `nodejs4.3`, or `java8`, depending on the language you chose to author your code\.
 
 ```
 $ aws lambda create-function \
@@ -45,6 +47,7 @@ Invoke the function manually using the sample event data\. We recommend that you
    ```
 
 1. Verify the results in the console\.
+
    + **Execution result** should be `Succeeded` with the following return value:
 
      ```
@@ -52,6 +55,7 @@ Invoke the function manually using the sample event data\. We recommend that you
        "greetings": "Hello first-name, last-name."
      }
      ```
+
    + Review the **Summary** and the **Log output** sections\.
 
 **To test the Lambda function \(AWS CLI\)**
diff --git a/doc_source/with-on-demand-custom-android-example.md b/doc_source/with-on-demand-custom-android-example.md
index dcda7ea..09ea069 100644
--- a/doc_source/with-on-demand-custom-android-example.md
+++ b/doc_source/with-on-demand-custom-android-example.md
@@ -1,13 +1,17 @@
 # Tutorial: Using AWS Lambda as Mobile Application Backend<a name="with-on-demand-custom-android-example"></a>
 
 In this tutorial, you create a simple Android mobile application\. The primary purpose of this tutorial is to show you how to hook up various components to enable an Android mobile application to invoke a Lambda function and process response\. The app itself is simple, we will assume following:
+
 + The sample mobile application will generate event data consisting of a name \(first name and last name\) in this format:
 
   ```
   { firstName: 'value1', lastName: 'value2' }  
   ```
+
 + You use Lambda function to process the event\. That is, the app \(using the AWS Mobile SDK for Android\) invokes a Lambda function \(`ExampleAndroidEventProcessor`\) by passing the event data to it\. The Lambda function in this tutorial does the following:
+
   + Logs incoming event data to Amazon CloudWatch Logs\.
+
   + Upon successful execution, returns a simple string in the response body\. Your mobile app displays the message using the Android `Toast` class\. 
 
 **Note**  
@@ -16,13 +20,19 @@ The way that the mobile application invokes a Lambda function as shown in this t
 ## Implementation Summary<a name="with-on-demand-custom-android-example-impl-summary"></a>
 
 The tutorial is divided into two main sections:
+
 +  First, you perform the necessary setup to create a Lambda function and test it by invoking it manually using sample event data \(you don't need mobile app to test your Lambda function\)\. 
+
 +  Second, you create an Amazon Cognito identity pool to manage authentication and permissions, and create the example Android application\. Then, you run the application and it invokes the Lambda function\. You can then verify the end\-to\-end experience\. In this tutorial example:
+
   + You use the Amazon Cognito service to manage user identities, authentication, and permissions\. The mobile application must have valid security credentials and permissions to invoke a Lambda function\. As part of the application setup, you create an Amazon Cognito identity pool to store user identities and define permissions\. For more information, see [Amazon Cognito](https://aws.amazon.com/cognito/)
+
   + This mobile application does not require its users to log in\. A mobile application can require its users to log in using public identity providers such as Amazon and Facebook\. The scope of this tutorial is limited and assumes that the mobile application users are unauthenticated\. Therefore, when you configure Amazon Cognito identity pool you will do the following:
+
     + Enable access for unauthenticated identities\.
 
       Amazon Cognito provides a unique identifier and temporary AWS credentials for these users to invoke the Lambda function\.
+
     + In the access permissions policy associated with the IAM role for unauthenticated users, add permissions to invoke the Lambda function\. An identity pool has two associated IAM roles, one for authenticated and one for unauthenticated application users\. In this example, Amazon Cognito assumes the role for unauthenticated users to obtain temporary credentials\. When the app uses these temporary credentials to invoke your Lambda function, it can do so only if has necessary permissions \(that is, credentials may be valid, but you also need permissions\)\. You do this by updating the permissions policy that Amazon Cognito uses to obtain the temporary credentials\.
 
 The following diagram illustrates the application flow:
diff --git a/doc_source/with-on-demand-custom-android.md b/doc_source/with-on-demand-custom-android.md
index fbae28b..544baab 100644
--- a/doc_source/with-on-demand-custom-android.md
+++ b/doc_source/with-on-demand-custom-android.md
@@ -11,12 +11,17 @@ Protect against Distributed Denial of Service attacks\.
 Provide a caching layer to cache response from your Lambda function\. 
 
 Note the following about how the mobile application and AWS Lambda integration works: 
-+ **Push\-event model** – This is a model \(see [Event Source Mapping](invocation-options.md#intro-invocation-modes)\), where the app invokes the Lambda function by passing the event data as parameter\. 
+
++ **Push\-event model** – This is a model \(see [Event Source Mapping](java-invocation-options.md#intro-invocation-modes)\), where the app invokes the Lambda function by passing the event data as parameter\. 
+
 + **Synchronous or asynchronous invocation** – The app can invoke the Lambda function and get a response back in real time by specifying `RequestResponse` as the invocation type \(or use the `Event` invocation type for asynchronous invocation\)\. For information about invocation types, see [Manage Permissions: Using a Lambda Function Policy](intro-permission-model.md#intro-permission-model-access-policy)\. 
+
 + **Event structure** – The event your Lambda function receives is defined by your application, and your Lambda function is the custom code written to process the specific event type\. 
 
 Note that there are two types of permissions policies that you work with in setting the end\-to\-end experience:
+
 + **Permissions for your Lambda function** – Regardless of what invokes a Lambda function, AWS Lambda executes the function by assuming the IAM role \(execution role\) that you specify at the time you create the Lambda function\. Using the permissions policy associated with this role, you grant your Lambda function the permissions that it needs\. For example, if your Lambda function needs to read an object, you grant permissions for the relevant Amazon S3 actions in the permissions policy\. For more information, see [Manage Permissions: Using an IAM Role \(Execution Role\)](intro-permission-model.md#lambda-intro-execution-role)\.
+
 + **Permissions for the mobile app to invoke your Lambda function** – The application must have valid security credentials and permissions to invoke a Lambda function\. For mobile applications, you can use the Amazon Cognito service to manage user identities, authentication, and permissions\. 
 
 The following diagram illustrates the application flow \(the illustration assumes a mobile app using AWS Mobile SDK for Android to make the API calls\):
diff --git a/doc_source/with-on-demand-https-example-configure-event-source.md b/doc_source/with-on-demand-https-example-configure-event-source.md
index c877b46..254d354 100644
--- a/doc_source/with-on-demand-https-example-configure-event-source.md
+++ b/doc_source/with-on-demand-https-example-configure-event-source.md
@@ -127,6 +127,7 @@ The following is an example response:
 ```
 
 Set `content-type` of the `POST` method response and integration response to JSON as follows: 
+
 + Run the following command to set the `POST` method response to JSON\. This is the response type that your API method returns\.
 
   ```
@@ -137,6 +138,7 @@ Set `content-type` of the `POST` method response and integration response to JSO
   --status-code 200 \
   --response-models "{\"application/json\": \"Empty\"}"
   ```
+
 + Run the following command to set the `POST` method integration response to JSON\. This is the response type that Lambda function returns\.
 
   ```
diff --git a/doc_source/with-on-demand-https-example-configure-event-source_1.md b/doc_source/with-on-demand-https-example-configure-event-source_1.md
index 9a8d6dd..10fecc6 100644
--- a/doc_source/with-on-demand-https-example-configure-event-source_1.md
+++ b/doc_source/with-on-demand-https-example-configure-event-source_1.md
@@ -1,9 +1,13 @@
-# Create a Simple Microservice using Lambda and API Gateway<a name="with-on-demand-https-example-configure-event-source_1"></a>
+# Step 3: Create a Simple Microservice using Lambda and API Gateway<a name="with-on-demand-https-example-configure-event-source_1"></a>
 
 In this exercise you will use the Lambda console to create a Lambda function \(`MyLambdaMicroservice`\), and an Amazon API Gateway endpoint to trigger that function\. You will be able to call the endpoint with any method \(`GET`, `POST`, `PATCH`, etc\.\) to trigger your Lambda function\. When the endpoint is called, the entire request will be passed through to your Lambda function\. Your function action will depend on the method you call your endpoint with: 
+
 + DELETE: delete an item from a DynamoDB table
+
 + GET: scan table and return all items
+
 + POST: Create an item
+
 + PUT: Update an item
 
 ## Next Step<a name="with-on-demand-https-example-exe-role-next-step_0"></a>
diff --git a/doc_source/with-on-demand-https-example-configure-event-source_2.md b/doc_source/with-on-demand-https-example-configure-event-source_2.md
index a561f34..095ca87 100644
--- a/doc_source/with-on-demand-https-example-configure-event-source_2.md
+++ b/doc_source/with-on-demand-https-example-configure-event-source_2.md
@@ -17,8 +17,11 @@ When you complete the wizard and create your function, Lambda automatically crea
 1. On the **Configure function** page, do the following:
 
    1. Review the preconfigured Lambda function configuration information, including:
+
       + **Runtime** is `Node.js 6.10`
+
       + Code authored in JavaScript is provided\. The code performs DynamoDB operations based on the method called and payload provided\.
+
       + **Handler** shows `index.handler`\. The format is: `filename.handler-function` 
 
    1. Enter the function name `MyLambdaMicroservice` in **Name**\.
diff --git a/doc_source/with-on-demand-https-example-create-iam-role.md b/doc_source/with-on-demand-https-example-create-iam-role.md
index 183c94c..a53cdf0 100644
--- a/doc_source/with-on-demand-https-example-create-iam-role.md
+++ b/doc_source/with-on-demand-https-example-create-iam-role.md
@@ -1,6 +1,7 @@
 # Step 2\.2: Create the Execution Role \(IAM Role\)<a name="with-on-demand-https-example-create-iam-role"></a>
 
 In this section, you create an IAM role using the following predefined role type:
+
 + AWS service role of the type **AWS Lambda** – This role grants AWS Lambda permissions to assume the role\. 
 
  For more information about IAM roles, see [IAM Roles](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) in the *IAM User Guide*\. Use the following procedure to create the IAM role\.
@@ -10,8 +11,11 @@ In this section, you create an IAM role using the following predefined role type
 1. Sign in to the AWS Management Console and open the IAM console at [https://console\.aws\.amazon\.com/iam/](https://console.aws.amazon.com/iam/)\.
 
 1. Follow the steps in [Creating a Role to Delegate Permissions to an AWS Service](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-service.html) in the *IAM User Guide* to create an IAM role \(execution role\)\. As you follow the steps to create a role, note the following:
+
    + In **Role Name**, use a name that is unique within your AWS account \(for example, **lambda\-gateway\-execution\-role**\)\. 
+
    + In **Select Role Type**, choose **AWS Service Roles**, and then choose **AWS Lambda**\. This grants the AWS Lambda service permissions to assume the role\.
+
    + You create an IAM role without attaching a permissions policy in the console\. After you create the role, you update the role, and then attach the following permissions policy to the role\.
 
    ```
diff --git a/doc_source/with-on-demand-https-example-create-test-manually.md b/doc_source/with-on-demand-https-example-create-test-manually.md
index c795748..de0891b 100644
--- a/doc_source/with-on-demand-https-example-create-test-manually.md
+++ b/doc_source/with-on-demand-https-example-create-test-manually.md
@@ -1,11 +1,14 @@
 # Step 2: Create a Lambda Function and Test It Manually<a name="with-on-demand-https-example-create-test-manually"></a>
 
 In this section, you do the following:
+
 + Create a Lambda function deployment package using the sample code provided\.
+
 + Create an IAM role \(execution role\)\. At the time you upload the deployment package, you need to specify an IAM role \(execution role\) that Lambda can assume to execute the function on your behalf\. 
+
 + Create the Lambda function and then test it manually\.
 
-**Topics**
+
 + [Step 2\.1: Create a Deployment Package](with-on-demand-https-example-deployment-pkg.md)
 + [Step 2\.2: Create the Execution Role \(IAM Role\)](with-on-demand-https-example-create-iam-role.md)
 + [Step 2\.3: Create the Lambda Function and Test It Manually](with-on-demand-https-example-upload-deployment-pkg_1.md)
\ No newline at end of file
diff --git a/doc_source/with-on-demand-https-example-prepare.md b/doc_source/with-on-demand-https-example-prepare.md
index 64d19e1..f78cdb5 100644
--- a/doc_source/with-on-demand-https-example-prepare.md
+++ b/doc_source/with-on-demand-https-example-prepare.md
@@ -1,7 +1,9 @@
 # Step 1: Prepare<a name="with-on-demand-https-example-prepare"></a>
 
 Make sure you have completed the following steps:
+
 + Signed up for an AWS account and created an administrator user in the account \(called **adminuser**\)\. For instructions, see [Set Up an AWS Account](setup.md)\. 
+
 + Installed and set up the AWS CLI\. For instructions, see [Set Up the AWS Command Line Interface \(AWS CLI\)](setup-awscli.md)\.
 
 ## Next Step<a name="with-on-demand-https-example-prepare-next-step"></a>
diff --git a/doc_source/with-on-demand-https-example-upload-deployment-pkg_1.md b/doc_source/with-on-demand-https-example-upload-deployment-pkg_1.md
index fcdb1e2..89be013 100644
--- a/doc_source/with-on-demand-https-example-upload-deployment-pkg_1.md
+++ b/doc_source/with-on-demand-https-example-upload-deployment-pkg_1.md
@@ -1,7 +1,9 @@
 # Step 2\.3: Create the Lambda Function and Test It Manually<a name="with-on-demand-https-example-upload-deployment-pkg_1"></a>
 
 In this section, you do the following:
+
 + Create a Lambda function by uploading the deployment package\. 
+
 + Test the Lambda function by invoking it manually and passing sample event data\. 
 
 ## Step 2\.3\.1: Create a Lambda Function \(Upload the Deployment Package\)<a name="walkthrough-on-demand-https-events-adminuser-create-test-function-upload-zip-test-upload_1"></a>
@@ -10,7 +12,7 @@ In this step, you upload the deployment package using the AWS CLI\.
 
 At the command prompt, run the following Lambda CLI `create-function` command using the **adminuser** profile\. 
 
-You need to update the command by providing the \.zip file path and the execution role ARN\. The `--runtime` parameter value can be `python3.6`, `python2.7`, `nodejs8.10`, `nodejs6.10` or `nodejs4.3`, or `java8`, depending on the language you used to author your code\.
+You need to update the command by providing the \.zip file path and the execution role ARN\. The `--runtime` parameter value can be `python3.6`, `python2.7`, `nodejs6.10`, `nodejs4.3`, or `java8`, depending on the language you used to author your code\.
 
 ```
 $ aws lambda create-function \
diff --git a/doc_source/with-on-demand-https-example.md b/doc_source/with-on-demand-https-example.md
index eb14375..79299e3 100644
--- a/doc_source/with-on-demand-https-example.md
+++ b/doc_source/with-on-demand-https-example.md
@@ -3,12 +3,17 @@
 In this example you create a simple API \(`DynamoDBOperations`\) using Amazon API Gateway\. An Amazon API Gateway is a collection of resources and methods\. For this tutorial, you create one resource \(`DynamoDBManager`\) and define one method \(`POST`\) on it\. The method is backed by a Lambda function \(`LambdaFunctionForAPIGateway`\)\. That is, when you invoke the method through an HTTPS endpoint, Amazon API Gateway invokes the Lambda function\.
 
 The `POST` method on the `DynamoDBManager` resource supports the following DynamoDB operations:
+
 + Create, update, and delete an item\.
+
 + Read an item\.
+
 + Scan an item\.
+
 + Other operations \(echo, ping\), not related to DynamoDB, that you can use for testing\.
 
 The request payload you send in the `POST` request identifies the DynamoDB operation and provides necessary data\. For example: 
+
 + The following is a sample request payload for a DynamoDB put item operation:
 
   ```
@@ -23,6 +28,7 @@ The request payload you send in the `POST` request identifies the DynamoDB opera
       }
   }
   ```
+
 + The following is a sample request payload for a DynamoDB read item operation:
 
   ```
@@ -36,7 +42,8 @@ The request payload you send in the `POST` request identifies the DynamoDB opera
       }
   }
   ```
-+ The following is a sample request payload for an `echo` operation\. You send an HTTPS PUT request to the endpoint, using the following data in the request body\. 
+
++ The following is a sample request payload for a the `echo` operation\. You will then send HTTPS PUT request to the endpoint, using the following data in the request body\. 
 
   ```
   {
diff --git a/doc_source/with-on-demand-https.md b/doc_source/with-on-demand-https.md
index 02f4f43..f27c239 100644
--- a/doc_source/with-on-demand-https.md
+++ b/doc_source/with-on-demand-https.md
@@ -1,19 +1,27 @@
 # Using AWS Lambda with Amazon API Gateway \(On\-Demand Over HTTPS\)<a name="with-on-demand-https"></a>
 
-You can invoke AWS Lambda functions over HTTPS\. You can do this by defining a custom REST API and endpoint using [Amazon API Gateway](https://aws.amazon.com/api-gateway/), and then mapping individual methods, such as `GET` and `PUT`, to specific Lambda functions\. Alternatively, you could add a special method named ANY to map all supported methods \(`GET`, `POST`, `PATCH`, `DELETE`\) to your Lambda function\. When you send an HTTPS request to the API endpoint, the Amazon API Gateway service invokes the corresponding Lambda function\. For more information about the `ANY` method, see [Create a Simple Microservice using Lambda and API Gateway](with-on-demand-https-example-configure-event-source_1.md)\.
+You can invoke AWS Lambda functions over HTTPS\. You can do this by defining a custom REST API and endpoint using [Amazon API Gateway](https://aws.amazon.com/api-gateway/), and then mapping individual methods, such as `GET` and `PUT`, to specific Lambda functions\. Alternatively, you could add a special method named ANY to map all supported methods \(`GET`, `POST`, `PATCH`, `DELETE`\) to your Lambda function\. When you send an HTTPS request to the API endpoint, the Amazon API Gateway service invokes the corresponding Lambda function\. For more information about the `ANY` method, see [Step 3: Create a Simple Microservice using Lambda and API Gateway](with-on-demand-https-example-configure-event-source_1.md)\.
 
  Amazon API Gateway also adds a layer between your application users and your app logic that enables the following: 
+
 + Ability to throttle individual users or requests\. 
+
 + Protect against Distributed Denial of Service attacks\.
+
 + Provide a caching layer to cache response from your Lambda function\. 
 
 Note the following about how the Amazon API Gateway and AWS Lambda integration works:
-+ **Push\-event model** – This is a model \(see [Event Source Mapping](invocation-options.md#intro-invocation-modes)\), where Amazon API Gateway invokes the Lambda function by passing data in the request body as parameter to the Lambda function\. 
-+ **Synchronous invocation** – The Amazon API Gateway can invoke the Lambda function and get a response back in real time by specifying `RequestResponse` as the invocation type\. For information about invocation types, see [Invocation Types](invocation-options.md)\. 
+
++ **Push\-event model** – This is a model \(see [Event Source Mapping](java-invocation-options.md#intro-invocation-modes)\), where Amazon API Gateway invokes the Lambda function by passing data in the request body as parameter to the Lambda function\. 
+
++ **Synchronous invocation** – The Amazon API Gateway can invoke the Lambda function and get a response back in real time by specifying `RequestResponse` as the invocation type\. For information about invocation types, see [Invocation Types](java-invocation-options.md)\. 
+
 + **Event structure** – The event your Lambda function receives is the body from the HTTPS request that Amazon API Gateway receives and your Lambda function is the custom code written to process the specific event type\. 
 
 Note that there are two types of permissions policies that you work with when you set up the end\-to\-end experience:
+
 + **Permissions for your Lambda function** – Regardless of what invokes a Lambda function, AWS Lambda executes the function by assuming the IAM role \(execution role\) that you specify at the time you create the Lambda function\. Using the permissions policy associated with this role, you grant your Lambda function the permissions that it needs\. For example, if your Lambda function needs to read an object, you grant permissions for the relevant Amazon S3 actions in the permissions policy\. For more information, see [Manage Permissions: Using an IAM Role \(Execution Role\)](intro-permission-model.md#lambda-intro-execution-role)\.
+
 + **Permission for Amazon API Gateway to invoke your Lambda function** – Amazon API Gateway cannot invoke your Lambda function without your permission\. You grant this permission via the permission policy associated with the Lambda function\.
 
 For a tutorial that walks you through an example setup, see [Using AWS Lambda with Amazon API Gateway \(On\-Demand Over HTTPS\)](with-on-demand-https-example.md)\.
\ No newline at end of file
diff --git a/doc_source/with-ondemand-android-mobile-create-app.md b/doc_source/with-ondemand-android-mobile-create-app.md
index d0c1089..0db8137 100644
--- a/doc_source/with-ondemand-android-mobile-create-app.md
+++ b/doc_source/with-ondemand-android-mobile-create-app.md
@@ -5,7 +5,9 @@ Now you can create a simple Android mobile application that generates events and
 The following instructions have been verified using Android studio\.
 
 1. Create a new Android project called `AndroidEventGenerator` using the following configuration:
+
    + Select the **Phone and Tablet** platform\.
+
    + Choose **Blank Activity**\.
 
 1. In the build\.gradle \(`Module:app`\) file, add the following in the `dependencies` section:
@@ -33,6 +35,7 @@ The following instructions have been verified using Android studio\.
    ```
 
 1. In the `package` section, add the following two classes \(`RequestClass` and `ResponseClass`\)\. Note that the POJO is same as the POJO you created in your Lambda function in the preceding section\.
+
    + `RequestClass`\. The instances of this class act as the POJO \(Plain Old Java Object\) for event data which consists of first and last name\. If you are using Java example for your Lambda function you created in the preceding section, this POJO is same as the POJO you created in your Lambda function code\.
 
      ```
@@ -66,6 +69,7 @@ The following instructions have been verified using Android studio\.
          }
      }
      ```
+
    + `ResponseClass`
 
      ```
@@ -154,5 +158,7 @@ The `@LambdaFunction` annotation in the code maps the specific client method to
    ```
 
 1. Run the code and verify it as follows:
+
    + The `Toast.makeText()` displays the response returned\.
+
    + Verify that CloudWatch Logs shows the log created by the Lambda function\. It should show the event data \(first name and last name\)\. You can also verify this in the AWS Lambda console\.
\ No newline at end of file
diff --git a/doc_source/with-s3-example-configure-event-source.md b/doc_source/with-s3-example-configure-event-source.md
index 3c02786..1f70acd 100644
--- a/doc_source/with-s3-example-configure-event-source.md
+++ b/doc_source/with-s3-example-configure-event-source.md
@@ -1,15 +1,21 @@
 # Step 3: Add an Event Source \(Configure Amazon S3 to Publish Events\)<a name="with-s3-example-configure-event-source"></a>
 
 In this step, you add the remaining configuration so that Amazon S3 can publish object\-created events to AWS Lambda and invoke your Lambda function\. You do the following in this step:
+
 + Add permissions to the Lambda function access policy to allow Amazon S3 to invoke the function\.
+
 + Add notification configuration to your source bucket\. In the notification configuration, you provide the following:
+
   + Event type for which you want Amazon S3 to publish events\. For this tutorial, you specify the `s3:ObjectCreated:*` event type so that Amazon S3 publishes events when objects are created\.
+
   + Lambda function to invoke\.
 
 ## Step 3\.1: Add Permissions to the Lambda Function's Access Permissions Policy<a name="with-s3-example-configure-event-source-add-permission"></a>
 
 1. Run the following Lambda CLI `add-permission` command to grant Amazon S3 service principal \(`s3.amazonaws.com`\) permissions to perform the `lambda:InvokeFunction` action\. Note that permission is granted to Amazon S3 to invoke the function only if the following conditions are met:
+
    + An object\-created event is detected on a specific bucket\.
+
    + The bucket is owned by a specific AWS account\. If a bucket owner deletes a bucket, some other AWS account can create a bucket with the same name\. This condition ensures that only a specific AWS account can invoke your Lambda function\.
 
    ```
@@ -35,7 +41,9 @@ In this step, you add the remaining configuration so that Amazon S3 can publish
 ## Step 3\.2: Configure Notification on the Bucket<a name="with-s3-example-configure-event-source-attach-notification-configuration"></a>
 
 Add notification configuration on the source bucket to request Amazon S3 to publish object\-created events to Lambda\. In the configuration, you specify the following:
+
 + Event type – For this tutorial, select the `ObjectCreated (All)` Amazon S3 event type\.
+
 + Lambda function – This is your Lambda function that you want Amazon S3 to invoke\. 
 
 For instructions on adding notification configuration to a bucket, see [Enabling Event Notifications](http://docs.aws.amazon.com/AmazonS3/latest/user-guide/SettingBucketNotifications.html) in the *Amazon Simple Storage Service Console User Guide*\.
diff --git a/doc_source/with-s3-example-create-iam-role.md b/doc_source/with-s3-example-create-iam-role.md
index 16fba4a..05d4161 100644
--- a/doc_source/with-s3-example-create-iam-role.md
+++ b/doc_source/with-s3-example-create-iam-role.md
@@ -1,8 +1,11 @@
 # Step 2\.2: Create the Execution Role \(IAM Role\)<a name="with-s3-example-create-iam-role"></a>
 
 In this section, you create an IAM role using the following predefined role type and access permissions policy:
+
 + AWS service role of the type **AWS Lambda** – This role grants AWS Lambda permissions to assume the role\. 
+
 + **AWSLambdaExecute** access permissions policy that you attach to the role\. 
+
 + Add a custom policy which allocates permissions for you to add objects to your Amazon S3 bucket\. For more information, see [Creating a Role to Delegate Permissions to an AWS Service](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-service.html) in the *IAM User Guide* to create an IAM role \(execution role\)\. 
 
  For more information about IAM roles, see [IAM Roles](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) in the *IAM User Guide*\. Use the following procedure to create the IAM role\.
diff --git a/doc_source/with-s3-example-create-test-manually.md b/doc_source/with-s3-example-create-test-manually.md
index ad426d8..04fadf7 100644
--- a/doc_source/with-s3-example-create-test-manually.md
+++ b/doc_source/with-s3-example-create-test-manually.md
@@ -1,13 +1,16 @@
 # Step 2: Create a Lambda Function and Invoke It Manually \(Using Sample Event Data\)<a name="with-s3-example-create-test-manually"></a>
 
 In this section, you do the following:
+
 + Create a Lambda function deployment package using the sample code provided\.
 **Note**  
 To see more examples of using other AWS services within your function, including calling other Lambda functions, see [AWS SDK for JavaScript](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/frames.html)
+
 + Create an IAM role \(execution role\)\. At the time you upload the deployment package, you need to specify an IAM role \(execution role\) that Lambda can assume to execute the function on your behalf\. 
+
 + Create the Lambda function by uploading the deployment package, and then test it by invoking it manually using sample Amazon S3 event data\.
 
-**Topics**
+
 + [Step 2\.1: Create a Deployment Package](with-s3-example-deployment-pkg.md)
 + [Step 2\.2: Create the Execution Role \(IAM Role\)](with-s3-example-create-iam-role.md)
 + [Step 2\.3: Create the Lambda Function and Test It Manually](with-s3-example-upload-deployment-pkg.md)
\ No newline at end of file
diff --git a/doc_source/with-s3-example-deployment-pkg.md b/doc_source/with-s3-example-deployment-pkg.md
index b7a7ede..069890a 100644
--- a/doc_source/with-s3-example-deployment-pkg.md
+++ b/doc_source/with-s3-example-deployment-pkg.md
@@ -11,8 +11,11 @@ The deployment package is a \.zip file containing your Lambda function code and
 1. Install the Node\.js platform\. For more information, see the [Node\.js](https://nodejs.org/) website\.
 
 1. Install dependencies\. The code examples use the following libraries:
+
    + AWS SDK for JavaScript in Node\.js
+
    + gm, GraphicsMagick for node\.js
+
    + Async utility module
 
    The AWS Lambda runtime already has the AWS SDK for JavaScript in Node\.js, so you only need to install the other libraries\. Open a command prompt, navigate to the `examplefolder`, and install the libraries using the `npm` command, which is part of Node\.js\.
@@ -130,8 +133,11 @@ The deployment package is a \.zip file containing your Lambda function code and
 The code sample is compliant with the Node\.js runtimes v6\.10 or v4\.3\. For more information, see [Programming Model\(Node\.js\)](programming-model.md)
 
 1. Review the preceding code and note the following:
+
    + The function knows the source bucket name and the key name of the object from the event data it receives as parameters\. If the object is a \.jpg, the code creates a thumbnail and saves it to the target bucket\. 
+
    + The code assumes that the destination bucket exists and its name is a concatenation of the source bucket name followed by the string `resized`\. For example, if the source bucket identified in the event data is `examplebucket`, the code assumes you have an `examplebucketresized` destination bucket\.
+
    + For the thumbnail it creates, the code derives its key name as the concatenation of the string `resized-` followed by the source object key name\. For example, if the source object key is `sample.jpg`, the code creates a thumbnail object that has the key `resized-sample.jpg`\.
 
 1. Save the file as `CreateThumbnail.js` in `examplefolder`\. After you complete this step, you will have the following folder structure:
@@ -287,7 +293,9 @@ public class S3EventProcessorCreateThumbnail implements
 Amazon S3 invokes your Lambda function using the `Event` invocation type, where AWS Lambda executes the code asynchronously\. What you return does not matter\. However, in this case we are implementing an interface that requires us to specify a return type, so in this example the handler uses `String` as the return type\. 
 
 Using the preceding code \(in a file named `S3EventProcessorCreateThumbnail.java`\), create a deployment package\. Make sure that you add the following dependencies: 
+
 + `aws-lambda-java-core `
+
 + `aws-lambda-java-events` 
 
 These can be found at [aws\-lambda\-java\-libs](https://github.com/aws/aws-lambda-java-libs)\.
@@ -384,7 +392,7 @@ AWS Lambda includes the AWS SDK for Python \(Boto 3\), so you don't need to incl
 
    `zip -r9 ~/CreateThumbnail.zip * `
 **Note**  
-To include all hidden files, use the following option: `zip -r9 ~/CreateThumbnail.zip `
+To include all hidden files, use the following option: `zip -r9 ~/CreateThumbnail.zip .`
 
 1. Add your python code to the \.zip file
 
diff --git a/doc_source/with-s3-example-prepare.md b/doc_source/with-s3-example-prepare.md
index 16a5f77..f804126 100644
--- a/doc_source/with-s3-example-prepare.md
+++ b/doc_source/with-s3-example-prepare.md
@@ -1,13 +1,17 @@
 # Step 1: Prepare<a name="with-s3-example-prepare"></a>
 
 In this section, you do the following:
+
 + Sign up for an AWS account and set up the AWS CLI\. 
+
 + Create two buckets \(*source* and `sourceresized` bucket\) with a sample \.jpg object \(`HappyFace.jpg`\) in the source bucket\. For instructions, see the following procedure\. 
 
 ## Step 1\.1: Sign Up for AWS and Set Up the AWS CLI<a name="with-s3-example-prepare-setup-cli"></a>
 
 Make sure you have completed the following steps:
+
 + Signed up for an AWS account and created an administrator user in the account \(called **adminuser**\)\. For instructions, see [Set Up an AWS Account](setup.md)\. 
+
 + Installed and set up the AWS CLI\. For instructions, see [Set Up the AWS Command Line Interface \(AWS CLI\)](setup-awscli.md)\.
 
 ## Step 1\.2: Create Buckets and Upload a Sample Object<a name="with-s3-example-prepare-create-buckets"></a>
diff --git a/doc_source/with-s3-example-upload-deployment-pkg.md b/doc_source/with-s3-example-upload-deployment-pkg.md
index 3309ab9..0a0c87d 100644
--- a/doc_source/with-s3-example-upload-deployment-pkg.md
+++ b/doc_source/with-s3-example-upload-deployment-pkg.md
@@ -1,14 +1,16 @@
 # Step 2\.3: Create the Lambda Function and Test It Manually<a name="with-s3-example-upload-deployment-pkg"></a>
 
 In this section, you do the following:
+
 + Create a Lambda function by uploading the deployment package\. 
+
 + Test the Lambda function by invoking it manually and passing sample Amazon S3 event data as a parameter\. 
 
 ## Step 2\.3\.1: Create the Lambda Function \(Upload the Deployment Package\)<a name="walkthrough-s3-events-adminuser-create-test-function-upload-zip-test-upload"></a>
 
 In this step, you upload the deployment package using the AWS CLI\.
 
-1. At the command prompt, run the following Lambda AWS CLI `create-function` command using the `adminuser` as the `--profile`\. For more information on setting this up, see [Configuring the AWS CLI](http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html)\. You need to update the command by providing the \.zip file path and the execution role ARN\. For the runtime parameter, choose between `nodejs8.10`, `nodejs6.10` or `nodejs4.3`, `python3.6`, `python2.7` or `java8`, depending on the code sample you when you created your deployment package\.
+1. At the command prompt, run the following Lambda AWS CLI `create-function` command using the `adminuser` as the `--profile`\. For more information on setting this up, see [Configuring the AWS CLI](http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html)\. You need to update the command by providing the \.zip file path and the execution role ARN\. For the runtime parameter, choose between `nodejs6.10`, `nodejs4.3`, `python3.6`, `python2.7` or `java8`, depending on the code sample you when you created your deployment package\.
 
    ```
    $ aws lambda create-function \
@@ -53,7 +55,9 @@ In this step, you invoke the Lambda function manually using sample Amazon S3 eve
 1. Follow the steps in the Getting Started to create and invoke the Lambda function at [Invoke the Lambda Function Manually and Verify Results, Logs, and Metrics](get-started-create-function.md#get-started-invoke-manually)\. For the sample event for testing, choose **S3 Put** in **Sample event template**\. 
 
 1. Verify that the thumbnail was created in the target bucket and monitor the activity of your Lambda function in the AWS Lambda console as follows:
+
    + The AWS Lambda console shows a graphical representation of some of the CloudWatch metrics in the **Cloudwatch Metrics at a glance** section for your function\.
+
    +  For each graph, you can also click the **logs** link to view the CloudWatch Logs directly\.
 
 **To test the Lambda function \(AWS CLI\)**
@@ -116,7 +120,9 @@ In this step, you invoke the Lambda function manually using sample Amazon S3 eve
 You are able to invoke this function because you are using your own credentials to invoke your own function\. In the next section, you configure Amazon S3 to invoke this function on your behalf, which requires you to add permissions to the access policy associated with your Lambda function to grant Amazon S3 permissions to invoke your function\.
 
 1. Verify that the thumbnail was created in the target bucket and monitor the activity of your Lambda function in the AWS Lambda console as follows:
+
    + The AWS Lambda console shows a graphical representation of some of the CloudWatch metrics in the **Cloudwatch Metrics at a glance** section for your function\.
+
    +  For each graph, you can also click the **logs** link to view the CloudWatch Logs directly\.
 
 ## Next Step<a name="with-s3-example-upload-deployment-pkg-next-step"></a>
diff --git a/doc_source/with-s3-example.md b/doc_source/with-s3-example.md
index 77d6964..0449e71 100644
--- a/doc_source/with-s3-example.md
+++ b/doc_source/with-s3-example.md
@@ -3,7 +3,7 @@
 Suppose you want to create a thumbnail for each image \(\.jpg and \.png objects\) that is uploaded to a bucket\. You can create a Lambda function \(`CreateThumbnail`\) that Amazon S3 can invoke when objects are created\. Then, the Lambda function can read the image object from the *source* bucket and create a thumbnail image target bucket \(in this tutorial, it's called the `sourceresized` bucket\)\.
 
 **Important**  
-The following tutorial assumes you are using two buckets, one for source and for target\. If you use the same bucket as the source and the target, each thumbnail uploaded to the source bucket triggers another object\-created event, which then invokes the Lambda function again, creating an unwanted recursion\. However, you can create a folder within the *source* bucket to create a unique endpoint for your target\. If you choose to do that, update the sample below\. 
+You must use two buckets\. If you use the same bucket as the source and the target, each thumbnail uploaded to the source bucket triggers another object\-created event, which then invokes the Lambda function again, creating an unwanted recursion\. 
 
 ## Implementation Summary<a name="with-s3-example-impl-summary"></a>
 
@@ -26,23 +26,31 @@ Note that upon completing this tutorial, you will have the following Amazon S3,
 ![\[Image NOT FOUND\]](http://docs.aws.amazon.com/lambda/latest/dg/images/s3-admin-iser-walkthrough-10.png)
 
 In Lambda:
+
 + A Lambda function\.
+
 + An access permissions policy associated with your Lambda function – You grant Amazon S3 permissions to invoke the Lambda function using this permissions policy\. You will also restrict the permissions so that Amazon S3 can invoke the Lambda function only for object\-created events from a specific bucket that is owned by a specific AWS account\. 
 **Note**  
 It is possible for an AWS account to delete a bucket and some other AWS account to later create a bucket with the same name\. The additional conditions ensure that Amazon S3 can invoke the Lambda function only if Amazon S3 detects object\-created events from a specific bucket owned by a specific AWS account\. 
 
 In IAM:
+
 + Administrator user – Called **adminuser**\. Using root credentials of an AWS account is not recommended\. Instead, use the **adminuser** credentials to perform the steps in this tutorial\. 
 **Note**  
 If you have not already created the `adminuser` profile, see [Set Up the AWS Command Line Interface \(AWS CLI\)](setup-awscli.md)\.
+
 + An IAM role \(execution role\) – You grant permissions that your Lambda function needs through the permissions policy associated with this role\. 
 
 In Amazon S3:
+
 + Two buckets named *source* and `sourceresized`\. Note that *source* is a placeholder name and you need to replace it with your actual bucket name\. For example, if you have a bucket named `example` as your source, you will create `exampleresized` as the target bucket\.
+
 + Notification configuration on the source bucket – You add notification configuration on your source bucket identifying the type of events \(object\-created events\) you want Amazon S3 to publish to AWS Lambda and the Lambda function to invoke\. For more information about the Amazon S3 notification feature, see [Setting Up Notification of Bucket Events](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in *Amazon Simple Storage Service Developer Guide*\.\.
 
 Now you are ready to start the tutorial\. Note that after the initial preparation, the tutorial is divided into two main sections:
+
 + First, you complete the necessary setup steps to create a Lambda function and invoke it manually using Amazon S3 sample event data\. This intermediate testing verifies that the function works\.
+
 + Second, you add notification configuration to your source bucket so that Amazon S3 can invoke your Lambda function when it detects object\-created events\. 
 
 ## Next Step<a name="with-s3-example-impl-summary-next-step"></a>
diff --git a/doc_source/with-s3.md b/doc_source/with-s3.md
index b992dbf..750bf51 100644
--- a/doc_source/with-s3.md
+++ b/doc_source/with-s3.md
@@ -3,12 +3,17 @@
 Amazon S3 can publish events \(for example, when an object is created in a bucket\) to AWS Lambda and invoke your Lambda function by passing the event data as a parameter\. This integration enables you to write Lambda functions that process Amazon S3 events\. In Amazon S3, you add bucket notification configuration that identifies the type of event that you want Amazon S3 to publish and the Lambda function that you want to invoke\. 
 
 Note the following about how the Amazon S3 and AWS Lambda integration works:
-+ **Non\-stream based \(async\) model** – This is a model \(see [Event Source Mapping](invocation-options.md#intro-invocation-modes)\), where Amazon S3 monitors a bucket and invokes the Lambda function by passing the event data as a parameter\. In a push model, you maintain event source mapping within Amazon S3 using the bucket notification configuration\. In the configuration, you specify the event types that you want Amazon S3 to monitor and which AWS Lambda function you want Amazon S3 to invoke\. For more information, see [Configuring Amazon S3 Event Notifications](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon Simple Storage Service Developer Guide*\.
-+ **Asynchronous invocation** – AWS Lambda invokes a Lambda function using the `Event` invocation type \(asynchronous invocation\)\. For more information about invocation types, see [Invocation Types](invocation-options.md)\. 
+
++ **Non\-stream based \(async\) model** – This is a model \(see [Event Source Mapping](java-invocation-options.md#intro-invocation-modes)\), where Amazon S3 monitors a bucket and invokes the Lambda function by passing the event data as a parameter\. In a push model, you maintain event source mapping within Amazon S3 using the bucket notification configuration\. In the configuration, you specify the event types that you want Amazon S3 to monitor and which AWS Lambda function you want Amazon S3 to invoke\. For more information, see [Configuring Amazon S3 Event Notifications](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon Simple Storage Service Developer Guide*\.
+
++ **Asynchronous invocation** – AWS Lambda invokes a Lambda function using the `Event` invocation type \(asynchronous invocation\)\. For more information about invocation types, see [Invocation Types](java-invocation-options.md)\. 
+
 + **Event structure** – The event your Lambda function receives is for a single object and it provides information, such as the bucket name and object key name\. 
 
 Note that there are two types of permissions policies that you work with when you set up the end\-to\-end experience:
+
 + **Permissions for your Lambda function** – Regardless of what invokes a Lambda function, AWS Lambda executes the function by assuming the IAM role \(execution role\) that you specify at the time you create the Lambda function\. Using the permissions policy associated with this role, you grant your Lambda function the permissions that it needs\. For example, if your Lambda function needs to read an object, you grant permissions for the relevant Amazon S3 actions in the permissions policy\. For more information, see [Manage Permissions: Using an IAM Role \(Execution Role\)](intro-permission-model.md#lambda-intro-execution-role)\.
+
 + **Permissions for Amazon S3 to invoke your Lambda function** – Amazon S3 cannot invoke your Lambda function without your permission\. You grant this permission via the permissions policy associated with the Lambda function\.
 
 The following diagram summarizes the flow: 
diff --git a/doc_source/with-scheduled-events.md b/doc_source/with-scheduled-events.md
index bfd7e1a..573a60b 100644
--- a/doc_source/with-scheduled-events.md
+++ b/doc_source/with-scheduled-events.md
@@ -2,7 +2,7 @@
 
 You can create a Lambda function and direct AWS Lambda to execute it on a regular schedule\. You can specify a fixed rate \(for example, execute a Lambda function every hour or 15 minutes\), or you can specify a Cron expression\. For more information on expressions schedules, see [Schedule Expressions Using Rate or Cron](tutorial-scheduled-events-schedule-expressions.md)\. 
 
-This functionality is available when you create a Lambda function using the AWS Lambda console or the AWS CLI\. To configure it using the AWS CLI, see [Run an AWS Lambda Function on a Schedule Using the AWS CLI](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/RunLambdaSchedule.html)\. The console provides **CloudWatch Events** as an event source\. At the time of creating a Lambda function, you choose this event source and specify a time interval\. 
+This functionality is available when you create a Lambda function using the AWS Lambda console or the AWS CLI\. To configure it using the AWS CLI, see [Run an AWS Lambda Function on a Schedule Using the AWS CLI](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/RunLambdaSchedule.html)\. The console provides **cloudWatch Events** as an event source\. At the time of creating a Lambda function, you choose this event source and specify a time interval\. 
 
  If you have made any manual changes to the permissions on your function, you may need to reapply the scheduled event access to your function\. You can do that by using the following CLI command\. 
 
@@ -17,7 +17,7 @@ aws lambda add-permission \
 ```
 
 **Note**  
-Each AWS account can have up to 100 unique event sources of the **CloudWatch Events\- Schedule** source type\. Each of these can be the event source for up to five Lambda functions\. That is, you can have up to 500 Lambda functions that can be executing on a schedule in your AWS account\.
+Each AWS account can have up to 100 unique event sources of the **CloudWatch Events \- Schedule** source type\. Each of these can be the event source for up to five Lambda functions\. That is, you can have up to 500 Lambda functions that can be executing on a schedule in your AWS account\.
 
 The console also provides a blueprint \(**lambda\-canary**\) that uses the **CloudWatch Events \- Schedule** source type\. Using this blueprint, you can create a sample Lambda function and test this feature\. The example code that the blueprint provides checks for the presence of a specific webpage and specific text string on the webpage\. If either the webpage or the text string is not found, the Lambda function throws an error\. 
 
diff --git a/doc_source/with-scheduledevents-example.md b/doc_source/with-scheduledevents-example.md
index d2f8456..6555dff 100644
--- a/doc_source/with-scheduledevents-example.md
+++ b/doc_source/with-scheduledevents-example.md
@@ -1,10 +1,15 @@
 # Tutorial: Using AWS Lambda with Scheduled Events<a name="with-scheduledevents-example"></a>
 
 In this tutorial, you do the following:
+
 + Create a Lambda function using the **lambda\-canary** blueprint\. You configure the Lambda function to run every minute\. Note that if the function returns an error, AWS Lambda logs error metrics to CloudWatch\. 
+
 + Configure a CloudWatch alarm on the `Errors` metric of your Lambda function to post a message to your Amazon SNS topic when AWS Lambda emits error metrics to CloudWatch\. You subscribe to the Amazon SNS topics to get email notification\. In this tutorial, you do the following to set this up:
+
   + Create an Amazon SNS topic\.
+
   + Subscribe to the topic so you can get email notifications when a new message is posted to the topic\.
+
   + In Amazon CloudWatch, set an alarm on the `Errors` metric of your Lambda function to publish a message to your SNS topic when errors occur\.
 
 ## Next Step<a name="wt-scheduledevents-next-step"></a>
diff --git a/doc_source/with-sns-create-package.md b/doc_source/with-sns-create-package.md
index 0a4f273..c14a98d 100644
--- a/doc_source/with-sns-create-package.md
+++ b/doc_source/with-sns-create-package.md
@@ -18,7 +18,7 @@ From the **Filter View** list, choose the language you want to use for your Lamb
    };
    ```
 **Note**  
-The code sample is compliant with the Node\.js runtimes v4\.3 or higher\. For more information, see [Programming Model\(Node\.js\)](programming-model.md)
+The code sample is compliant with the Node\.js runtimes v6\.10 or v4\.3\. For more information, see [Programming Model\(Node\.js\)](programming-model.md)
 
 1. Save the file as ` index.js`\.
 
@@ -57,7 +57,9 @@ public class LogEvent implements RequestHandler<SNSEvent, Object> {
 ```
 
 Using the preceding code \(in a file named `LambdaWithSNS.java`\), create a deployment package\. Make sure that you add the following dependencies: 
+
 + `aws-lambda-java-core`
+
 + `aws-lambda-java-events` 
 
 For more information, see [Programming Model for Authoring Lambda Functions in Java](java-programming-model.md)\.
@@ -80,7 +82,7 @@ After you verify that your deployment package is created, go to the next step to
        "github.com/aws/aws-lambda-go/events”
    )
    
-   func handler(ctx context.Context, snsEvent events.SNSEvent) {
+   func handler(ctx context.Context, events.SNSEvent snsEvent) {
        for _, record := range snsEvent.Records {
            snsRecord := record.SNS
    
diff --git a/doc_source/with-sns-create-x-account-permissions.md b/doc_source/with-sns-create-x-account-permissions.md
index a5aba24..b2dcba8 100644
--- a/doc_source/with-sns-create-x-account-permissions.md
+++ b/doc_source/with-sns-create-x-account-permissions.md
@@ -11,7 +11,7 @@ In this section, you use CLI commands to set permissions across the Lambda funct
 
    Note the topic arn that is returned by the command\. You will need it when you add permissions to the Lambda function to subscribe to the topic\.
 
-1. From account B, create the Lambda function\. For the runtime parameter, select either `nodejs8.10`, `nodejs6.10` or `nodejs4.3`, `python3.6`, `python2.7` or `java8`, depending on the code sample you selected when you created your deployment package\.
+1. From account B, create the Lambda function\. For the runtime parameter, select either `nodejs6.10`, `nodejs4.3`, `python3.6`, `python2.7` or `java8`, depending on the code sample you selected when you created your deployment package\.
 
    ```
    aws lambda create-function \
diff --git a/doc_source/with-sns-example-create-iam-role.md b/doc_source/with-sns-example-create-iam-role.md
index e40b7e5..e6d6a7a 100644
--- a/doc_source/with-sns-example-create-iam-role.md
+++ b/doc_source/with-sns-example-create-iam-role.md
@@ -1,7 +1,9 @@
 # Step 2\.2: Create the Execution Role \(IAM Role\)<a name="with-sns-example-create-iam-role"></a>
 
 In this section, you create an IAM role using the following predefined role type and access policy:
+
 + AWS service role of the type **AWS Lambda** – This role grants AWS Lambda permissions to assume the role\. 
+
 + **AWSLambdaBasicExecutionRole** – This is the access permissions policy that you attach to the role\. 
 
  For more information about IAM roles, see [IAM Roles](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) in the *IAM User Guide*\. Use the following procedure to create the IAM role\.
@@ -11,8 +13,11 @@ In this section, you create an IAM role using the following predefined role type
 1. Sign in to the AWS Management Console and open the IAM console at [https://console\.aws\.amazon\.com/iam/](https://console.aws.amazon.com/iam/)\.
 
 1. Follow the steps in [Creating a Role to Delegate Permissions to an AWS Service](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-service.html) in the *IAM User Guide* to create an IAM role \(execution role\)\. As you follow the steps to create a role, note the following:
+
    + In **Role Name**, use a name that is unique within your AWS account \(for example, **lambda\-sns\-execution\-role**\)\. 
+
    + In **Select Role Type**, choose **AWS Service Roles**, and then choose **AWS Lambda**\. This grants the AWS Lambda service permissions to assume the role\.
+
    + In **Attach Policy**, choose **AWSLambdaBasicExecutionRole**\. The permissions in this policy are sufficient for the Lambda function in this tutorial\.
 
 1. Write down the role ARN\. You will need it in the next step when you create your Lambda function\.
\ No newline at end of file
diff --git a/doc_source/with-sns-example-create-test-function.md b/doc_source/with-sns-example-create-test-function.md
index 3d4c751..2439358 100644
--- a/doc_source/with-sns-example-create-test-function.md
+++ b/doc_source/with-sns-example-create-test-function.md
@@ -1,9 +1,11 @@
 # Step 2: Create a Lambda Function<a name="with-sns-example-create-test-function"></a>
 
 In this section, you do the following:
+
 + Create a Lambda function deployment package using the sample code provided\. The sample Lambda function code that you'll use to subscribe to an Amazon SNS topic is provided in various languages\. Select one of the languages and follow the corresponding instructions to create a deployment package\.
+
 + Create an IAM role \(execution role\)\. At the time you upload the deployment package, you need to specify an IAM role \(execution role\) that Lambda can assume to execute the function on your behalf\. 
 
-**Topics**
+
 + [Step 2\.1: Create a Lambda Function Deployment Package](with-sns-create-package.md)
 + [Step 2\.2: Create the Execution Role \(IAM Role\)](with-sns-example-create-iam-role.md)
\ No newline at end of file
diff --git a/doc_source/with-sns-example-prepare.md b/doc_source/with-sns-example-prepare.md
index a709329..de3273e 100644
--- a/doc_source/with-sns-example-prepare.md
+++ b/doc_source/with-sns-example-prepare.md
@@ -1,5 +1,7 @@
 # Step 1: Prepare<a name="with-sns-example-prepare"></a>
+
 + Sign up for an AWS account and create an administrator user in the account \(called **adminuser**\)\. 
+
 + Install and set up the AWS CLI\. 
 
 For instructions, see [Set Up an AWS Account](setup.md)\. 
diff --git a/doc_source/with-sns-example.md b/doc_source/with-sns-example.md
index 4b5cdc7..7df6fe0 100644
--- a/doc_source/with-sns-example.md
+++ b/doc_source/with-sns-example.md
@@ -3,8 +3,11 @@
  In this tutorial, you create a Lambda function in one AWS account to subscribe to an Amazon SNS topic in a separate AWS account\. 
 
  The tutorial is divided into three main sections: 
+
 +  First, you perform the necessary setup to create a Lambda function\. 
+
 + Second, you create an Amazon SNS topic in a separate AWS account\. 
+
 + Third, you grant permissions from each account in order for the Lambda function to subscribe to the Amazon SNS topic\. Then, you test the end\-to\-end setup\. 
 
 **Important**  
diff --git a/doc_source/with-sqs-configure-sqs.md b/doc_source/with-sqs-configure-sqs.md
deleted file mode 100644
index 2f37399..0000000
--- a/doc_source/with-sqs-configure-sqs.md
+++ /dev/null
@@ -1,62 +0,0 @@
-# Step 3: Add an Event Source \(Create an Amazon SQS Queue and Associate It with Your Lambda Function\)<a name="with-sqs-configure-sqs"></a>
-
-In this section, you do the following:
-+ Create an Amazon SQS queue\.
-+ Create an event source mapping in AWS Lambda\. This event source mapping associates the Amazon SQS queue with your Lambda function\. After you create this event source mapping, AWS Lambda starts polling the queue\.
-+ Test the end\-to\-end experience\. As you perform queue updates, Amazon Simple Queue Service writes messages to the queue\. AWS Lambda polls the queue, detects new records and executes your Lambda function on your behalf by passing events, in this case Amazon SQS messages, to the function\. 
-**Note**  
-**NOTE TO REVIEWERS: Please advise if this should be addressed and how:**If you have configured the following parameters, you can test them here\.  
-[Visibility Timeouts](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html)
-[Delay Queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-delay-queues.html)
-**Note**  
-The following example uses a role \(named \(`adminuser`\) with administrator privileges\. If you have not set this up, see [Step 1: Prepare](with-sqs-prepare.md)\. 
-
-## Step 3\.1: Create an Amazon SQS Queue<a name="with-sqs-create-queue"></a>
-
-Follow the procedure to create an Amazon SQS queue:
-
-1. Sign in to the AWS Management Console and open the Amazon SQS console at [https://console\.aws\.amazon\.com/sqs/](https://console.aws.amazon.com/sqs/)\.
-
-1. In the Amazon SQS console, create a queue\. 
-**Important**  
-You must create an Amazon SQS queue in the same region where you created the Lambda function\. This tutorial assumes the US East \(N\. Virginia\) region\. In addition, both the queue and the Lambda functions must belong to the same AWS account\.
-
-1. Write down the queue ARN\. You need this in the next step when you associate the queue with your Lambda function\.
-
-## Step 3\.2: Add an Event Source in AWS Lambda<a name="with-sqs-attach-notification-configuration"></a>
-
-Run the following AWS CLI `create-event-source-mapping` command\. After the command executes, note down the UUID\. You'll need this UUID to refer to the event source mapping in any commands, for example, when deleting the event source mapping\.
-
-```
-$ aws lambda create-event-source-mapping \
---region us-east-1 \
---function-name ProcessSQSMessage \
---event-source SQS-queue-arn \
---batch-size 100 \
---profile adminuser
-```
-
-**Note**  
- This creates a mapping between the specified Amazon SQS queue and the Lambda function\. 
-
-You can get the list of event source mappings by running the following command\.
-
-```
-$ aws lambda list-event-source-mappings \
---region us-east-1 \
---function-name ProcessSQSMessage \
---event-source SQS-queue-arn \
---profile adminuser
-```
-
-The list returns all of the event source mappings you created, and for each mapping it shows the `LastProcessingResult`, among other things\. This field is used to provide an informative message if there are any problems\. Values such as `No records processed` \(indicates that AWS Lambda has not started polling or that there are no records in the queue\) and `OK` \(indicates AWS Lambda successfully read records from the queue and invoked your Lambda function\) indicate that there no issues\. If there are issues, you receive an error message\.
-
-## Step 3\.3: Test the Setup<a name="with-sqs-final-integration-test-no-iam"></a>
-
-You're all done\! Now **adminuser** can test the setup as follows:
-
-1. In the Amazon SQS console, add, update, delete items to the table\. Amazon SQS writes records of these actions to the queue\.
-
-1. AWS Lambda polls the queue and when it detects updates, it invokes your Lambda function by passing in the event data it finds in the queue\.
-
-1. Your function executes and creates logs in Amazon CloudWatch\. The **adminuser** can also verify the logs reported in the Amazon CloudWatch console\.
\ No newline at end of file
diff --git a/doc_source/with-sqs-create-execution-role.md b/doc_source/with-sqs-create-execution-role.md
deleted file mode 100644
index 03d4303..0000000
--- a/doc_source/with-sqs-create-execution-role.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# Step 2\.2: Create the Execution Role \(IAM Role\)<a name="with-sqs-create-execution-role"></a>
-
-**Note**  
-MORE INFORMATION TO COME FROM Sarthak
-
-In order for AWS Lambda to poll, process and delete messages on the Amazon SQS queue you have configured, you need to set permissions for the following Amazon SQS actions:
-+ [ReceiveMessage](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_ReceiveMessage.html)
-+ [DeleteMessage](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_DeleteMessage.html)
-
-You can do this in either of the following two ways:
-+ **Identity\-based policy**: Add policies for `sqs:ReceiveMessage` and `sqs:DeleteMessage` to your function's execution role \(IAM role\)\. For more information, see [Customer Managed Policy Examples](access-control-identity-based.md#access-policy-examples-for-sdk-cli)
-+ **Resource\-based policy**: Use the [AddPermission](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_AddPermission.html) API on Amazon Simple Queue Service and do the following: 
-  + Specify `lambda.amazonaws.com ` as the principal in the `&AWSAccountID` field\.
-  + Specify `ReceiveMesage ` in an `&ActionName1` field\.
-  + Specify `DeleteMesage ` in an `&ActionName2` field\.
-
-## Next Step<a name="with-sqs-next-step-3"></a>
-
-[Step 2\.3: Create the Lambda Function and Test It Manually](with-sqs-create-function.md)
\ No newline at end of file
diff --git a/doc_source/with-sqs-create-function.md b/doc_source/with-sqs-create-function.md
deleted file mode 100644
index 6a98a46..0000000
--- a/doc_source/with-sqs-create-function.md
+++ /dev/null
@@ -1,144 +0,0 @@
-# Step 2\.3: Create the Lambda Function and Test It Manually<a name="with-sqs-create-function"></a>
-
-In this section, you do the following:
-+ Create a Lambda function by uploading the deployment package\. 
-+ Test the Lambda function by invoking it manually\. Instead of creating an event source, you use sample Amazon SQS message data\. 
-
-In the next section, you create an Amazon SQS queue and test the end\-to\-end experience\.
-
-## Step 2\.3\.1: Create a Lambda Function \(Upload the Deployment Package\)<a name="walkthrough-sqs-events-adminuser-create-test-function-upload-zip-test-upload"></a>
-
-In this step, you upload the deployment package using the AWS CLI\.
-
-At the command prompt, run the following Lambda CLI `create-function` command using the **adminuser** profile\. If you have not created this profile, see [Set Up an AWS Account](setup.md)
-
-You need to update the command by providing the \.zip file path and the execution role ARN\. 
-
-```
-$ aws lambda create-function \
---region us-east-1 \
---function-name ProcessSQSMessage \
---zip-file fileb://file-path/ProcessSQSMessage.zip \
---role role-arn \
---handler ProcessSQSMessage.lambda_handler \
---runtime runtime-value \
---profile adminuser
-```
-
-For more information, see [CreateFunction](API_CreateFunction.md)\. AWS Lambda creates the function and returns function configuration information\. 
-
-Optionally, you can upload the \.zip file to an Amazon S3 bucket in the same AWS region, and then specify the bucket and object name in the preceding command\. You need to replace the `--zip-file` parameter by the `--code` parameter, as shown following:
-
-```
---code S3Bucket=bucket-name,S3Key=zip-file-object-key
-```
-
-## Step 2\.3\.2: Test the Lambda Function \(Invoke Manually\)<a name="with-sqs-invoke-manually"></a>
-
-In this step, you invoke your Lambda function manually using the `invoke` AWS Lambda CLI command and the following sample Amazon Simple Queue Service event\.
-
-1. Copy the following JSON into a file and save it as `input.txt`\. 
-
-   ```
-   {
-     "messages": [
-       {
-         "messageId" : "MessageID_1",
-         "receiptHandle" : "MessageReceiptHandle",
-         "body" : "Message Body",
-         "md5OfBody" : "fce0ea8dd236ccb3ed9b37dae260836f",
-         "md5OfMessageAttributes" : "582c92c5c5b6ac403040a4f3ab3115c9",
-         "attributes" : {
-           "ApproximateReceiveCount" : "2",
-           "SentTimestamp" : "1520621625029",
-           "SenderId" : "AROAIWPX5BD2BHG722MW4:sender",
-           "ApproximateFirstReceiveTimestamp" : "1520621634884"
-         },
-         "messageAttributes" : {
-           "Attribute3" : {
-             "stringValue" : null,
-             "binaryValue" : "1100",
-             "stringListValues" : [ ],
-             "binaryListValues" : [ ],
-             "dataType" : "Binary"
-           },
-           "Attribute2" : {
-             "stringValue" : "123",
-             "binaryValue" : null,
-             "stringListValues" : [ ],
-             "binaryListValues" : [ ],
-             "dataType" : "Number"
-           },
-           "Attribute1" : {
-             "stringValue" : "AttributeValue1",
-             "binaryValue" : null,
-             "stringListValues" : [ ],
-             "binaryListValues" : [ ],
-             "dataType" : "String"
-           }
-         }
-       },
-       {
-         "messageId" : "MessageID_2",
-         "receiptHandle" : "MessageReceiptHandle",
-         "body" : "Message Body",
-         "md5OfBody" : "fce0ea8dd236ccb3ed9b37dae260836f",
-         "md5OfMessageAttributes" : "582c92c5c5b6ac403040a4f3ab3115c9",
-         "attributes" : {
-           "ApproximateReceiveCount" : "5",
-           "SentTimestamp" : "1520621625030",
-           "SenderId" : "AROAIWPX5BD2BHG722MW4:sender",
-           "ApproximateFirstReceiveTimestamp" : "1520621634900"
-         },
-         "messageAttributes" : {
-           "Attribute2" : {
-             "stringValue" : "123",
-             "binaryValue" : null,
-             "stringListValues" : [ ],
-             "binaryListValues" : [ ],
-             "dataType" : "Number"
-           }
-         }
-       },
-       {
-         "messageId" : "MessageID_2",
-         "receiptHandle" : "MessageReceiptHandle",
-         "body" : "Message Body",
-         "md5OfBody" : "fce0ea8dd236ccb3ed9b37dae260836f",
-         "md5OfMessageAttributes" : "582c92c5c5b6ac403040a4f3ab3115c9",
-         "attributes" : {
-           "ApproximateReceiveCount" : "5",
-           "SentTimestamp" : "1520621625030",
-           "SenderId" : "AROAIWPX5BD2BHG722MW4:sender",
-           "ApproximateFirstReceiveTimestamp" : "1520621634900"
-         },
-         "messageAttributes" : { }
-       }
-     ],
-     "queueUrl": "https://sqs.us-east-1.amazonaws.com/123456789012/MyQueue"
-   }
-   ```
-
-1. Execute the following `invoke` command\. 
-
-   ```
-   $ aws lambda invoke \
-   --invocation-type RequestResponse \
-   --function-name ProcessSQSMessage \
-   --region us-east-1 \
-   --payload file://file-path/input.txt \
-   --profile adminuser \
-   outputfile.txt
-   ```
-
-   Note that the `invoke` command specifies `RequestResponse` as the invocation type, which requests synchronous execution\. For more information, see [Invoke](API_Invoke.md)\. 
-
-1. Verify the output in the `outputfile.txt` file\.
-
-   You can monitor the activity of your Lambda function in the AWS Lambda console\. 
-   + The AWS Lambda console shows a graphical representation of some of the CloudWatch metrics in the **Cloudwatch Metrics at a glance** section for your function\. Sign in to the AWS Management Console at [https://console\.aws\.amazon\.com/](https://console.aws.amazon.com/)\.
-   +  For each graph you can also click the **logs** link to view the CloudWatch logs directly\.
-
-### Next Step<a name="with-sqs-manual-invoke-next-step"></a>
-
-[Step 3: Add an Event Source \(Create an Amazon SQS Queue and Associate It with Your Lambda Function\)](with-sqs-configure-sqs.md)
\ No newline at end of file
diff --git a/doc_source/with-sqs-create-package.md b/doc_source/with-sqs-create-package.md
deleted file mode 100644
index 3b0fc75..0000000
--- a/doc_source/with-sqs-create-package.md
+++ /dev/null
@@ -1,43 +0,0 @@
-# Step 2\.1: Create a Lambda Function Deployment Package<a name="with-sqs-create-package"></a>
-
-From the **Filter View** list, choose the language you want to use for your Lambda function\. The appropriate section appears with code and specific instructions for creating a deployment package\.
-
-## Java<a name="with-sqs-example-deployment-pkg-nodejs"></a>
-
-The following is example Java code that receives an Amazon SQS event message as input and processes it\. For illustration, the code writes some of the incoming event data to CloudWatch Logs\. 
-
- In the code, `handleRequest` is the handler\. The handler uses the predefined `SQSEvent` class that is defined in the `aws-lambda-java-events` library\. 
-
-```
-import com.amazonaws.services.lambda.runtime.Context;
-import com.amazonaws.services.lambda.runtime.RequestHandler;
-import com.amazonaws.services.lambda.runtime.events.SQSEvent;
-import com.amazonaws.services.lambda.runtime.events.SQSEvent.SQSEventRecord;
-
-        public class ProcessSQSEvents implements RequestHandler<SQSEvent, Void>{
-            @Override
-            public Void handleRequest(SQSEvent event, Context context)
-            {
-                for(SQSEventRecord rec : event.getRecords()) {
-                    System.out.println(new String(rec.getSQS().getBody());
-                }
-                return null;
-            }
-        }
-```
-
-If the handler returns normally without exceptions, Lambda considers the message processed successfully and begins reading new messages in the queue\. If the handler throws an exception, Lambda considers the input of messages as not processed and invokes the function with the same batch of messages\. 
-
-Using the preceding code \(in a file named `ProcessSQSMessage.java`\), create a deployment package\. Make sure that you add the following dependencies: 
-+ `aws-lambda-java-core`
-+ `aws-lambda-java-events` 
-
-For more information, see [Programming Model for Authoring Lambda Functions in Java](java-programming-model.md)\.
-
-Your deployment package can be a \.zip file or a standalone \.jar\. You can use any build and packaging tool you are familiar with to create a deployment package\. For examples of how to use the Maven build tool to create a standalone \.jar, see [Creating a \.jar Deployment Package Using Maven without any IDE \(Java\)](java-create-jar-pkg-maven-no-ide.md) and [Creating a \.jar Deployment Package Using Maven and Eclipse IDE \(Java\)](java-create-jar-pkg-maven-and-eclipse.md)\. For an example of how to use the Gradle build tool to create a \.zip file, see [Creating a \.zip Deployment Package \(Java\)](create-deployment-pkg-zip-java.md)\.
-
-After you verify that your deployment package is created, go to the next step to create an IAM role \(execution role\)\. You specify this role at the time you create your Lambda function\. 
-
-### Next Step<a name="sqs-create-deployment-pkg-nodejs-next-step"></a>
-
- [Step 2\.2: Create the Execution Role \(IAM Role\)](with-sqs-create-execution-role.md) 
\ No newline at end of file
diff --git a/doc_source/with-sqs-create-test-function.md b/doc_source/with-sqs-create-test-function.md
deleted file mode 100644
index e8fd138..0000000
--- a/doc_source/with-sqs-create-test-function.md
+++ /dev/null
@@ -1,13 +0,0 @@
-# Step 2: Create a Lambda Function and Invoke It Manually \(Using Sample Event Data\)<a name="with-sqs-create-test-function"></a>
-
-In this section, you do the following:
-+ Create a Lambda function deployment package using the sample code provided\. The sample Lambda function code that you'll use to process Amazon SQS messages is provided in in the Lambda\-supported runtimes\. Select one of the languages and follow the corresponding instructions to create a deployment package\.
-**Note**  
-To see more examples of using other AWS services within your function, including calling other Lambda functions, see [AWS SDK for JavaScript](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/frames.html)
-+ **Create an IAM role \(execution role\):** At the time you upload the deployment package, you need to specify an IAM execution role \([Manage Permissions: Using an IAM Role \(Execution Role\)](intro-permission-model.md#lambda-intro-execution-role)\. For example, AWS Lambda needs permissions for Amazon SQS actions so it can poll the queue and read messages\. You also need to grant AWS Lambda permissions to invoke your Lambda function\. The example Lambda function writes some of the event data to CloudWatch, so it needs permissions for necessary CloudWatch actions\. 
-+ **Create the Lambda function** by uploading the deployment package, and then test it by invoking it manually using sample Amazon SQS event data\. You provide both the deployment package and the IAM role at the time of creating a Lambda function\. You can also specify other configuration information, such as the function name, memory size, runtime environment to use, and the handler\. For more information about these parameters, see [CreateFunction](API_CreateFunction.md)\. After creating the Lambda function, you invoke it using sample Amazon Simple Queue Service event data\. 
-
-**Topics**
-+ [Step 2\.1: Create a Lambda Function Deployment Package](with-sqs-create-package.md)
-+ [Step 2\.2: Create the Execution Role \(IAM Role\)](with-sqs-create-execution-role.md)
-+ [Step 2\.3: Create the Lambda Function and Test It Manually](with-sqs-create-function.md)
\ No newline at end of file
diff --git a/doc_source/with-sqs-example.md b/doc_source/with-sqs-example.md
deleted file mode 100644
index 6506bec..0000000
--- a/doc_source/with-sqs-example.md
+++ /dev/null
@@ -1,14 +0,0 @@
-# Tutorial: Using AWS Lambda with Amazon Simple Queue Service<a name="with-sqs-example"></a>
-
- In this tutorial, you create a Lambda function to consume messages from an [Amazon SQS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/Welcome.html) queue\. 
-
- The tutorial is divided into two main sections: 
-+  First, you perform the necessary setup to create a Lambda function and then you test it by invoking it manually using sample event data\. 
-+ Second, you create an Amazon SQS queue and add event source mapping in AWS Lambda to associate the queue with your Lambda function\. AWS Lambda starts polling the queue\. Then, you test the end\-to\-end setup\. AWS Lambda detects the new messages as it polls the queue and executes your Lambda function\. 
-
-**Important**  
-Both the Lambda function and the Amazon SQS queue must be in the same AWS region\. This tutorial assumes that you create these resources in the `us-east-1` region\.
-
-## Next Step<a name="wt-sqs-next-step"></a>
-
-[Step 1: Prepare](with-sqs-prepare.md)
\ No newline at end of file
diff --git a/doc_source/with-sqs-prepare.md b/doc_source/with-sqs-prepare.md
deleted file mode 100644
index c085774..0000000
--- a/doc_source/with-sqs-prepare.md
+++ /dev/null
@@ -1,10 +0,0 @@
-# Step 1: Prepare<a name="with-sqs-prepare"></a>
-
-Make sure you have completed the following steps:
-+ **Signed up for an AWS account** and created an administrator user in the account \(called **adminuser**\), as explained in the following steps:
-  +  To create an IAM user for yourself and add the user to an Administrators group  Use your AWS account email address and password to sign in as the *[AWS account root user](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html)* to the IAM console at [https://console\.aws\.amazon\.com/iam/](https://console.aws.amazon.com/iam/)\.  We strongly recommend that you adhere to the best practice of using the **Administrator** user below and securely lock away the root user credentials\. Sign in as the root user only to perform a few [account and service management tasks](http://docs.aws.amazon.com/general/latest/gr/aws_tasks-that-require-root.html)\.    In the navigation pane of the console, choose **Users**, and then choose **Add user**\.   For **User name**, type ** Administrator**\.   Select the check box next to **AWS Management Console access**, select **Custom password**, and then type the new user's password in the text box\. You can optionally select **Require password reset** to force the user to select a new password the next time the user signs in\.   Choose **Next: Permissions**\.   On the **Set permissions for user** page, choose **Add user to group**\.   Choose **Create group**\.   In the **Create group** dialog box, type ** Administrators**\.   For **Filter**, choose **Job function**\.   In the policy list, select the check box for ** AdministratorAccess**\. Then choose **Create group**\.   Back in the list of groups, select the check box for your new group\. Choose **Refresh** if necessary to see the group in the list\.   Choose **Next: Review** to see the list of group memberships to be added to the new user\. When you are ready to proceed, choose **Create user**\.   You can use this same process to create more groups and users, and to give your users access to your AWS account resources\. To learn about using policies to restrict users' permissions to specific AWS resources, go to [Access Management](http://docs.aws.amazon.com/IAM/latest/UserGuide/access.html) and [Example Policies](http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_examples.html)\. 
-+ **Installed and set up the AWS CLI**\. For instructions, see [Set Up the AWS Command Line Interface \(AWS CLI\)](setup-awscli.md)\.
-
-## Next Step<a name="with-sqs-next-step-2"></a>
-
-[Step 2: Create a Lambda Function and Invoke It Manually \(Using Sample Event Data\)](with-sqs-create-test-function.md)
\ No newline at end of file
diff --git a/doc_source/with-sqs.md b/doc_source/with-sqs.md
deleted file mode 100644
index 484c79d..0000000
--- a/doc_source/with-sqs.md
+++ /dev/null
@@ -1,30 +0,0 @@
-# Using AWS Lambda with Amazon SQS<a name="with-sqs"></a>
-
-If you want to build asynchronous workflows, you can configure your Lambda function to process queued messages from [Amazon SQS \(Simple Queue Service\)](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/Welcome.html)\. AWS Lambda polls the Amazon SQS queue, reads the new messages and invokes any Lambda function subscribed to that queue\. 
-
-You can also customize your Amazon SQS queue attributes to control how and when your Lambda function is invoked\. For example:
-+ [Visibility Timeouts](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html)
-+ [Delay Queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-delay-queues.html)
-
- For more information, see [Amazon SQS](https://aws.amazon.com/sqs/)\. 
-
-Note the following about how Amazon Simple Queue Service and AWS Lambda integration works:
-+ **Synchronous invocation** – AWS Lambda invokes a Lambda function using the `RequestResponse` invocation type\. For more information about invocation types, see [Invocation Types](java-invocation-options.md)\. 
-+ **Event structure** – The event your Lambda function receives is a new message on the Amazon SQS queue that AWS Lambda reads\. For an example, see [Amazon SQS Event](eventsources.md#eventsources-sqs)\.
-
- To configure your Lambda function to process these messages, use the following API operations:
-+ [CreateEventSourceMapping](API_CreateEventSourceMapping.md)
-+ [UpdateEventSourceMapping](API_UpdateEventSourceMapping.md)
-
-When using these operations to map your Lambda function to an Amazon SQS queue, note the the following configuration parameters:
-+ **BatchSize**: The largest number of records that AWS Lambda will retrieve from each [ReceiveMessage](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_ReceiveMessage.html) call\. The maximum batch size supported by Amazon Simple Queue Service is up to 10 queue messages per batch\. The maximum allowed individual message size and the maximum total payload size \(the sum of the individual lengths of all of the batched messages\) are both 256 KB \(262,144 bytes\)\. The default setting is 1\.
-+ **Enabled**: A flag to signal AWS Lambda that it should start polling your specified Amazon SQS queue\. 
-+ **EventSourceArn**: The ARN \(Amazon Resource Name\) of your Amazon SQS queue that AWS Lambda is monitoring for new messages\. 
-+ **FunctionName**: The Lambda function to invoke when AWS Lambda detects new messages on your configured Amazon SQS queue\. 
-
-**Important**  
-Amazon Simple Queue Service supports both Standard and FIFO queues\. For this release, only Standard queues are supported\. For more information on the difference, see [What is Amazon Simple Queue Service?](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/Welcome.html)
-
-Regardless of the event source that invokes a Lambda function, AWS Lambda will invoke it on your behalf\. If your Lambda function needs to access any other AWS resources, you need to grant the relevant permissions to access those resources\.
-
- You specifically need to grant AWS Lambda permissions to poll your Amazon SQS queue\. You grant these permissions to an IAM role \(execution role\) that AWS Lambda can assume to poll the queue and execute the Lambda function\. **NOTE TO REVIEWERS: MORE INFORMATION ON THIS AND A LINK TO THIS SPECIFIC USE WILL BE ADDED PRIOR TO TEAM\-WIDE DOC BASH:** You create this role first and then enable it at the time you create the Lambda function\. For more information, see [Manage Permissions: Using an IAM Role \(Execution Role\)](intro-permission-model.md#lambda-intro-execution-role)\.
\ No newline at end of file
diff --git a/doc_source/with-sqscreate-test-function.md b/doc_source/with-sqscreate-test-function.md
deleted file mode 100644
index 66f220c..0000000
--- a/doc_source/with-sqscreate-test-function.md
+++ /dev/null
@@ -1,16 +0,0 @@
-# Step 2: Create a Lambda Function and Invoke It Manually \(Using Sample Event Data\)<a name="with-sqscreate-test-function"></a>
-
-In this section, you do the following:
-
-+ Create a Lambda function deployment package using the sample code provided\. The sample Lambda function code that you'll use to process DynamoDB events is provided in various languages\. Select one of the languages and follow the corresponding instructions to create a deployment package\.
-**Note**  
-To see more examples of using other AWS services within your function, including calling other Lambda functions, see [AWS SDK for JavaScript](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/frames.html)
-
-+ Create an IAM role \(execution role\)\. At the time you upload the deployment package, you need to specify an IAM role \(execution role\) that Lambda can assume to execute the function on your behalf\. For example, AWS Lambda needs permissions for DynamoDB actions so it can poll the stream and read records from the stream\. In the *pull* model you must also grant AWS Lambda permissions to invoke your Lambda function\. The example Lambda function writes some of the event data to CloudWatch, so it needs permissions for necessary CloudWatch actions\. 
-
-+ Create the Lambda function by uploading the deployment package, and then test it by invoking it manually using sample DynamoDB event data\. You provide both the deployment package and the IAM role at the time of creating a Lambda function\. You can also specify other configuration information, such as the function name, memory size, runtime environment to use, and the handler\. For more information about these parameters, see [CreateFunction](API_CreateFunction.md)\. After creating the Lambda function, you invoke it using sample Amazon DynamoDB event data\. 
-
-
-+ [Step 2\.1: Create a Lambda Function Deployment Package](with-sqs-create-package.md)
-+ [Step 2\.2: Create the Execution Role \(IAM Role\)](with-sqs-create-execution-role.md)
-+ [Step 2\.3: Create the Lambda Function and Test It Manually](with-sqs-create-function.md)
\ No newline at end of file
diff --git a/doc_source/with-userapp-walkthrough-custom-events-create-iam-role.md b/doc_source/with-userapp-walkthrough-custom-events-create-iam-role.md
index 138c485..ea1c9f8 100644
--- a/doc_source/with-userapp-walkthrough-custom-events-create-iam-role.md
+++ b/doc_source/with-userapp-walkthrough-custom-events-create-iam-role.md
@@ -1,13 +1,17 @@
 # Step 2\.2: Create the Execution Role \(IAM Role\)<a name="with-userapp-walkthrough-custom-events-create-iam-role"></a>
 
 When the Lambda function in this tutorial executes, it needs permissions to write logs to Amazon CloudWatch\. You grant these permissions by creating an IAM role \(execution role\)\. AWS Lambda assumes this role when executing your Lambda function on your behalf\. In this section, you create an IAM role using the following predefined role type and access policy:
+
 + AWS service role of the "AWS Lambda" type\. This role grants AWS Lambda permission to assume the role\. 
+
 + "AWSLambdaBasicExecutionRole" access policy that you attach to the role\. This existing policy grants permissions that include permissions for Amazon CloudWatch actions that your Lambda function needs\.
 
 For more information about IAM roles, see [IAM Roles](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) in the *IAM User Guide*\. 
 
 In this section, you create an IAM role using the following predefined role type and access permissions policy:
+
 + AWS service role of the type **AWS Lambda** – This role grants AWS Lambda permissions to assume the role\. 
+
 + **AWSLambdaBasicExecutionRole** access permissions policy that you attach to the role\. 
 
 For more information about IAM roles, see [IAM Roles](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) in the *IAM User Guide*\. Use the following procedure to create the IAM role\.
@@ -17,8 +21,11 @@ For more information about IAM roles, see [IAM Roles](http://docs.aws.amazon.com
 1. Sign in to the AWS Management Console and open the IAM console at [https://console\.aws\.amazon\.com/iam/](https://console.aws.amazon.com/iam/)\.
 
 1. Follow the steps in [Creating a Role to Delegate Permissions to an AWS Service](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-service.html) in the *IAM User Guide* to create an IAM role \(execution role\)\. As you follow the steps to create a role, note the following:
+
    + In **Role Name**, use a name that is unique within your AWS account \(for example, **lambda\-custom\-app\-execution\-role**\)\. 
+
    + In **Select Role Type**, choose **AWS Service Roles**, and then choose **AWS Lambda**\. This grants the AWS Lambda service permissions to assume the role\.
+
    + In **Attach Policy**, choose **AWSLambdaBasicExecutionRole**\.
 
 1. Write down the role ARN\. You will need it in the next step when you create your Lambda function\.
\ No newline at end of file
diff --git a/doc_source/with-userapp-walkthrough-custom-events-create-nodejs-function.md b/doc_source/with-userapp-walkthrough-custom-events-create-nodejs-function.md
index c467cf8..75a924d 100644
--- a/doc_source/with-userapp-walkthrough-custom-events-create-nodejs-function.md
+++ b/doc_source/with-userapp-walkthrough-custom-events-create-nodejs-function.md
@@ -16,7 +16,7 @@ Follow the instructions to create an AWS Lambda function deployment package\.
    };
    ```
 **Note**  
-The code sample is compliant with the Node\.js runtimes 4\.3 or higher\. For more information, see [Programming Model\(Node\.js\)](programming-model.md)
+The code sample is compliant with the Node\.js runtimes v6\.10 ore v4\.3\. For more information, see [Programming Model\(Node\.js\)](programming-model.md)
 
 1. Save the file as `helloworld.js`\.
 
diff --git a/doc_source/with-userapp-walkthrough-custom-events-create-test-function.md b/doc_source/with-userapp-walkthrough-custom-events-create-test-function.md
index c87ffd0..759195f 100644
--- a/doc_source/with-userapp-walkthrough-custom-events-create-test-function.md
+++ b/doc_source/with-userapp-walkthrough-custom-events-create-test-function.md
@@ -1,13 +1,16 @@
 # Step 2: Create a Lambda Function and Invoke It Manually<a name="with-userapp-walkthrough-custom-events-create-test-function"></a>
 
 In this section, you do the following:
+
 + Create a deployment package\. A deployment package is a \.zip file that contains your code and any dependencies\. For this tutorial there are no dependencies, you only have a simple example code\.
+
 + Create an IAM role \(execution role\)\. At the time you upload the deployment package, you need to specify an IAM role \(execution role\) that Lambda can assume to execute the function on your behalf\. 
 
   You also grant this role the permissions that your Lambda function needs\. The code in this tutorial writes logs to Amazon CloudWatch Logs\. So you need to grant permissions for CloudWatch actions\. For more information, see [AWS Lambda Watch Logs](https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#logs:)\.
+
 + Create a Lambda function \(`HelloWorld`\) using the `create-function` CLI command\. For more information about the underlying API and related parameters, see [CreateFunction](API_CreateFunction.md)\.
 
-**Topics**
+
 + [Step 2\.1: Create a Lambda Function Deployment Package](with-userapp-walkthrough-custom-events-create-nodejs-function.md)
 + [Step 2\.2: Create the Execution Role \(IAM Role\)](with-userapp-walkthrough-custom-events-create-iam-role.md)
 + [Step 2\.3: Create a Lambda Function](with-userapp-walkthrough-custom-events-upload.md)
diff --git a/doc_source/with-userapp-walkthrough-custom-events-deploy.md b/doc_source/with-userapp-walkthrough-custom-events-deploy.md
index 7ee04c8..8eb5bf1 100644
--- a/doc_source/with-userapp-walkthrough-custom-events-deploy.md
+++ b/doc_source/with-userapp-walkthrough-custom-events-deploy.md
@@ -1,7 +1,9 @@
 # Step 1: Prepare<a name="with-userapp-walkthrough-custom-events-deploy"></a>
 
 Make sure you have completed the following steps:
+
 + Signed up for an AWS account and created an administrator user in the account \(called **adminuser**\)\. For instructions, see [Set Up an AWS Account](setup.md)\. 
+
 + Installed and set up the AWS CLI\. For instructions, see [Set Up the AWS Command Line Interface \(AWS CLI\)](setup-awscli.md)\.
 
 ## Next Step<a name="with-userapp-aws-cli-setup-instructions-next-step"></a>
diff --git a/doc_source/with-userapp-walkthrough-custom-events-invoke.md b/doc_source/with-userapp-walkthrough-custom-events-invoke.md
index c34294b..c6ab418 100644
--- a/doc_source/with-userapp-walkthrough-custom-events-invoke.md
+++ b/doc_source/with-userapp-walkthrough-custom-events-invoke.md
@@ -62,9 +62,11 @@ Because you invoked the function using the `RequestResponse` invocation type, th
 You are able to execute this function because you are using the same AWS account to create and invoke the Lambda function\. However, if you want to grant cross\-account permissions to another AWS account or grant permissions to another an AWS service to execute the function, you must add a permissions to the access permissions policy associated with the function\. The Amazon S3 tutorial, which uses Amazon S3 as the event source \(see [Tutorial: Using AWS Lambda with Amazon S3](with-s3-example.md)\), grants such permissions to Amazon S3 to invoke the function\.
 
 You can monitor the activity of your Lambda function in the AWS Lambda console\. 
+
 + Sign in to the AWS Management Console and open the AWS Lambda console at [https://console\.aws\.amazon\.com/lambda/](https://console.aws.amazon.com/lambda/)\.
 
   The AWS Lambda console shows a graphical representation of some of the CloudWatch metrics in the **Cloudwatch Metrics at a glance** section for your function\.
+
 + For each graph, you can also choose the **logs** link to view the CloudWatch logs directly\.
 
 ## Next Step<a name="with-userapp-walkthrough-custom-events-invoke-next-step"></a>
diff --git a/doc_source/with-userapp-walkthrough-custom-events-upload.md b/doc_source/with-userapp-walkthrough-custom-events-upload.md
index ef823b9..4dd9093 100644
--- a/doc_source/with-userapp-walkthrough-custom-events-upload.md
+++ b/doc_source/with-userapp-walkthrough-custom-events-upload.md
@@ -1,6 +1,6 @@
 # Step 2\.3: Create a Lambda Function<a name="with-userapp-walkthrough-custom-events-upload"></a>
 
-Execute the following Lambda CLI `create-function` command to create a Lambda function\. You provide the deployment package and IAM role ARN as parameters\. Note that the `Runtime` parameter uses `nodejs6.10` but you can also specify `nodejs8.10` or `nodejs4.3`\. 
+Execute the following Lambda CLI `create-function` command to create a Lambda function\. You provide the deployment package and IAM role ARN as parameters\. Note that the `Runtime` parameter uses `nodejs6.10` but you can also specify `nodejs4.3`\. 
 
 ```
 $ aws lambda create-function \
diff --git a/doc_source/with-userapp-walkthrough-custom-events.md b/doc_source/with-userapp-walkthrough-custom-events.md
index c0314c6..be7f744 100644
--- a/doc_source/with-userapp-walkthrough-custom-events.md
+++ b/doc_source/with-userapp-walkthrough-custom-events.md
@@ -3,6 +3,7 @@
 In this tutorial, you use the AWS CLI to create and invoke a Lambda function and explore other AWS Lambda APIs\.
 
 You'll do the following:
+
 +  Create a Lambda function to process an event it receives as a parameter\. You use the following example Node\.js code to create your Lambda function\.
 
   ```
@@ -17,9 +18,10 @@ You'll do the following:
   };
   ```
 **Note**  
-The code sample is compliant with the Node\.js runtime v4\.3 or higher\. For more information, see [Programming Model\(Node\.js\)](programming-model.md)
+The code sample is compliant with the Node\.js runtime v4\.3\. For more information, see [Programming Model\(Node\.js\)](programming-model.md)
 
   The function is simple\. It processes incoming event data by logging it \(these logs are available in Amazon CloudWatch\), and in the request\-response model, you can request the log data be returned in the response\.
+
 +  Simulate a user application that sends an event to your Lambda function by invoking your Lambda function manually using the following sample event data\.
 
   ```
